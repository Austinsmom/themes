{"version":3,"sources":["components/Console/Console.module.css","components/ShadeChoice/ShadeChoice.module.css","components/Home/Home.module.css","components/Console/consoleMethods.ts","components/Console/Console.tsx","components/ThemeList/ThemeList.tsx","components/ThemeSelect/ThemeSelect.tsx","components/Header/Header.tsx","components/Home/homeMethods.ts","components/ShadeChoice/ShadeChoice.tsx","components/Home/Home.tsx","App.tsx","serviceWorker.ts","index.tsx","components/ThemeList/ThemeList.module.css","components/Header/Header.module.css","components/ThemeSelect/ThemeSelect.module.css"],"names":["module","exports","backgroundKeys","textKeys","validKeys","initThemeObj","name","black","red","green","yellow","blue","purple","cyan","white","brightBlack","brightRed","brightGreen","brightYellow","brightBlue","brightPurple","brightCyan","brightWhite","background","foreground","parseValidKeys","theme","reduce","acc","key","Console","props","useState","textCopied","setTextCopied","className","css","container","style","backgroundColour","data-testid","color","primaryColour","matrix","map","textKey","i","backgroundKey","y","cell","button","onClick","clipboard","JSON","stringify","setTimeout","loading","ThemeList","themeNames","themeName","activeTheme","type","id","value","checked","onChange","dispatch","label","htmlFor","tabbed","ThemeSelect","select","e","preventDefault","target","Header","title","paragraph","rel","href","process","titleColours","getRandomColour","accessibleColour","sort","Math","random","find","titleColour","contrast","ratio","compare","a","b","toUpperCase","request","fetch","response","json","themes","isDark","console","error","THEME_COLOUR","initialState","filteredThemes","isSmallScreenSize","window","innerWidth","themeShade","homeReducer","state","action","produce","draftState","filter","ShadeChoice","Home","useReducer","useEffect","resizer","ResizeObserver","entries","log","width","contentRect","screenSizeObserver","observe","document","body","unobserve","sidebar","dark","light","content","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.84000f0d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Console_container__2LGSf\",\"name\":\"Console_name__11bSO\",\"matrix\":\"Console_matrix__1QWdB\",\"cell\":\"Console_cell__hou6F\",\"button\":\"Console_button__11w1H\",\"loading\":\"Console_loading__UHool\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ShadeChoice_container__2Hg7y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Home_container__1ukFy\",\"sidebar\":\"Home_sidebar__3bw15\",\"content\":\"Home_content__2tXgb\",\"light\":\"Home_light__3lWIy\",\"dark\":\"Home_dark__2rU8n\"};","import {\n  backgroundKeyType,\n  textKeyType,\n  validThemeType,\n  themeType,\n  validKeysType,\n} from 'types';\n\nexport const backgroundKeys: backgroundKeyType[] = [\n  'background',\n  'black',\n  'red',\n  'green',\n  'yellow',\n  'blue',\n  'purple',\n  'cyan',\n  'white',\n  'background',\n];\n\nexport const textKeys: textKeyType[] = [\n  'black',\n  'brightBlack',\n  'red',\n  'brightRed',\n  'green',\n  'brightGreen',\n  'yellow',\n  'brightYellow',\n  'blue',\n  'brightBlue',\n  'purple',\n  'brightPurple',\n  'cyan',\n  'brightCyan',\n  'white',\n  'brightWhite',\n];\n\nconst validKeys: validKeysType = [\n  'name',\n  'black',\n  'red',\n  'green',\n  'yellow',\n  'blue',\n  'purple',\n  'cyan',\n  'white',\n  'brightBlack',\n  'brightRed',\n  'brightGreen',\n  'brightYellow',\n  'brightBlue',\n  'brightPurple',\n  'brightCyan',\n  'brightWhite',\n  'background',\n  'foreground',\n];\n\n// this just keeps Typescript happy\nconst initThemeObj = {\n  name: '',\n  black: '',\n  red: '',\n  green: '',\n  yellow: '',\n  blue: '',\n  purple: '',\n  cyan: '',\n  white: '',\n  brightBlack: '',\n  brightRed: '',\n  brightGreen: '',\n  brightYellow: '',\n  brightBlue: '',\n  brightPurple: '',\n  brightCyan: '',\n  brightWhite: '',\n  background: '',\n  foreground: '',\n};\n\nexport const parseValidKeys = (theme: themeType): validThemeType => {\n  return validKeys.reduce(\n    (acc, key) => ({\n      ...acc,\n      ...{\n        [key]: theme[key],\n      },\n    }),\n    initThemeObj\n  );\n};\n","import React, {useState} from 'react';\nimport * as clipboard from 'clipboard-polyfill';\n\nimport {themeType} from 'types';\nimport css from './Console.module.css';\nimport {backgroundKeys, textKeys, parseValidKeys} from './consoleMethods';\n\ntype PropsType = {\n  theme?: themeType;\n  primaryColour: string;\n  backgroundColour: string;\n};\n\nconst Console: React.FC<PropsType> = (props) => {\n  const [textCopied, setTextCopied] = useState(false);\n  if (!props.theme) {\n    return (\n      <div\n        style={{background: props.backgroundColour, color: props.primaryColour}}\n        className={css.loading}\n      >\n        Loading...\n      </div>\n    );\n  }\n  return (\n    <section\n      className={css.container}\n      style={{background: props.backgroundColour}}\n    >\n      <h2\n        data-testid=\"selected-title\"\n        className={css.name}\n        style={{color: props.primaryColour}}\n      >\n        {props.theme.name}\n      </h2>\n      <div className={css.matrix}>\n        {textKeys.map((textKey, i) =>\n          backgroundKeys.map((backgroundKey, y) => (\n            <div\n              key={i + ' ' + y}\n              className={css.cell}\n              style={{\n                background: props.theme ? props.theme[backgroundKey] : '',\n                color: props.theme ? props.theme[textKey] : '',\n              }}\n            >\n              gYw\n            </div>\n          ))\n        )}\n      </div>\n      <button\n        className={css.button}\n        style={{color: props.theme.background, background: props.primaryColour}}\n        onClick={() => {\n          if (!textCopied && props.theme) {\n            setTextCopied(true);\n            clipboard.writeText(\n              JSON.stringify(parseValidKeys(props.theme), null, 2)\n            );\n            setTimeout(() => {\n              setTextCopied(false);\n            }, 500);\n          }\n        }}\n      >\n        {!textCopied ? 'Copy Theme' : 'Copied!'}\n      </button>\n    </section>\n  );\n};\n\nexport default Console;\n","import React from 'react';\n\nimport {actionTypes} from 'types';\nimport css from './ThemeList.module.css';\n\ntype PropsType = {\n  themeNames: string[];\n  activeTheme: string;\n  dispatch: React.Dispatch<actionTypes>;\n  primaryColour: string;\n  backgroundColour: string;\n};\n\nconst ThemeList: React.FC<PropsType> = (props) => (\n  <fieldset className={css.container} name=\"theme\" data-testid=\"theme-list\">\n    {props.themeNames.map((themeName) => (\n      <div\n        key={themeName}\n        style={{\n          color: themeName === props.activeTheme ? props.backgroundColour : '',\n          background:\n            themeName === props.activeTheme ? props.primaryColour : '',\n        }}\n        className={`${css.theme}`}\n      >\n        <input\n          type=\"radio\"\n          id={themeName}\n          name=\"theme\"\n          value={themeName}\n          checked={themeName === props.activeTheme}\n          onChange={() => {\n            props.dispatch({type: 'SET', theme: themeName});\n          }}\n        />\n        <label className={css.label} htmlFor={themeName}>\n          <span className={css.tabbed}>{themeName}</span>\n        </label>\n      </div>\n    ))}\n  </fieldset>\n);\n\nexport default ThemeList;\n","import React from 'react';\n\nimport {actionTypes} from 'types';\nimport css from './ThemeSelect.module.css';\n\ntype PropsType = {\n  themeNames: string[];\n  activeTheme: string;\n  dispatch: React.Dispatch<actionTypes>;\n};\n\nconst ThemeSelect: React.FC<PropsType> = (props) => (\n  <label className={css.container} htmlFor=\"theme-select\">\n    Change theme:{' '}\n    <select\n      id=\"theme-select\"\n      className={css.select}\n      value={props.activeTheme}\n      onChange={(e) => {\n        e.preventDefault();\n        if (e.target) {\n          props.dispatch({type: 'SET', theme: e.target.value});\n        }\n      }}\n    >\n      {props.themeNames.map((themeName) => (\n        <option value={themeName} key={themeName}>\n          {themeName}\n        </option>\n      ))}\n    </select>\n  </label>\n);\n\nexport default ThemeSelect;\n","import React from 'react';\n\nimport css from './Header.module.css';\n\ntype PropTypes = {\n  primaryColour: string;\n};\n\nconst Header: React.FC<PropTypes> = (props) => (\n  <>\n    <h1 style={{color: props.primaryColour}} className={css.title}>\n      Windows Terminal Themes\n    </h1>\n    <p className={css.paragraph}>\n      Themes for{' '}\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href=\"https://www.microsoft.com/en-us/p/windows-terminal-preview/9n0dx20hk701\"\n      >\n        Windows Terminal (Preview)\n      </a>\n      . To add new themes, open up settings (profile.json), copy a theme into\n      schemes and then reference the name in profiles.\n    </p>\n    <p className={css.paragraph}>\n      The themes come from{' '}\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href=\"https://github.com/mbadolato/iTerm2-Color-Schemes\"\n      >\n        iTerm2 Color Schemes\n      </a>\n      , so thanks to them.\n    </p>\n    <p className={css.paragraph}>\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href={`${process.env.REACT_APP_PUBLIC_PATH}/colour-schemes.json`}\n      >\n        Download all the themes\n      </a>\n      {' | '}\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href=\"https://github.com/atomcorp/themes\"\n      >\n        Github page\n      </a>\n    </p>\n  </>\n);\n\nexport default Header;\n","import contrast from 'get-contrast';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport produce from 'immer';\n\nimport {\n  themeType,\n  themeShadeType,\n  themeShadeObjectType,\n  actionTypes,\n} from 'types';\n\ntype titleColoursType =\n  | 'black'\n  | 'red'\n  | 'green'\n  | 'yellow'\n  | 'blue'\n  | 'purple'\n  | 'cyan'\n  | 'white';\n\nconst titleColours: titleColoursType[] = [\n  'black',\n  'red',\n  'green',\n  'yellow',\n  'blue',\n  'purple',\n  'cyan',\n  'white',\n];\n\nexport const getRandomColour = (theme: themeType | undefined): string => {\n  if (theme == null) {\n    return '';\n  }\n  const randomisedColours = titleColours.sort(() => Math.random() - 0.5);\n  const accessibleColour = randomisedColours.find(\n    (titleColour: titleColoursType) =>\n      contrast.ratio(theme[titleColour], theme.background) > 4.5\n  );\n  if (accessibleColour != null) {\n    return theme[accessibleColour];\n  }\n  return theme[titleColours[0]];\n};\n\nconst compare = (a: themeType, b: themeType): number => {\n  if (a.name.toUpperCase() < b.name.toUpperCase()) {\n    return -1;\n  }\n  if (a.name.toUpperCase() > b.name.toUpperCase()) {\n    return 1;\n  }\n  // a must be equal to b\n  return 0;\n};\n\nconst assignColourType = (themes: themeType[]): themeType[] => {\n  return themes.map((theme) => {\n    theme.isDark = contrast.ratio(theme.background, '#000') < 8;\n    return theme;\n  });\n};\n\nexport const screenSizeObserver = (\n  dispatch: React.Dispatch<actionTypes>\n): ResizeObserver => {\n  return new ResizeObserver((entries) => {\n    console.log(entries);\n    const {width} = entries[0].contentRect;\n    if (width > 768) {\n      dispatch({type: 'SIZE', isSmallScreenSize: false});\n    } else if (width < 768) {\n      dispatch({type: 'SIZE', isSmallScreenSize: true});\n    }\n  });\n};\n\nexport const request = async (\n  dispatch: React.Dispatch<actionTypes>\n): Promise<void> => {\n  try {\n    const response = await fetch(\n      `${process.env.REACT_APP_PUBLIC_PATH}/colour-schemes.json`\n    );\n    const json = await response.json();\n    dispatch({\n      type: 'LOAD',\n      themes: assignColourType(json.sort(compare)),\n    });\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nexport const THEME_COLOUR: themeShadeObjectType = {\n  LIGHT: 'LIGHT',\n  DARK: 'DARK',\n  ANY: 'ANY',\n};\n\nexport type stateType = {\n  themes: themeType[];\n  filteredThemes: themeType[];\n  activeTheme: string;\n  isSmallScreenSize: boolean;\n  themeShade: themeShadeType;\n  primaryColour: string;\n  backgroundColour: string;\n};\n\nexport const initialState: stateType = {\n  themes: [],\n  filteredThemes: [],\n  activeTheme: '',\n  isSmallScreenSize: window.innerWidth < 768,\n  themeShade: THEME_COLOUR.DARK,\n  primaryColour: '#fded02',\n  backgroundColour: '#090300',\n};\n\nexport const homeReducer = (\n  state: stateType,\n  action: actionTypes\n): stateType => {\n  return produce(state, (draftState: stateType) => {\n    let theme;\n    switch (action.type) {\n      case 'LOAD':\n        draftState.themes = action.themes;\n        draftState.filteredThemes = action.themes.filter(\n          (theme: themeType) => theme.isDark\n        );\n        draftState.activeTheme = draftState.filteredThemes[0].name;\n        break;\n      case 'SET':\n        draftState.activeTheme = action.theme;\n        // eslint-disable-next-line no-case-declarations\n        theme = state.themes.find((theme) => theme.name === action.theme);\n        if (theme) {\n          draftState.primaryColour = getRandomColour(theme);\n          draftState.backgroundColour = theme.background;\n        }\n        break;\n      case 'SIZE':\n        draftState.isSmallScreenSize = action.isSmallScreenSize;\n        break;\n      case 'SHADE':\n        draftState.themeShade = action.themeShade;\n        if (draftState.themeShade === THEME_COLOUR.DARK) {\n          draftState.filteredThemes = state.themes.filter(\n            (theme) => theme.isDark\n          );\n        }\n        if (draftState.themeShade === THEME_COLOUR.LIGHT) {\n          draftState.filteredThemes = state.themes.filter(\n            (theme) => !theme.isDark\n          );\n        }\n        draftState.activeTheme = draftState.filteredThemes[0].name;\n        // eslint-disable-next-line no-case-declarations\n        theme = state.themes.find((theme) => theme.name === action.theme);\n        if (theme) {\n          draftState.primaryColour = getRandomColour(theme);\n          draftState.backgroundColour = theme.background;\n        }\n        break;\n      default:\n        break;\n    }\n  });\n};\n","import React from 'react';\n\nimport {THEME_COLOUR} from 'components/Home/homeMethods';\nimport {themeShadeType, actionTypes} from 'types';\nimport css from './ShadeChoice.module.css';\n\ntype PropsState = {\n  themeShade: themeShadeType;\n  dispatch: React.Dispatch<actionTypes>;\n};\n\nconst ShadeChoice: React.FC<PropsState> = (props) => (\n  <section className={css.container}>\n    Choose type:\n    <label htmlFor=\"dark\">\n      <input\n        name=\"shade\"\n        type=\"radio\"\n        id=\"dark\"\n        value={THEME_COLOUR.DARK}\n        checked={THEME_COLOUR.DARK === props.themeShade}\n        onChange={() => {\n          props.dispatch({type: 'SHADE', themeShade: THEME_COLOUR.DARK});\n        }}\n      />\n      Dark\n    </label>\n    <label htmlFor=\"light\">\n      <input\n        name=\"shade\"\n        type=\"radio\"\n        id=\"light\"\n        value={THEME_COLOUR.LIGHT}\n        checked={THEME_COLOUR.LIGHT === props.themeShade}\n        onChange={() => {\n          props.dispatch({type: 'SHADE', themeShade: THEME_COLOUR.LIGHT});\n        }}\n      />\n      Light\n    </label>\n  </section>\n);\n\nexport default ShadeChoice;\n","import React, {useEffect, useReducer} from 'react';\n\nimport Console from 'components/Console/Console';\nimport ThemeList from 'components/ThemeList/ThemeList';\nimport ThemeSelect from 'components/ThemeSelect/ThemeSelect';\nimport Header from 'components/Header/Header';\nimport ShadeChoice from 'components/ShadeChoice/ShadeChoice';\nimport css from './Home.module.css';\nimport {\n  homeReducer,\n  initialState,\n  screenSizeObserver,\n  request,\n  THEME_COLOUR,\n} from './homeMethods';\n\nconst Home: React.FC = () => {\n  const [state, dispatch] = useReducer(homeReducer, {\n    ...initialState,\n    ...{isSmallScreenSize: window.innerWidth < 768},\n  });\n  useEffect(() => {\n    request(dispatch);\n    const resizer = screenSizeObserver(dispatch);\n    resizer.observe(document.body);\n    return () => {\n      resizer.unobserve(document.body);\n    };\n  }, []);\n  const theme = state.themes.find((theme) => theme.name === state.activeTheme);\n  const themeNames = state.filteredThemes.map((theme) => theme.name);\n  return (\n    <section className={css.container}>\n      <aside\n        style={{\n          background: state.backgroundColour,\n        }}\n        className={`${css.sidebar} ${\n          state.themeShade === THEME_COLOUR.DARK ? css.dark : css.light\n        }`}\n      >\n        <Header primaryColour={state.primaryColour} />\n        <ShadeChoice dispatch={dispatch} themeShade={state.themeShade} />\n        {!state.isSmallScreenSize ? (\n          <ThemeList\n            themeNames={themeNames}\n            activeTheme={state.activeTheme}\n            dispatch={dispatch}\n            primaryColour={state.primaryColour}\n            backgroundColour={state.backgroundColour}\n          />\n        ) : (\n          <ThemeSelect\n            themeNames={themeNames}\n            activeTheme={state.activeTheme}\n            dispatch={dispatch}\n          />\n        )}\n      </aside>\n      <section className={css.content}>\n        <Console\n          theme={theme}\n          primaryColour={state.primaryColour}\n          backgroundColour={state.backgroundColour}\n        />\n      </section>\n    </section>\n  );\n};\n\nexport default Home;\n","import React from 'react';\n\nimport Home from 'components/Home/Home';\n\nconst App: React.FC = () => {\n  return <Home />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ThemeList_container__KMQ-C\",\"theme\":\"ThemeList_theme__3lD1D\",\"label\":\"ThemeList_label__3WRZN\",\"active\":\"ThemeList_active__Ed-ep\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Header_title__3SH2Q\",\"paragraph\":\"Header_paragraph__BEjYQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ThemeSelect_container__33IBa\",\"select\":\"ThemeSelect_select__3hKQk\"};"],"sourceRoot":""}