{"version":3,"sources":["components/ThemePreview/ThemePreview.module.css","components/Toast/Toast.module.css","components/ColourTest/ColourTest.module.css","components/Home/Home.module.css","components/Skeleton/Skeleton.module.css","components/ConsoleTest/ConsoleTest.module.css","components/More/More.module.css","components/ThemePreview/consoleMethods.ts","components/ColourTest/ColourTest.tsx","components/ConsoleTest/codeblocks.ts","components/ConsoleTest/ConsoleTest.tsx","components/ConsoleTest/methods.tsx","components/Toast/Toast.tsx","Icons.tsx","components/ThemePreview/ThemePreviewButtons.tsx","components/ThemePreview/ThemePreview.tsx","components/More/More.tsx","components/Toolbar/Toolbar.tsx","components/More/MoreContent.tsx","components/ThemeSelect/ThemeSelect.tsx","components/Toggle/Toggle.tsx","utils/setcolours.ts","components/Home/homeMethods.ts","components/Home/Home.tsx","components/Skeleton/Skeleton.tsx","App.tsx","serviceWorker.ts","index.tsx","components/ThemeSelect/ThemeSelect.module.css","components/Toolbar/Toolbar.module.css","components/Toggle/Toggle.module.css"],"names":["module","exports","backgroundKeys","textKeys","validKeys","initThemeObj","name","black","red","green","yellow","blue","purple","cyan","white","brightBlack","brightRed","brightGreen","brightYellow","brightBlue","brightPurple","brightCyan","brightWhite","background","foreground","selectionBackground","cursorColor","ColourTest","props","className","css","matrix","data-testid","map","textKey","i","backgroundKey","y","key","cell","style","theme","color","codeblocks","id","markup","defaultColour","defaultCodeblock","ConsoleTest","useState","tab","setTab","activeCodeblock","find","codeblock","container","terminal","isDark","light","titlebar","tabs","active","radio","type","value","checked","onChange","htmlFor","code","split","string","matches","matchAll","colours","length","contents","undefined","Toast","isActive","title","message","Share","xmlns","height","size","width","viewBox","aria-labelledby","onClick","stroke","colour","backgroundColor","backgroundColour","transform","d","fill","Copy","Light","outlineColor","Dark","Colours","Console","Arrow","direction","Logo","x2","y2","originalArr","offset","Math","floor","stopColor","attributeName","values","arr","index","join","slice","dur","repeatCount","Chevron","ThemePreviewButton","testid","button","primary","children","ThemePreviewButtons","buttons","handleCopy","icon","handleShare","getComputedStyle","document","documentElement","getPropertyValue","toastmessages","themename","initialState","reducer","state","action","immer","draftState","ThemePreview","useReducer","dispatch","ThemeSelectContainer","Toggles","primaryColour","loading","isSmallScreenSize","toggles","previewType","select","clipboard","JSON","stringify","reduce","acc","setTimeout","window","location","origin","pathname","encodeURIComponent","Info","trigger","aria-controls","aria-haspopup","aria-expanded","isMoreOpen","Toolbar","href","more","More","MoreSection","section","heading","MoreContent","overlay","content","display","aria-hidden","role","aria-label","downloadAllThemes","ThemeSelect","arrow","label","ref","themeselectRef","activeTheme","e","preventDefault","target","themeNames","themeName","Toggle","option","isSelected","currentValue","payload","outline","root","cssvarDark","cssvarLight","setcolours","Object","entries","forEach","val","setProperty","titleColours","getRandomColour","accessibleColour","sort","random","titleColour","contrast","ratio","returnInitialTheme","search","URLSearchParams","get","THEME_COLOUR","themes","filteredThemes","innerWidth","themeShade","homeReducer","initialTheme","foundTheme","console","log","filter","currentIndex","findIndex","stopSelectDetection","current","activeElement","blur","shadeValues","previewValues","Home","useRef","useEffect","resizer","ResizeObserver","contentRect","screenSizeObserver","observe","body","unobserve","shortcutFns","shortcuts","addEventListener","removeEventListener","stringyTheme","useMemo","sampleColours","parse","themeBlob","Blob","saveAs","autoBom","Skeleton","App","setThemes","a","fetch","res","json","then","backupthemes","default","getThemes","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3b7801ee.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ThemePreview_container__2JwIk\",\"loading\":\"ThemePreview_loading__1o8br\",\"buttons\":\"ThemePreview_buttons__v-3V3\",\"button\":\"ThemePreview_button__3TR7c\",\"primary\":\"ThemePreview_primary__2_IhG\",\"toggles\":\"ThemePreview_toggles__3SAqF\",\"select\":\"ThemePreview_select__3SFPs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Toast_container__2RrJQ\",\"active\":\"Toast_active__3IxHX\",\"title\":\"Toast_title__1p4gQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"matrix\":\"ColourTest_matrix__3x6Lm\",\"cell\":\"ColourTest_cell__opYFy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Home_container__nWlbU\",\"sidebar\":\"Home_sidebar__2ovA5\",\"content\":\"Home_content__1T6Qf\",\"title\":\"Home_title__1GR0U\",\"light\":\"Home_light__2G6mS\",\"dark\":\"Home_dark__3UboT\",\"actions\":\"Home_actions__2nfQk\",\"buttons\":\"Home_buttons__3DGBw\",\"help\":\"Home_help__11-cQ\",\"git\":\"Home_git__29RX7\",\"download\":\"Home_download__2E4od\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Skeleton_container__1ug3w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ConsoleTest_container__10tZG\",\"terminal\":\"ConsoleTest_terminal__2OiKZ\",\"light\":\"ConsoleTest_light__n5_sY\",\"titlebar\":\"ConsoleTest_titlebar__1Dfwu\",\"tabs\":\"ConsoleTest_tabs__1dGGo\",\"tab\":\"ConsoleTest_tab__2D6xA\",\"radio\":\"ConsoleTest_radio__KFNgZ\",\"active\":\"ConsoleTest_active__oI03b\",\"code\":\"ConsoleTest_code__3aQid\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"More_container__3rYKD\",\"trigger\":\"More_trigger__3AftZ\",\"content\":\"More_content__3ktIr\",\"slide_in_content\":\"More_slide_in_content__2ZKZO\",\"section\":\"More_section__3dLqT\",\"heading\":\"More_heading__1kUK6\",\"overlay\":\"More_overlay__OH_lB\",\"active\":\"More_active__1ADlS\"};","import {\r\n  backgroundKeyType,\r\n  textKeyType,\r\n  validThemeType,\r\n  themeType,\r\n  validKeysType,\r\n} from 'types';\r\n\r\nexport const backgroundKeys: backgroundKeyType[] = [\r\n  'background',\r\n  'black',\r\n  'red',\r\n  'green',\r\n  'yellow',\r\n  'blue',\r\n  'purple',\r\n  'cyan',\r\n  'white',\r\n  'background',\r\n];\r\n\r\nexport const textKeys: textKeyType[] = [\r\n  'black',\r\n  'brightBlack',\r\n  'red',\r\n  'brightRed',\r\n  'green',\r\n  'brightGreen',\r\n  'yellow',\r\n  'brightYellow',\r\n  'blue',\r\n  'brightBlue',\r\n  'purple',\r\n  'brightPurple',\r\n  'cyan',\r\n  'brightCyan',\r\n  'white',\r\n  'brightWhite',\r\n];\r\n\r\nexport const validKeys: validKeysType = [\r\n  'name',\r\n  'black',\r\n  'red',\r\n  'green',\r\n  'yellow',\r\n  'blue',\r\n  'purple',\r\n  'cyan',\r\n  'white',\r\n  'brightBlack',\r\n  'brightRed',\r\n  'brightGreen',\r\n  'brightYellow',\r\n  'brightBlue',\r\n  'brightPurple',\r\n  'brightCyan',\r\n  'brightWhite',\r\n  'background',\r\n  'foreground',\r\n  'selectionBackground',\r\n  'cursorColor',\r\n];\r\n\r\n// this just keeps Typescript happy\r\nconst initThemeObj = {\r\n  name: '',\r\n  black: '',\r\n  red: '',\r\n  green: '',\r\n  yellow: '',\r\n  blue: '',\r\n  purple: '',\r\n  cyan: '',\r\n  white: '',\r\n  brightBlack: '',\r\n  brightRed: '',\r\n  brightGreen: '',\r\n  brightYellow: '',\r\n  brightBlue: '',\r\n  brightPurple: '',\r\n  brightCyan: '',\r\n  brightWhite: '',\r\n  background: '',\r\n  foreground: '',\r\n  selectionBackground: '',\r\n  cursorColor: '',\r\n};\r\n\r\nexport const parseValidKeys = (theme: themeType): validThemeType => {\r\n  return validKeys.reduce(\r\n    (acc, key) => ({\r\n      ...acc,\r\n      ...{\r\n        [key]: theme[key],\r\n      },\r\n    }),\r\n    initThemeObj\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport {themeType} from 'types';\r\nimport css from './ColourTest.module.css';\r\nimport {backgroundKeys, textKeys} from 'components/ThemePreview/consoleMethods';\r\n\r\ntype PropsType = {\r\n  theme: themeType;\r\n};\r\n\r\nconst ColourTest: React.FC<PropsType> = (props) => {\r\n  return (\r\n    <section className={css.matrix} data-testid=\"colourtest\">\r\n      {textKeys.map((textKey, i) =>\r\n        backgroundKeys.map((backgroundKey, y) => (\r\n          <div\r\n            key={i + ' ' + y}\r\n            className={css.cell}\r\n            style={{\r\n              background: props.theme ? props.theme[backgroundKey] : '',\r\n              color: props.theme ? props.theme[textKey] : '',\r\n            }}\r\n          >\r\n            gYw\r\n          </div>\r\n        ))\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ColourTest;\r\n","import {textKeyType} from 'types';\r\n\r\nexport type codeblocksType = {\r\n  name: string;\r\n  markup: string;\r\n  defaultColour: textKeyType | 'foreground' | 'background';\r\n  id: string;\r\n};\r\n\r\nconst codeblocks: codeblocksType[] = [\r\n  {\r\n    id: 'cra/compiled',\r\n    name: 'CRA - compiled',\r\n    markup: `<green>Compiled successfully!</green>\r\n\r\nYou can now view <brightWhite>terminal</brightWhite> in the browser. \r\n\r\n  <brightWhite>Local:</brightWhite>           http://localhost:<brightWhite>3000</brightWhite>/themes\r\n  <brightWhite>On Your Network:</brightWhite> http://192.168.86.37:<brightWhite>3000</brightWhite>/themes \r\n  \r\nNote that the development build is not\r\noptimized. \r\nTo create a production build, use <cyan>yarn build</cyan>.`,\r\n    defaultColour: 'foreground',\r\n  },\r\n  {\r\n    id: 'cypress/run',\r\n    name: 'Cypress - run',\r\n    markup: `<foreground>Running:</foreground>  <brightBlack>themes.spec.js                            (1 of 1)</brightBlack>\r\n\r\n<foreground>Windows Terminal Themes - big screen</foreground>\r\n<cyan>- should download all themes using download button</cyan>\r\n<green>√</green> should show dark theme by default <red>(705ms)</red>\r\n    \r\n<green>(</green><brightGreen>Results</brightGreen><green>)</green>\r\n\r\n┌──────────────────────────────────────────────────────────┐\r\n│ Tests:        <green>18</green>                                         │\r\n│ Duration:     <green>10 seconds</green>                                 │\r\n│ Spec Ran:     <green>themes.spec.js</green>                             │\r\n└──────────────────────────────────────────────────────────┘\r\n`,\r\n    defaultColour: 'brightBlack',\r\n  },\r\n  {\r\n    id: 'jest/failed',\r\n    name: 'Jest - failed',\r\n    markup: `<foreground:brightRed> FAIL </foreground:brightRed> src/components/Home/Home.test.js (<white:red>17.523s</white:red>)\r\n  <red>● should return theme name from search params</red>\r\n  \r\n  expect(<red>received</red>).toBe(<green>expected</green>) // Object.is equality\r\n  \r\n    Expected: <green>\"synthwave-everything</green><background:brightGreen>error\"</background:brightGreen>\r\n    Received: <red>\"synthwave-everything\"</red>\r\n    \r\n        218 |\r\n        219 | it(<green>'should return theme name from search params'</green>, () <yellow>=></yellow> {\r\n      > 220 |   expect(returnInitialTheme(<brightGreen>'?theme=synthwave-everything'</brightGreen>)).toBe(\r\n            |                                                             ^\r\n        221 |     <green>'synthwave-everythingerror'</green>\r\n        222 |   );\r\n        223 |   expect(returnInitialTheme(<green>'?wrong=synthwave-everything'</green>)).toBe(<cyan>null</cyan>);\r\n        \r\n        at Object.toBe (<cyan>src/components/Home/Home.test.js</cyan>:220:61)\r\n  \r\n<brightWhite>Test Suites:</brightWhite> <brightRed>1 failed</brightRed>, <brightGreen>1 passed</brightGreen>, 2 total\r\n<brightWhite>Tests:</brightWhite>       <brightRed>1 failed</brightRed>, <brightYellow>4 skipped</brightYellow>, <brightGreen>2 passed</brightGreen>, 7 total\r\n<brightWhite>Snapshots:</brightWhite>   0 total\r\n<brightWhite>Time:</brightWhite>        <brightYellow>22.5s</brightYellow>\r\nRan all test suites.\r\n\r\nWatch Usage: Press w to show more.\r\n    `,\r\n    defaultColour: 'white',\r\n  },\r\n  {\r\n    id: 'jest/runnning',\r\n    name: 'Jest - running',\r\n    markup: `<brightBlack:brightYellow>  RUNS  </brightBlack:brightYellow> src/components/Home/<brightWhite>Home.test.js</brightWhite>\r\n<brightBlack:brightYellow>  RUNS  </brightBlack:brightYellow> src/<brightWhite>App.test.tsx</brightWhite>\r\n    \r\n<brightWhite>Test Suites:</brightWhite> 0 of 2 total\r\n<brightWhite>Tests:</brightWhite>       0 total\r\n<brightWhite>Snapshots:</brightWhite>   0 total\r\n<brightWhite>Time:</brightWhite>        4s\r\n\r\n<background:green>         </background:green><background:foreground>                             </background:foreground>\r\n\r\n    `,\r\n    defaultColour: 'foreground',\r\n  },\r\n];\r\n\r\nexport default codeblocks;\r\n","import React, {useState} from 'react';\r\n\r\nimport css from './ConsoleTest.module.css';\r\nimport {themeType} from 'types';\r\nimport codeblocks, {codeblocksType} from './codeblocks';\r\nimport {parseSyntax} from './methods';\r\n\r\ntype PropsType = {\r\n  theme: themeType;\r\n};\r\n\r\nconst defaultCodeblock: codeblocksType = {\r\n  defaultColour: 'foreground',\r\n  markup: '',\r\n  id: 'default',\r\n  name: 'default',\r\n};\r\n\r\nconst ConsoleTest: React.FC<PropsType> = (props) => {\r\n  const [tab, setTab] = useState(codeblocks[0].id);\r\n  const activeCodeblock =\r\n    codeblocks.find((codeblock) => codeblock.id === tab) ?? defaultCodeblock;\r\n  return (\r\n    <section className={css.container} data-testid=\"consoletest\">\r\n      <div\r\n        className={`${css.terminal}  ${!props.theme.isDark ? css.light : ''}`}\r\n      >\r\n        <div className={css.titlebar}>\r\n          <div className={css.tabs}>\r\n            {codeblocks.map((codeblock) => (\r\n              <div\r\n                key={codeblock.id}\r\n                className={`${css.tab} ${\r\n                  tab === codeblock.id ? css.active : ''\r\n                }`}\r\n              >\r\n                <input\r\n                  className={css.radio}\r\n                  id={codeblock.id}\r\n                  name=\"tab\"\r\n                  type=\"radio\"\r\n                  value={codeblock.id}\r\n                  checked={codeblock.id === activeCodeblock.id}\r\n                  onChange={() => {\r\n                    setTab(codeblock.id);\r\n                  }}\r\n                />\r\n                <label htmlFor={codeblock.id}>\r\n                  <span>{codeblock.name}</span>\r\n                </label>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <code\r\n          data-testid=\"markup\"\r\n          className={css.code}\r\n          style={{\r\n            color: props.theme[(props.theme, activeCodeblock.defaultColour)],\r\n          }}\r\n        >\r\n          {parseSyntax(props.theme, activeCodeblock.markup)}\r\n        </code>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ConsoleTest;\r\n","import React from 'react';\r\n\r\nimport {validKeys} from 'components/ThemePreview/consoleMethods';\r\nimport {themeType, textKeyType} from 'types';\r\n\r\nexport const parseSyntax = (theme: themeType, markup: string) => {\r\n  const throwErrors =\r\n    process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'test';\r\n  return markup.split(/(<[^/>]+?>[^<]+<[^>]+?>)/g).map((string, i) => {\r\n    const matches = [...string.matchAll(/<(.+?)>(.+)<\\/(.+)>/g)][0];\r\n    if (matches != null) {\r\n      if (throwErrors && matches[1] !== matches[3]) {\r\n        throw new Error(\r\n          `Opening tag <${matches[1]}> does not match closing tag </${matches[3]}>`\r\n        );\r\n      }\r\n      const colours = matches[1].split(':');\r\n      const foreground = colours[0] as textKeyType;\r\n      const background =\r\n        colours.length > 0 ? (colours[1] as textKeyType) : null;\r\n      if (\r\n        throwErrors &&\r\n        (!validKeys.includes(foreground) ||\r\n          (background && !validKeys.includes(background)))\r\n      ) {\r\n        throw new Error(\r\n          `Using invalid tags: <${matches[1]}>${matches[2]}</${matches[3]}>`\r\n        );\r\n      }\r\n      const contents = matches[2];\r\n      return (\r\n        <span\r\n          key={i}\r\n          style={{\r\n            color: theme[foreground],\r\n            background: background ? theme[background] : undefined,\r\n          }}\r\n        >\r\n          {contents}\r\n        </span>\r\n      );\r\n    }\r\n    if (throwErrors && string.match(/<(.+?)>(.+)<(.+)>/g)) {\r\n      throw new Error(\r\n        `Found invalid tags: ${string}. \\n Are they formatted correctly?`\r\n      );\r\n    }\r\n\r\n    return string;\r\n  }, []);\r\n};\r\n","import React from 'react';\r\nimport css from './Toast.module.css';\r\n\r\ntype ToastType = {\r\n  title: string;\r\n  isActive: boolean;\r\n  message: string;\r\n  color: string;\r\n  background: string;\r\n};\r\n\r\nconst Toast = (props: ToastType) => (\r\n  <section className={`${css.container} ${props.isActive ? css.active : ''}`}>\r\n    <div className={css.title}>{props.message}</div>\r\n  </section>\r\n);\r\n\r\nexport default Toast;\r\n","import React from 'react';\r\n\r\ntype IconProps = {\r\n  colour?: string;\r\n  backgroundColour?: string;\r\n  size?: string;\r\n  onClick?: () => void;\r\n  className?: string;\r\n  direction?: 'up' | 'down' | 'left' | 'right';\r\n};\r\n\r\nexport const Share = (props: IconProps) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    height={props.size || '18px'}\r\n    width={props.size || '18px'}\r\n    viewBox=\"0 0 24 24\"\r\n    aria-labelledby=\"title\"\r\n    onClick={props.onClick}\r\n    className={props.className}\r\n    style={{\r\n      stroke: props.colour,\r\n      backgroundColor: props.backgroundColour,\r\n      transform: 'scaleX(-1)',\r\n    }}\r\n  >\r\n    <title id=\"share\">Share theme</title>\r\n    <path\r\n      d=\"M10 9V5l-7 7 7 7v-4.1c5 0 8.5 1.6 11 5.1-1-5-4-10-11-11z\"\r\n      fill={props.colour}\r\n    />\r\n  </svg>\r\n);\r\n\r\nexport const Copy = (props: IconProps) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    height={props.size || '18px'}\r\n    width={props.size || '18px'}\r\n    viewBox=\"0 0 24 24\"\r\n    aria-labelledby=\"title\"\r\n    onClick={props.onClick}\r\n    className={props.className}\r\n    style={{\r\n      stroke: props.colour,\r\n      backgroundColor: props.backgroundColour,\r\n    }}\r\n  >\r\n    <title id=\"copy\">Copy theme</title>\r\n    <path\r\n      fill={props.colour}\r\n      d=\"M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm-1 4l6 6v10c0 1.1-.9 2-2 2H7.99C6.89 23 6 22.1 6 21l.01-14c0-1.1.89-2 1.99-2h7zm-1 7h5.5L14 6.5V12z\"\r\n    />\r\n  </svg>\r\n);\r\n\r\nexport const Download = (props: IconProps) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    height={props.size || '24px'}\r\n    width={props.size || '24px'}\r\n    viewBox=\"0 0 24 24\"\r\n    aria-labelledby=\"title\"\r\n    onClick={props.onClick}\r\n    className={props.className}\r\n    style={{\r\n      stroke: props.colour,\r\n    }}\r\n  >\r\n    <title id=\"download\">Download all the themes</title>\r\n    <path d=\"M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z\" fill={props.colour} />\r\n  </svg>\r\n);\r\n\r\nexport const Light = (props: IconProps) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    height={props.size || '24px'}\r\n    width={props.size || '24px'}\r\n    viewBox=\"0 0 24 24\"\r\n    aria-labelledby=\"title\"\r\n    onClick={props.onClick}\r\n    className={props.className}\r\n    style={{\r\n      stroke: props.colour,\r\n      outlineColor: props.colour,\r\n    }}\r\n  >\r\n    <title id=\"light-themes\">Select light themes</title>\r\n    <path\r\n      d=\"M20 15.31L23.31 12 20 8.69V4h-4.69L12 .69 8.69 4H4v4.69L.69 12 4 15.31V20h4.69L12 23.31 15.31 20H20v-4.69zM12 18c-3.31 0-6-2.69-6-6s2.69-6 6-6 6 2.69 6 6-2.69 6-6 6z\"\r\n      fill={props.colour}\r\n    />\r\n  </svg>\r\n);\r\n\r\nexport const Dark = (props: IconProps) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    height={props.size || '24px'}\r\n    width={props.size || '24px'}\r\n    viewBox=\"0 0 24 24\"\r\n    aria-labelledby=\"title\"\r\n    onClick={props.onClick}\r\n    className={props.className}\r\n    style={{\r\n      stroke: props.colour,\r\n      outlineColor: props.colour,\r\n    }}\r\n  >\r\n    <title id=\"dark-themes\">Select dark themes</title>\r\n    <path\r\n      d=\"M10 2c-1.82 0-3.53.5-5 1.35C7.99 5.08 10 8.3 10 12s-2.01 6.92-5 8.65C6.47 21.5 8.18 22 10 22c5.52 0 10-4.48 10-10S15.52 2 10 2z\"\r\n      fill={props.colour}\r\n    />\r\n  </svg>\r\n);\r\n\r\nexport const Colours = (props: IconProps) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    height={props.size || '24px'}\r\n    width={props.size || '24px'}\r\n    viewBox=\"0 0 24 24\"\r\n    aria-labelledby=\"title\"\r\n    onClick={props.onClick}\r\n    className={props.className}\r\n    style={{\r\n      stroke: props.colour,\r\n      outlineColor: props.colour,\r\n    }}\r\n  >\r\n    <title id=\"colours-preview\">Select colours test preview</title>\r\n    <path\r\n      d=\"M12 3c-4.97 0-9 4.03-9 9s4.03 9 9 9c.83 0 1.5-.67 1.5-1.5 0-.39-.15-.74-.39-1.01-.23-.26-.38-.61-.38-.99 0-.83.67-1.5 1.5-1.5H16c2.76 0 5-2.24 5-5 0-4.42-4.03-8-9-8zm-5.5 9c-.83 0-1.5-.67-1.5-1.5S5.67 9 6.5 9 8 9.67 8 10.5 7.33 12 6.5 12zm3-4C8.67 8 8 7.33 8 6.5S8.67 5 9.5 5s1.5.67 1.5 1.5S10.33 8 9.5 8zm5 0c-.83 0-1.5-.67-1.5-1.5S13.67 5 14.5 5s1.5.67 1.5 1.5S15.33 8 14.5 8zm3 4c-.83 0-1.5-.67-1.5-1.5S16.67 9 17.5 9s1.5.67 1.5 1.5-.67 1.5-1.5 1.5z\"\r\n      fill={props.colour}\r\n    />\r\n  </svg>\r\n);\r\n\r\nexport const Console = (props: IconProps) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    height={props.size || '24px'}\r\n    width={props.size || '24px'}\r\n    viewBox=\"0 0 24 24\"\r\n    aria-labelledby=\"title\"\r\n    onClick={props.onClick}\r\n    className={props.className}\r\n    style={{\r\n      stroke: props.colour,\r\n      outlineColor: props.colour,\r\n    }}\r\n  >\r\n    <title id=\"codeblock-preview\">Select codeblock preview</title>\r\n    <path\r\n      d=\"M9.4 16.6L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4zm5.2 0l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4z\"\r\n      fill={props.colour}\r\n    />\r\n  </svg>\r\n);\r\n\r\nexport const Github = (props: IconProps) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    height={props.size || '24px'}\r\n    width={props.size || '24px'}\r\n    viewBox=\"0 0 16 16\"\r\n    aria-labelledby=\"title\"\r\n    onClick={props.onClick}\r\n    className={props.className}\r\n    style={{\r\n      outlineColor: props.colour,\r\n    }}\r\n  >\r\n    <title id=\"github-icon\">Github repo link</title>\r\n    <path\r\n      d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z\"\r\n      fill={props.colour}\r\n    />\r\n  </svg>\r\n);\r\n\r\nexport const Help = (props: IconProps) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    height={props.size || '24px'}\r\n    width={props.size || '24px'}\r\n    viewBox=\"0 0 24 24\"\r\n    aria-labelledby=\"title\"\r\n    onClick={props.onClick}\r\n    className={props.className}\r\n    style={{\r\n      outlineColor: props.colour,\r\n    }}\r\n  >\r\n    <title id=\"help-icon\">Show the help section</title>\r\n    <path\r\n      d=\"M11 18h2v-2h-2v2zm1-16C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm0-14c-2.21 0-4 1.79-4 4h2c0-1.1.9-2 2-2s2 .9 2 2c0 2-3 1.75-3 5h2c0-2.25 3-2.5 3-5 0-2.21-1.79-4-4-4z\"\r\n      fill={props.colour}\r\n    />\r\n  </svg>\r\n);\r\n\r\nexport const Arrow = (props: IconProps) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    height={props.size || '24px'}\r\n    width={props.size || '24px'}\r\n    viewBox=\"0 0 24 24\"\r\n    aria-labelledby=\"title\"\r\n    onClick={props.onClick}\r\n    className={props.className}\r\n    style={{\r\n      outlineColor: props.colour,\r\n      transform: props.direction === 'right' ? 'scaleX(-1)' : '',\r\n    }}\r\n  >\r\n    <title id=\"arrow\">{'Show previous theme'}</title>\r\n    <path d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n    <path\r\n      d=\"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z\"\r\n      fill={props.colour}\r\n    />\r\n  </svg>\r\n);\r\n\r\nconst iterateColours = (arr: string[], index: number) => {\r\n  if (index === 0) {\r\n    return [...arr, arr[0]].join(';');\r\n  }\r\n  return [...arr.slice(index), ...arr.slice(0, index - 1), arr[index]].join(\r\n    ';'\r\n  );\r\n};\r\n\r\ntype LogoType = {\r\n  colours: string[];\r\n};\r\n\r\nexport const Logo = (props: IconProps & LogoType) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    height={props.size || '24px'}\r\n    width={props.size || '24px'}\r\n    viewBox=\"0 0 512 512\"\r\n    aria-labelledby=\"title\"\r\n    onClick={props.onClick}\r\n    className={props.className}\r\n    style={{\r\n      outlineColor: props.colour,\r\n    }}\r\n  >\r\n    <defs>\r\n      <linearGradient id=\"logo-gradient\" x2=\"0.35\" y2=\"1\">\r\n        {props.colours.map((colour: string, i, originalArr) => (\r\n          <stop\r\n            key={i}\r\n            offset={`${Math.floor((i / (originalArr.length - 1)) * 100)}%`}\r\n            stopColor={colour}\r\n          >\r\n            <animate\r\n              attributeName=\"stop-color\"\r\n              values={iterateColours(originalArr, i)}\r\n              dur=\"4s\"\r\n              repeatCount=\"indefinite\"\r\n            ></animate>\r\n          </stop>\r\n        ))}\r\n      </linearGradient>\r\n    </defs>\r\n    <path\r\n      fill=\"url(#logo-gradient)\"\r\n      d=\"M495.304 61.217H16.696C7.475 61.217 0 68.693 0 77.913v356.174c0 9.22 7.475 16.696 16.696 16.696h478.609c9.22 0 16.696-7.475 16.696-16.696V77.913c-.001-9.22-7.476-16.696-16.697-16.696zm-16.695 356.174H33.391V194.424h445.217v222.967zm0-256.358H33.391V94.609h445.217v66.424z\"\r\n    />\r\n    <path\r\n      fill=\"url(#logo-gradient)\"\r\n      d=\"M443.568 103.247c-12.275 0-22.261 9.986-22.261 22.261 0 12.275 9.985 22.261 22.261 22.261 12.275 0 22.261-9.986 22.261-22.261 0-12.275-9.986-22.261-22.261-22.261zM382.926 103.247c-12.275 0-22.261 9.986-22.261 22.261 0 12.275 9.986 22.261 22.261 22.261s22.261-9.986 22.261-22.261c0-12.275-9.986-22.261-22.261-22.261zM322.285 103.247c-12.275 0-22.261 9.986-22.261 22.261 0 12.275 9.985 22.261 22.261 22.261 12.275 0 22.261-9.986 22.261-22.261 0-12.275-9.986-22.261-22.261-22.261zM235.45 293.193l-54.653-46.504c-7.022-5.976-17.559-5.128-23.535 1.896-5.976 7.022-5.127 17.559 1.896 23.535l39.709 33.789-39.709 33.789c-7.023 5.976-7.871 16.512-1.896 23.535 5.975 7.022 16.512 7.871 23.535 1.896l54.653-46.504c7.83-6.663 7.83-18.771 0-25.432zM342.022 335.716h-65.954c-9.22 0-16.696 7.475-16.696 16.696s7.475 16.696 16.696 16.696h65.954c9.22 0 16.696-7.475 16.696-16.696s-7.476-16.696-16.696-16.696z\"\r\n    />\r\n  </svg>\r\n);\r\n\r\nexport const Chevron = (props: IconProps) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    height={props.size || '24px'}\r\n    width={props.size || '24px'}\r\n    viewBox=\"0 0 24 24\"\r\n    onClick={props.onClick}\r\n    className={props.className}\r\n    style={{\r\n      outlineColor: props.colour,\r\n      transform: props.direction === 'up' ? 'scaleY(1)' : '',\r\n    }}\r\n  >\r\n    <path\r\n      d=\"M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z\"\r\n      fill={props.colour}\r\n    />\r\n  </svg>\r\n);\r\n","import React from 'react';\r\n\r\nimport css from './ThemePreview.module.css';\r\nimport {Share, Copy} from 'Icons';\r\n\r\ntype ThemePreviewButtonType = {\r\n  onClick: () => void;\r\n  type?: string;\r\n  testid: string;\r\n};\r\n\r\nconst ThemePreviewButton: React.FC<ThemePreviewButtonType> = (props) => {\r\n  return (\r\n    <button\r\n      data-testid={props.testid}\r\n      className={`${css.button} ${props.type === 'primary' ? css.primary : ''}`}\r\n      onClick={() => {\r\n        props.onClick();\r\n      }}\r\n    >\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\n\r\ntype ThemePreviewButtonsType = {\r\n  handleCopy: () => void;\r\n  handleShare: () => void;\r\n  themename: string;\r\n};\r\n\r\nconst ThemePreviewButtons = (props: ThemePreviewButtonsType) => (\r\n  <div className={css.buttons}>\r\n    <ThemePreviewButton\r\n      testid=\"copyButton\"\r\n      type=\"primary\"\r\n      onClick={props.handleCopy}\r\n    >\r\n      <Copy className={css.icon} colour=\"#ededed\" />\r\n      Get theme\r\n    </ThemePreviewButton>\r\n    <ThemePreviewButton testid=\"shareButton\" onClick={props.handleShare}>\r\n      <Share\r\n        className={css.icon}\r\n        colour={getComputedStyle(document.documentElement).getPropertyValue(\r\n          '--btn__colour'\r\n        )}\r\n      />\r\n      Share theme\r\n    </ThemePreviewButton>\r\n  </div>\r\n);\r\n\r\nexport default ThemePreviewButtons;\r\n","import React, {useReducer} from 'react';\r\nimport * as clipboard from 'clipboard-polyfill';\r\nimport immer from 'immer';\r\n\r\nimport ColourTest from 'components/ColourTest/ColourTest';\r\nimport ConsoleTest from 'components/ConsoleTest/ConsoleTest';\r\nimport {themeType, previewType} from 'types';\r\nimport css from './ThemePreview.module.css';\r\nimport {parseValidKeys} from './consoleMethods';\r\nimport Toast from 'components/Toast/Toast';\r\nimport ThemePreviewButtons from './ThemePreviewButtons';\r\n\r\ntype PropsType = {\r\n  theme?: themeType;\r\n  primaryColour: string;\r\n  backgroundColour: string;\r\n  previewType: previewType;\r\n  isSmallScreenSize: boolean;\r\n  ThemeSelectContainer: () => JSX.Element;\r\n  Toggles: () => JSX.Element;\r\n};\r\n\r\ntype reducerType = {\r\n  title: string;\r\n  isActive: boolean;\r\n  message: string;\r\n};\r\n\r\ntype actionType =\r\n  | {\r\n      type: 'show';\r\n      title: string;\r\n      message: string;\r\n    }\r\n  | {\r\n      type: 'hide';\r\n    };\r\n\r\nconst toastmessages = {\r\n  share: (themename: string) => `${themename} link added your clipboard`,\r\n  copy: (themename: string) => `${themename} theme added to your clipboard`,\r\n};\r\n\r\nconst initialState = {\r\n  isActive: false,\r\n  title: 'Title',\r\n  message: 'A message to be written here for me',\r\n};\r\n\r\nconst reducer = (state: reducerType, action: actionType) => {\r\n  return immer(state, (draftState: reducerType) => {\r\n    switch (action.type) {\r\n      case 'show':\r\n        draftState.title = action.title;\r\n        draftState.message = action.message;\r\n        draftState.isActive = true;\r\n        break;\r\n      case 'hide':\r\n        draftState.isActive = false;\r\n    }\r\n  });\r\n};\r\n\r\nconst ThemePreview: React.FC<PropsType> = (props) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  const {ThemeSelectContainer, Toggles} = props;\r\n  if (!props.theme) {\r\n    return (\r\n      <div\r\n        style={{background: props.backgroundColour, color: props.primaryColour}}\r\n        className={css.loading}\r\n      ></div>\r\n    );\r\n  }\r\n  const handleCopy = () => {\r\n    if (!state.isActive && props.theme) {\r\n      dispatch({\r\n        type: 'show',\r\n        title: 'Copied!',\r\n        message: toastmessages.copy(props.theme.name),\r\n      });\r\n      clipboard.writeText(JSON.stringify(parseValidKeys(props.theme), null, 2));\r\n      setTimeout(() => {\r\n        dispatch({type: 'hide'});\r\n      }, 1000);\r\n    }\r\n  };\r\n  const handleShare = () => {\r\n    if (!state.isActive && props.theme) {\r\n      dispatch({\r\n        type: 'show',\r\n        title: 'Shared!',\r\n        message: toastmessages.share(props.theme.name),\r\n      });\r\n      clipboard.writeText(\r\n        `${window.location.origin}${\r\n          window.location.pathname\r\n        }?theme=${encodeURIComponent(props.theme.name)}`\r\n      );\r\n      setTimeout(() => {\r\n        dispatch({type: 'hide'});\r\n      }, 1000);\r\n    }\r\n  };\r\n  return (\r\n    <section className={css.container}>\r\n      {props.isSmallScreenSize && (\r\n        <div className={css.toggles}>\r\n          <Toggles />\r\n        </div>\r\n      )}\r\n      {props.previewType === 'colour' ? (\r\n        <ColourTest theme={props.theme} />\r\n      ) : (\r\n        <ConsoleTest theme={props.theme} />\r\n      )}\r\n      {props.isSmallScreenSize && (\r\n        <div className={css.select}>\r\n          <ThemeSelectContainer />\r\n        </div>\r\n      )}\r\n      <ThemePreviewButtons\r\n        themename={props.theme.name}\r\n        handleCopy={handleCopy}\r\n        handleShare={handleShare}\r\n      />\r\n      <Toast\r\n        color={props.primaryColour}\r\n        background={props.backgroundColour}\r\n        title={state.title}\r\n        isActive={state.isActive}\r\n        message={state.message}\r\n      />\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ThemePreview;\r\n","import React from 'react';\r\n\r\nimport {Chevron} from 'Icons';\r\n\r\nimport {actionTypes} from 'types';\r\nimport css from './More.module.css';\r\n\r\ntype MoreType = {\r\n  isMoreOpen: boolean;\r\n  dispatch: React.Dispatch<actionTypes>;\r\n};\r\n\r\n// https://www.w3.org/TR/wai-aria-practices/examples/menu-button/menu-button-links.html\r\nconst Info = (props: MoreType) => {\r\n  return (\r\n    <section>\r\n      <button\r\n        onClick={() => {\r\n          props.dispatch({type: 'MORE'});\r\n        }}\r\n        className={css.trigger}\r\n        aria-controls=\"more\"\r\n        aria-haspopup=\"true\"\r\n        aria-expanded={props.isMoreOpen}\r\n      >\r\n        Info{' '}\r\n        <Chevron\r\n          colour={document.documentElement.style.getPropertyValue(\r\n            '--toolbar__color'\r\n          )}\r\n        />\r\n      </button>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Info;\r\n","// modules\r\nimport React from 'react';\r\n\r\n// components\r\nimport More from 'components/More/More';\r\n\r\n// utils\r\nimport {Logo} from 'Icons';\r\nimport css from './Toolbar.module.css';\r\nimport {actionTypes, themeShadeType, previewType} from 'types';\r\n\r\ntype PropType = {\r\n  themeShade: themeShadeType;\r\n  previewType: previewType;\r\n  dispatch: React.Dispatch<actionTypes>;\r\n  themeNames: string[];\r\n  activeTheme: string;\r\n  themeselectRef: React.MutableRefObject<null | HTMLSelectElement>;\r\n  colours: string[];\r\n  isMoreOpen: boolean;\r\n  isSmallScreenSize: boolean;\r\n  ThemeSelectContainer: () => JSX.Element;\r\n  Toggles: () => JSX.Element;\r\n};\r\n\r\nconst Toolbar = (props: PropType) => {\r\n  const {ThemeSelectContainer, Toggles} = props;\r\n  return (\r\n    <section className={css.container}>\r\n      <a href=\"/themes\" className={css.title}>\r\n        <Logo size=\"48px\" colours={props.colours} />\r\n        <h1>Windows Terminal Themes</h1>\r\n      </a>\r\n      {!props.isSmallScreenSize && (\r\n        <div className={css.select}>\r\n          <ThemeSelectContainer />\r\n        </div>\r\n      )}\r\n      {!props.isSmallScreenSize && (\r\n        <div className={css.toggles}>\r\n          <Toggles />\r\n        </div>\r\n      )}\r\n      <div className={css.more}>\r\n        <More isMoreOpen={props.isMoreOpen} dispatch={props.dispatch} />\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Toolbar;\r\n","import React from 'react';\r\n\r\nimport css from './More.module.css';\r\nimport {actionTypes} from 'types';\r\n\r\ntype MoreSectionProps = {\r\n  heading: string;\r\n};\r\n\r\nconst MoreSection: React.FC<MoreSectionProps> = (props) => {\r\n  return (\r\n    <div className={css.section}>\r\n      <div className={css.heading}>{props.heading}</div>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\ntype MoreContentProps = {\r\n  isMoreOpen: boolean;\r\n  downloadAllThemes: () => void;\r\n  dispatch: React.Dispatch<actionTypes>;\r\n};\r\n\r\nconst MoreContent = (props: MoreContentProps) => (\r\n  <>\r\n    <div\r\n      data-testid=\"overlay\"\r\n      onClick={() => {\r\n        if (props.isMoreOpen) {\r\n          props.dispatch({type: 'MORE'});\r\n        }\r\n      }}\r\n      className={`${css.overlay} ${props.isMoreOpen ? css.active : ''}`}\r\n    ></div>\r\n    <section\r\n      data-testid=\"morecontent\"\r\n      className={css.content}\r\n      style={{display: props.isMoreOpen ? 'block' : 'none'}}\r\n      id=\"more\"\r\n      aria-hidden={!props.isMoreOpen}\r\n    >\r\n      <MoreSection heading=\"Download all themes\">\r\n        <p>\r\n          Get all the themes as one big json file, warning: not as useful as it\r\n          sounds{' '}\r\n          <span role=\"img\" aria-label=\"person shrugging\">\r\n            🤷‍♀️\r\n          </span>\r\n        </p>\r\n        <button onClick={props.downloadAllThemes}>\r\n          Download .json of themes\r\n        </button>\r\n      </MoreSection>\r\n      <MoreSection heading=\"How to use\">\r\n        <p>\r\n          For how to use the themes see the{' '}\r\n          <a href=\"https://github.com/atomcorp/themes#how-to-use-the-themes\">\r\n            help section on GitHub\r\n          </a>\r\n        </p>\r\n      </MoreSection>\r\n      <MoreSection heading=\"Credit\">\r\n        <p>\r\n          Most themes come from{' '}\r\n          <a href=\"https://github.com/mbadolato/iTerm2-Color-Schemes\">\r\n            iTerm2 Color Schemes\r\n          </a>\r\n          , so huge thanks to them!\r\n        </p>\r\n        <p>\r\n          Also big thanks to those that have contributed themes directly,{' '}\r\n          <a href=\"https://github.com/atomcorp/themes#credits\">\r\n            credits on GitHub\r\n          </a>\r\n        </p>\r\n      </MoreSection>\r\n      <MoreSection heading=\"GitHub\">\r\n        <p>\r\n          Check out the{' '}\r\n          <a href=\"https://github.com/atomcorp/themes\">\r\n            Windows Terminal Themes\r\n          </a>{' '}\r\n          repository on GitHub\r\n        </p>\r\n      </MoreSection>\r\n      <MoreSection heading=\"Tips\">\r\n        <p>\r\n          You can use keyboard shorcuts, A for previous theme, D for next theme.\r\n        </p>\r\n        <p>\r\n          The site should be fully accessible too,{' '}\r\n          <a href=\"https://github.com/atomcorp/themes/issues\">\r\n            please open an issue if you notice a problem\r\n          </a>\r\n        </p>\r\n      </MoreSection>\r\n    </section>\r\n  </>\r\n);\r\n\r\nexport default MoreContent;\r\n","/**\r\n * I made the direction buttons here <div> not <buttons>\r\n * as they just duplicate the functionality of the <select>\r\n * It seems better to remove the extra focusable elements,\r\n * so people needing a11y jump straight to the <select>\r\n */\r\nimport React from 'react';\r\n\r\nimport {actionTypes} from 'types';\r\nimport css from './ThemeSelect.module.css';\r\nimport {Arrow} from 'Icons';\r\n\r\ntype PropsType = {\r\n  themeNames: string[];\r\n  activeTheme: string;\r\n  dispatch: React.Dispatch<actionTypes>;\r\n  primaryColour?: string;\r\n  themeselectRef: React.MutableRefObject<null | HTMLSelectElement>;\r\n};\r\n\r\nconst ThemeSelect: React.FC<PropsType> = (props) => {\r\n  return (\r\n    <div className={css.container}>\r\n      <div\r\n        className={css.direction}\r\n        onClick={() => {\r\n          props.dispatch({type: 'PREV'});\r\n        }}\r\n      >\r\n        <Arrow\r\n          className={css.arrow}\r\n          colour={getComputedStyle(document.documentElement).getPropertyValue(\r\n            '--btn__colour'\r\n          )}\r\n          size=\"18px\"\r\n        />\r\n        Prev\r\n      </div>\r\n      <label className={css.label} htmlFor=\"theme-select\">\r\n        <span className=\"visually-hidden \">Select theme</span>\r\n        <select\r\n          data-testid=\"theme-list\"\r\n          ref={props.themeselectRef}\r\n          id=\"theme-select\"\r\n          className={css.select}\r\n          value={props.activeTheme}\r\n          onChange={(e) => {\r\n            e.preventDefault();\r\n            if (e.target) {\r\n              props.dispatch({type: 'SET', theme: e.target.value});\r\n            }\r\n          }}\r\n        >\r\n          {props.themeNames.map((themeName) => (\r\n            <option\r\n              data-testid=\"theme-option\"\r\n              value={themeName}\r\n              key={themeName}\r\n            >\r\n              {themeName}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </label>\r\n      <div\r\n        className={css.direction}\r\n        onClick={() => {\r\n          props.dispatch({type: 'NEXT'});\r\n        }}\r\n      >\r\n        Next\r\n        <Arrow\r\n          className={css.arrow}\r\n          direction=\"right\"\r\n          size=\"18px\"\r\n          colour={getComputedStyle(document.documentElement).getPropertyValue(\r\n            '--btn__colour'\r\n          )}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ThemeSelect;\r\n","import React, {ReactElement} from 'react';\r\n\r\nimport {actionTypes} from 'types';\r\nimport css from './Toggle.module.css';\r\n\r\ntype PropsState = {\r\n  values: {\r\n    value: string;\r\n    label: string;\r\n    icon: (isChecked: boolean) => ReactElement;\r\n  }[];\r\n  currentValue: string;\r\n  type: string;\r\n  dispatch: React.Dispatch<actionTypes>;\r\n};\r\n\r\nconst Toggle: React.FC<PropsState> = (props) => (\r\n  <section className={css.container}>\r\n    {props.values.map((option) => {\r\n      const isSelected = option.value === props.currentValue;\r\n      return (\r\n        <label\r\n          key={option.value}\r\n          className={`${css.label} ${isSelected ? css.active : ''}`}\r\n          htmlFor={option.value}\r\n        >\r\n          <input\r\n            name={props.type}\r\n            type=\"radio\"\r\n            id={option.value}\r\n            value={option.value}\r\n            checked={isSelected}\r\n            onChange={() => {\r\n              props.dispatch({\r\n                type: props.type,\r\n                payload: option.value,\r\n              });\r\n            }}\r\n            className={css.radio}\r\n          />\r\n          <div className={css.outline}>\r\n            {option.icon(isSelected)}\r\n            {option.label}\r\n          </div>\r\n        </label>\r\n      );\r\n    })}\r\n  </section>\r\n);\r\n\r\nexport default Toggle;\r\n","import {shadeType} from 'types';\r\n\r\nconst root = document.documentElement;\r\n\r\ntype cssvarType = {\r\n  '--btn__bg-img': string;\r\n  '--btn__bg-border': string;\r\n  '--btn__colour': string;\r\n  '--btn__bg-img--hover': string;\r\n  '--btn__bg-color': string;\r\n  '--btn__border-colour__active': string;\r\n  '--btn__insert': string;\r\n  '--toolbar__color': string;\r\n  '--toolbar__background': string;\r\n  '--btn-primary__bg-img': string;\r\n  '--btn-primary__bg-img---hover': string;\r\n  '--btn-primary__colour': string;\r\n  '--link-colour': string;\r\n  '--link-colour--visited': string;\r\n  '--overlay-background': string;\r\n};\r\n\r\nconst cssvarDark: cssvarType = {\r\n  '--btn__bg-img': 'linear-gradient(-180deg, #535659 0%, #424549 90%)',\r\n  '--btn__bg-border': '1px solid rgba(200, 200, 200, 0.15)',\r\n  '--btn__colour': '#d6d8da',\r\n  '--btn__bg-img--hover': 'linear-gradient(-180deg, #535659, #535659 90%)',\r\n  '--btn__bg-color': '#404040',\r\n  '--btn__border-colour__active': 'rgba(200, 200, 200, 0.3)',\r\n  '--btn__insert': 'inset 0 0.15em 0.3em rgba(20, 22, 23, 0.15)',\r\n  '--btn-primary__bg-img': 'linear-gradient(-180deg,#2fcb53,#269f42 90%)',\r\n  '--btn-primary__colour': '#d6d8da',\r\n  '--btn-primary__bg-img---hover': 'linear-gradient(180deg, #484 5%, #171 90%)',\r\n  '--toolbar__color': '#ededed',\r\n  '--toolbar__background': '#202020',\r\n  '--link-colour': '#5bb3f4',\r\n  '--link-colour--visited': '#a292ef',\r\n  '--overlay-background': 'rgba(7, 7, 7, 0.54)',\r\n};\r\n\r\nconst cssvarLight: cssvarType = {\r\n  '--btn__bg-img': 'linear-gradient(-180deg, #fafbfc, #eff3f6 90%)',\r\n  '--btn__bg-border': '1px solid rgba(27, 31, 35, .35)',\r\n  '--btn__colour': '#24292e',\r\n  '--btn__bg-img--hover': 'linear-gradient(-180deg, #f0f3f6, #e6ebf1 90%)',\r\n  '--btn__bg-color': '#e9ecef',\r\n  '--btn__border-colour__active': 'rgba(27, 31, 35, .3)',\r\n  '--btn__insert': 'inset 0 .15em .3em rgba(27, 31, 35, .15)',\r\n  '--btn-primary__bg-img': 'linear-gradient(-180deg,#2fcb53,#269f42 90%)',\r\n  '--btn-primary__bg-img---hover': 'linear-gradient(180deg, #373 0%, #060 90%)',\r\n  '--btn-primary__colour': '#d6d8da',\r\n  '--toolbar__color': '#282c34',\r\n  '--toolbar__background': '#e1e4e8',\r\n  '--link-colour': '#224fd4',\r\n  '--link-colour--visited': '#9e04bf',\r\n  '--overlay-background': 'rgba(230, 230, 230, 0.48)',\r\n};\r\n\r\nconst setcolours = (type: shadeType) => {\r\n  Object.entries(type === 'LIGHT' ? cssvarLight : cssvarDark).forEach(\r\n    ([key, val]) => {\r\n      root.style.setProperty(key, val);\r\n    }\r\n  );\r\n};\r\n\r\nexport default setcolours;\r\n","import contrast from 'get-contrast';\r\nimport ResizeObserver from 'resize-observer-polyfill';\r\nimport immer from 'immer';\r\n\r\nimport setcolours from 'utils/setcolours';\r\n\r\nimport {\r\n  themeType,\r\n  shadeType,\r\n  themeShadeObjectType,\r\n  actionTypes,\r\n  previewType,\r\n} from 'types';\r\n\r\ntype titleColoursType =\r\n  | 'black'\r\n  | 'red'\r\n  | 'green'\r\n  | 'yellow'\r\n  | 'blue'\r\n  | 'purple'\r\n  | 'cyan'\r\n  | 'white';\r\n\r\nconst titleColours: titleColoursType[] = [\r\n  'black',\r\n  'red',\r\n  'green',\r\n  'yellow',\r\n  'blue',\r\n  'purple',\r\n  'cyan',\r\n  'white',\r\n];\r\n\r\nexport const getRandomColour = (theme: themeType | undefined): string => {\r\n  if (theme == null) {\r\n    return '';\r\n  }\r\n  const randomisedColours = titleColours.sort(() => Math.random() - 0.5);\r\n  const accessibleColour = randomisedColours.find(\r\n    (titleColour: titleColoursType) =>\r\n      contrast.ratio(theme[titleColour], theme.background) > 4.5\r\n  );\r\n  if (accessibleColour != null) {\r\n    return theme[accessibleColour];\r\n  }\r\n  return theme[titleColours[0]];\r\n};\r\n\r\nexport const returnInitialTheme = (search: string): string | null => {\r\n  if (search.length > 0) {\r\n    const params = new URLSearchParams(search);\r\n    const themeName = params.get('theme');\r\n    if (themeName != null) {\r\n      return themeName;\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\nexport const screenSizeObserver = (\r\n  dispatch: React.Dispatch<actionTypes>\r\n): ResizeObserver => {\r\n  return new ResizeObserver((entries: ResizeObserverEntry[]) => {\r\n    const {width} = entries[0].contentRect;\r\n    if (width >= 1024) {\r\n      dispatch({type: 'SIZE', isSmallScreenSize: false});\r\n    } else if (width < 1024) {\r\n      dispatch({type: 'SIZE', isSmallScreenSize: true});\r\n    }\r\n  });\r\n};\r\n\r\nexport const THEME_COLOUR: themeShadeObjectType = {\r\n  LIGHT: 'LIGHT',\r\n  DARK: 'DARK',\r\n  ANY: 'ANY',\r\n};\r\n\r\nexport type stateType = {\r\n  themes: themeType[];\r\n  filteredThemes: themeType[];\r\n  activeTheme: string;\r\n  isSmallScreenSize: boolean;\r\n  themeShade: shadeType;\r\n  primaryColour: string;\r\n  backgroundColour: string;\r\n  previewType: previewType;\r\n  isMoreOpen: boolean;\r\n};\r\n\r\nexport const initialState: stateType = {\r\n  themes: [],\r\n  filteredThemes: [],\r\n  activeTheme: '',\r\n  isSmallScreenSize: window.innerWidth < 768,\r\n  themeShade: THEME_COLOUR.DARK,\r\n  primaryColour: '#fded02',\r\n  backgroundColour: '#090300',\r\n  previewType: 'console',\r\n  isMoreOpen: false,\r\n};\r\n\r\nexport const homeReducer = (\r\n  state: stateType,\r\n  action: actionTypes\r\n): stateType => {\r\n  return immer(state, (draftState: stateType) => {\r\n    switch (action.type) {\r\n      case 'LOAD':\r\n        draftState.themes = action.themes;\r\n        if (action.initialTheme != null) {\r\n          const foundTheme = action.themes.find(\r\n            (theme: themeType) => theme.name === action.initialTheme\r\n          );\r\n          if (foundTheme != null) {\r\n            console.log(foundTheme);\r\n            draftState.filteredThemes = action.themes.filter(\r\n              (theme: themeType) => theme.isDark === foundTheme.isDark\r\n            );\r\n            draftState.activeTheme = foundTheme.name;\r\n            draftState.themeShade = foundTheme.isDark ? 'DARK' : 'LIGHT';\r\n          }\r\n        } else {\r\n          // default to DARK, themeShade is already set\r\n          draftState.filteredThemes = action.themes.filter(\r\n            (theme: themeType) => theme.isDark\r\n          );\r\n          draftState.activeTheme = draftState.filteredThemes[0].name;\r\n        }\r\n        setcolours(draftState.themeShade);\r\n        break;\r\n      case 'SET':\r\n        {\r\n          draftState.activeTheme = action.theme;\r\n          // eslint-disable-next-line no-case-declarations\r\n          const theme = state.themes.find(\r\n            (theme) => theme.name === action.theme\r\n          );\r\n          if (theme) {\r\n            draftState.primaryColour = getRandomColour(theme);\r\n            draftState.backgroundColour = theme.background;\r\n          }\r\n        }\r\n        break;\r\n      case 'PREV': {\r\n        const currentIndex = state.filteredThemes.findIndex(\r\n          (theme) => theme.name === state.activeTheme\r\n        );\r\n        let theme;\r\n        if (currentIndex === 0) {\r\n          // get last item\r\n          theme = state.filteredThemes[state.filteredThemes.length - 1];\r\n        } else {\r\n          theme = state.filteredThemes[currentIndex - 1];\r\n        }\r\n        draftState.activeTheme = theme.name;\r\n        draftState.primaryColour = getRandomColour(theme);\r\n        draftState.backgroundColour = theme.background;\r\n        break;\r\n      }\r\n      case 'NEXT':\r\n        {\r\n          let theme;\r\n          const currentIndex = state.filteredThemes.findIndex(\r\n            (theme) => theme.name === state.activeTheme\r\n          );\r\n          if (currentIndex === state.filteredThemes.length - 1) {\r\n            // get last item\r\n            theme = state.filteredThemes[0];\r\n          } else {\r\n            theme = state.filteredThemes[currentIndex + 1];\r\n          }\r\n          draftState.activeTheme = theme.name;\r\n          draftState.primaryColour = getRandomColour(theme);\r\n          draftState.backgroundColour = theme.background;\r\n        }\r\n        break;\r\n      case 'SIZE':\r\n        draftState.isSmallScreenSize = action.isSmallScreenSize;\r\n        break;\r\n      case 'SHADE':\r\n        draftState.themeShade = action.payload;\r\n        if (draftState.themeShade === THEME_COLOUR.DARK) {\r\n          draftState.filteredThemes = state.themes.filter(\r\n            (theme) => theme.isDark\r\n          );\r\n        }\r\n        if (draftState.themeShade === THEME_COLOUR.LIGHT) {\r\n          draftState.filteredThemes = state.themes.filter(\r\n            (theme) => !theme.isDark\r\n          );\r\n        }\r\n        setcolours(draftState.themeShade);\r\n        draftState.activeTheme = draftState.filteredThemes[0].name;\r\n        // eslint-disable-next-line no-case-declarations\r\n        const theme = state.themes.find(\r\n          (theme) => theme.name === draftState.filteredThemes[0].name\r\n        );\r\n        if (theme) {\r\n          draftState.primaryColour = getRandomColour(theme);\r\n          draftState.backgroundColour = theme.background;\r\n        }\r\n        break;\r\n      case 'PREVIEW':\r\n        draftState.previewType = action.payload;\r\n        break;\r\n      case 'MORE':\r\n        draftState.isMoreOpen = !state.isMoreOpen;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n};\r\n","import React, {useEffect, useReducer, useRef, useMemo} from 'react';\r\nimport {saveAs} from 'file-saver';\r\n\r\nimport ThemePreview from 'components/ThemePreview/ThemePreview';\r\nimport Toolbar from 'components/Toolbar/Toolbar';\r\nimport MoreContent from 'components/More/MoreContent';\r\nimport ThemeSelect from 'components/ThemeSelect/ThemeSelect';\r\nimport Toggle from 'components/Toggle/Toggle';\r\n\r\nimport css from './Home.module.css';\r\nimport {\r\n  homeReducer,\r\n  initialState,\r\n  screenSizeObserver,\r\n  returnInitialTheme,\r\n} from './homeMethods';\r\nimport {themeType} from 'types';\r\nimport {Console, Colours, Dark, Light} from 'Icons';\r\n\r\ntype themeprops = {\r\n  themes: themeType[];\r\n};\r\n\r\nconst stopSelectDetection = (\r\n  e: KeyboardEvent,\r\n  themeselectRef: React.MutableRefObject<null | HTMLSelectElement>\r\n) => {\r\n  if (\r\n    themeselectRef.current != null &&\r\n    document.activeElement === themeselectRef.current\r\n  ) {\r\n    // if the DOM element is being focused, hitting D will\r\n    // select the first <option> starting with D\r\n    e.preventDefault();\r\n    themeselectRef.current.blur();\r\n  }\r\n};\r\n\r\nconst shortcuts = (\r\n  dispatch: React.Dispatch<any>,\r\n  themeselectRef: React.MutableRefObject<null | HTMLSelectElement>\r\n) => (e: KeyboardEvent) => {\r\n  if (e.code === 'KeyA') {\r\n    stopSelectDetection(e, themeselectRef);\r\n    dispatch({\r\n      type: 'PREV',\r\n    });\r\n  }\r\n  if (e.code === 'KeyD') {\r\n    stopSelectDetection(e, themeselectRef);\r\n    dispatch({\r\n      type: 'NEXT',\r\n    });\r\n  }\r\n};\r\n\r\nconst sampleColours = (theme: themeType | undefined) => {\r\n  if (theme) {\r\n    return [\r\n      theme.red,\r\n      theme.green,\r\n      theme.yellow,\r\n      theme.blue,\r\n      theme.purple,\r\n      theme.cyan,\r\n    ]\r\n      .sort(() => Math.random() - 0.5)\r\n      .slice(3);\r\n  }\r\n  return [];\r\n};\r\n\r\nconst shadeValues = [\r\n  {\r\n    value: 'DARK',\r\n    label: 'Dark',\r\n    icon: () => (\r\n      <Dark\r\n        size=\"18px\"\r\n        colour={document.documentElement.style.getPropertyValue(\r\n          '--toolbar__color'\r\n        )}\r\n      />\r\n    ),\r\n  },\r\n  {\r\n    value: 'LIGHT',\r\n    label: 'Light',\r\n    icon: () => (\r\n      <Light\r\n        size=\"18px\"\r\n        colour={document.documentElement.style.getPropertyValue(\r\n          '--toolbar__color'\r\n        )}\r\n      />\r\n    ),\r\n  },\r\n];\r\n\r\nconst previewValues = [\r\n  {\r\n    value: 'console',\r\n    label: 'Terminal',\r\n    icon: () => (\r\n      <Console\r\n        size=\"18px\"\r\n        colour={document.documentElement.style.getPropertyValue(\r\n          '--toolbar__color'\r\n        )}\r\n      />\r\n    ),\r\n  },\r\n  {\r\n    value: 'colour',\r\n    label: 'Colours',\r\n    icon: () => (\r\n      <Colours\r\n        size=\"18px\"\r\n        colour={document.documentElement.style.getPropertyValue(\r\n          '--toolbar__color'\r\n        )}\r\n      />\r\n    ),\r\n  },\r\n];\r\n\r\nconst Home: React.FC<themeprops> = (props) => {\r\n  const themeselectRef = useRef(null);\r\n  const [state, dispatch] = useReducer(homeReducer, {\r\n    ...initialState,\r\n    ...{isSmallScreenSize: window.innerWidth < 1024},\r\n  });\r\n  useEffect(() => {\r\n    dispatch({\r\n      type: 'LOAD',\r\n      themes: props.themes,\r\n      initialTheme: returnInitialTheme(window.location.search),\r\n    });\r\n    const resizer = screenSizeObserver(dispatch);\r\n    resizer.observe(document.body);\r\n    return () => {\r\n      resizer.unobserve(document.body);\r\n    };\r\n  }, [props.themes]);\r\n  useEffect(() => {\r\n    const shortcutFns = shortcuts(dispatch, themeselectRef);\r\n    document.addEventListener('keypress', shortcutFns);\r\n    return () => {\r\n      document.removeEventListener('keypress', shortcutFns);\r\n    };\r\n  }, []);\r\n  const theme = state.themes.find((theme) => theme.name === state.activeTheme);\r\n  const themeNames = state.filteredThemes.map((theme) => theme.name);\r\n  const downloadAllThemes = () => {\r\n    const themeBlob = new Blob(\r\n      [\r\n        JSON.stringify(\r\n          props.themes.map((theme) => {\r\n            const {isDark, ...rest} = theme;\r\n            return rest;\r\n          }),\r\n          null,\r\n          2\r\n        ),\r\n      ],\r\n      {\r\n        type: 'application/json',\r\n      }\r\n    );\r\n    saveAs(themeBlob, 'windows-terminal-themes.json', {autoBom: true});\r\n  };\r\n\r\n  const ThemeSelectContainer = () => (\r\n    <ThemeSelect\r\n      themeNames={themeNames}\r\n      dispatch={dispatch}\r\n      activeTheme={state.activeTheme}\r\n      themeselectRef={themeselectRef}\r\n    />\r\n  );\r\n  const Toggles = () => (\r\n    <>\r\n      <Toggle\r\n        currentValue={state.themeShade}\r\n        dispatch={dispatch}\r\n        type=\"SHADE\"\r\n        values={shadeValues}\r\n      />\r\n      <Toggle\r\n        currentValue={state.previewType}\r\n        dispatch={dispatch}\r\n        type=\"PREVIEW\"\r\n        values={previewValues}\r\n      />\r\n    </>\r\n  );\r\n  const stringyTheme = theme != null ? JSON.stringify(theme) : null;\r\n  const colours = useMemo(() => {\r\n    // idk, this seems dumb but Dan says it's fine\r\n    // https://twitter.com/dan_abramov/status/1104414469629898754?lang=en\r\n    return sampleColours(\r\n      stringyTheme != null ? JSON.parse(stringyTheme) : null\r\n    );\r\n  }, [stringyTheme]);\r\n  return (\r\n    <section\r\n      className={css.container}\r\n      style={{background: state.backgroundColour}}\r\n    >\r\n      <Toolbar\r\n        themeShade={state.themeShade}\r\n        previewType={state.previewType}\r\n        dispatch={dispatch}\r\n        activeTheme={state.activeTheme}\r\n        themeNames={themeNames}\r\n        themeselectRef={themeselectRef}\r\n        colours={colours}\r\n        isMoreOpen={state.isMoreOpen}\r\n        isSmallScreenSize={state.isSmallScreenSize}\r\n        ThemeSelectContainer={ThemeSelectContainer}\r\n        Toggles={Toggles}\r\n      />\r\n      <section className={css.content}>\r\n        <MoreContent\r\n          downloadAllThemes={downloadAllThemes}\r\n          isMoreOpen={state.isMoreOpen}\r\n          dispatch={dispatch}\r\n        />\r\n        <ThemePreview\r\n          previewType={state.previewType}\r\n          theme={theme}\r\n          primaryColour={state.primaryColour}\r\n          backgroundColour={state.backgroundColour}\r\n          isSmallScreenSize={state.isSmallScreenSize}\r\n          ThemeSelectContainer={ThemeSelectContainer}\r\n          Toggles={Toggles}\r\n        />\r\n      </section>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nimport css from './Skeleton.module.css';\r\n\r\nconst Skeleton = () => (\r\n  <section className={css.container}>\r\n    <h1>Windows Terminal Themes</h1>\r\n    <h4>Loading...</h4>\r\n  </section>\r\n);\r\n\r\nexport default Skeleton;\r\n","import React, {useEffect, useState} from 'react';\r\n\r\nimport Home from 'components/Home/Home';\r\nimport {themeType} from 'types';\r\nimport Skeleton from 'components/Skeleton/Skeleton';\r\n\r\n/**\r\n * in development https://github.com/atomcorp/terminal-api needs to be installed and running\r\n * for this to work\r\n * package.json has a proxy which redirects stuff it can't find to http://localhost:3001\r\n * then, apiBase can either be '' or http://localhost:3000 (ie the react apps domain)\r\n */\r\nconst apiBase =\r\n  process.env.NODE_ENV === 'development' ? '' : 'https://www.atomcorp.dev';\r\n\r\nconst App: React.FC = () => {\r\n  const [themes, setThemes] = useState<themeType[]>([]);\r\n  useEffect(() => {\r\n    const getThemes = async () => {\r\n      try {\r\n        const res = await fetch(`${apiBase}/api/v1/themes`);\r\n        const themes = await res.json();\r\n        setThemes(themes);\r\n      } catch (error) {\r\n        // use dynamic importing / code splitting\r\n        import('backupthemes.json').then((backupthemes) => {\r\n          setThemes(backupthemes.default);\r\n        });\r\n      }\r\n    };\r\n    getThemes();\r\n  }, []);\r\n  if (themes.length < 1) {\r\n    return <Skeleton />;\r\n  }\r\n  return <Home themes={themes} />;\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ThemeSelect_container__27kX6\",\"label\":\"ThemeSelect_label__coFue\",\"select\":\"ThemeSelect_select__fVlm5\",\"arrow\":\"ThemeSelect_arrow__31uiM\",\"direction\":\"ThemeSelect_direction__qwqSJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Toolbar_container__3UF8D\",\"title\":\"Toolbar_title__3JXIe\",\"select\":\"Toolbar_select__2z2UE\",\"toggles\":\"Toolbar_toggles__2GUzA\",\"more\":\"Toolbar_more__2v4P0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Toggle_container__ylUE3\",\"label\":\"Toggle_label__n17Vi\",\"active\":\"Toggle_active__PZZXV\",\"radio\":\"Toggle_radio__3WMZH\",\"outline\":\"Toggle_outline__3itCX\"};"],"sourceRoot":""}