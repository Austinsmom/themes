{"version":3,"sources":["components/Console/Console.module.css","components/ThemeList/ThemeList.module.css","components/Console/consoleMethods.ts","components/Console/Console.tsx","components/ThemeList/ThemeList.tsx","components/ThemeSelect/ThemeSelect.tsx","components/Header/Header.tsx","components/Home/Home.tsx","App.tsx","serviceWorker.ts","index.tsx","components/Header/Header.module.css","components/Home/Home.module.css","components/ThemeSelect/ThemeSelect.module.css"],"names":["module","exports","backgroundKeys","textKeys","titleColours","getRandomColour","theme","accessibleColour","sort","Math","random","find","titleColour","contrast","isAccessible","background","Console","props","useState","textCopied","setTextCopied","randomColour","setRandomColour","useEffect","className","css","container","style","onClick","name","color","matrix","map","textKey","i","backgroundKey","y","key","cell","button","clipboard","JSON","stringify","setTimeout","loading","ThemeList","themeNames","themeName","activeTheme","active","type","id","value","checked","onChange","setActiveTheme","label","htmlFor","tabbed","ThemeSelect","select","e","preventDefault","target","Header","title","paragraph","href","rel","compare","a","b","toUpperCase","Home","themes","setThemes","isSmallScreenSize","setIsSmallScreenSize","fetch","process","response","json","console","error","request","resizer","ResizeObserver","entries","width","contentRect","observe","document","body","unobserve","sidebar","content","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.86f1882b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Console_container__2LGSf\",\"name\":\"Console_name__11bSO\",\"matrix\":\"Console_matrix__1QWdB\",\"cell\":\"Console_cell__hou6F\",\"button\":\"Console_button__11w1H\",\"loading\":\"Console_loading__UHool\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ThemeList_container__KMQ-C\",\"theme\":\"ThemeList_theme__3lD1D\",\"label\":\"ThemeList_label__3WRZN\",\"active\":\"ThemeList_active__Ed-ep\"};","import contrast from 'get-contrast';\n\nimport {backgroundKeyType, textKeyType, themeType} from 'types';\n\nexport const backgroundKeys: backgroundKeyType[] = [\n  'background',\n  'black',\n  'red',\n  'green',\n  'yellow',\n  'blue',\n  'purple',\n  'cyan',\n  'white',\n  'background',\n];\n\nexport const textKeys: textKeyType[] = [\n  'black',\n  'brightBlack',\n  'red',\n  'brightRed',\n  'green',\n  'brightGreen',\n  'yellow',\n  'brightYellow',\n  'blue',\n  'brightBlue',\n  'purple',\n  'brightPurple',\n  'cyan',\n  'brightCyan',\n  'white',\n  'brightWhite',\n];\n\nexport type titleColoursType =\n  | 'black'\n  | 'red'\n  | 'green'\n  | 'yellow'\n  | 'blue'\n  | 'purple'\n  | 'cyan'\n  | 'white';\n\nexport const titleColours: titleColoursType[] = [\n  'black',\n  'red',\n  'green',\n  'yellow',\n  'blue',\n  'purple',\n  'cyan',\n  'white',\n];\n\nexport const getRandomColour = (theme: themeType | undefined): string => {\n  if (theme == null) {\n    return '';\n  }\n  const randomisedColours = titleColours.sort(() => Math.random() - 0.5);\n  const accessibleColour = randomisedColours.find(\n    (titleColour: titleColoursType) =>\n      contrast.isAccessible(theme[titleColour], theme.background)\n  );\n  if (accessibleColour != null) {\n    return theme[accessibleColour];\n  }\n  return theme[titleColours[0]];\n};\n","import React, {useState, useEffect} from 'react';\nimport * as clipboard from 'clipboard-polyfill';\n\nimport {themeType} from 'types';\nimport css from './Console.module.css';\nimport {backgroundKeys, textKeys, getRandomColour} from './consoleMethods';\n\ntype PropsType = {\n  theme?: themeType;\n};\n\nconst Console: React.FC<PropsType> = (props) => {\n  const [textCopied, setTextCopied] = useState(false);\n  const [randomColour, setRandomColour] = useState('');\n  useEffect(() => {\n    setRandomColour(getRandomColour(props.theme));\n  }, [props.theme]);\n  if (!props.theme) {\n    return <div className={css.loading}>Loading...</div>;\n  }\n  return (\n    <section\n      className={css.container}\n      style={{background: props.theme.background}}\n    >\n      <h2\n        onClick={() => {\n          setRandomColour(getRandomColour(props.theme));\n        }}\n        className={css.name}\n        style={{color: randomColour}}\n      >\n        {props.theme.name}\n      </h2>\n      <div className={css.matrix}>\n        {textKeys.map((textKey, i) =>\n          backgroundKeys.map((backgroundKey, y) => (\n            <div\n              key={i + ' ' + y}\n              className={css.cell}\n              style={{\n                background: props.theme ? props.theme[backgroundKey] : '',\n                color: props.theme ? props.theme[textKey] : '',\n              }}\n            >\n              gYw\n            </div>\n          ))\n        )}\n      </div>\n      <button\n        className={css.button}\n        style={{color: props.theme.background, background: randomColour}}\n        onClick={() => {\n          if (!textCopied) {\n            setTextCopied(true);\n            clipboard.writeText(JSON.stringify(props.theme, null, 2));\n            setTimeout(() => {\n              setTextCopied(false);\n            }, 500);\n          }\n        }}\n      >\n        {!textCopied ? 'Copy Theme' : 'Copied!'}\n      </button>\n    </section>\n  );\n};\n\nexport default Console;\n","import React from 'react';\n\nimport css from './ThemeList.module.css';\n\ntype PropsType = {\n  themeNames: string[];\n  activeTheme: string;\n  setActiveTheme: (string: string) => void;\n};\n\nconst ThemeList: React.FC<PropsType> = (props) => (\n  <section className={css.container}>\n    {props.themeNames.map((themeName) => (\n      <div\n        key={themeName}\n        className={`${css.theme} ${\n          themeName === props.activeTheme ? css.active : ''\n        }`}\n      >\n        <input\n          type=\"radio\"\n          id={themeName}\n          name=\"themes\"\n          value={themeName}\n          checked={themeName === props.activeTheme}\n          onChange={() => {\n            props.setActiveTheme(themeName);\n          }}\n        />\n        <label className={css.label} htmlFor={themeName}>\n          <span className={css.tabbed}>{themeName}</span>\n        </label>\n      </div>\n    ))}\n  </section>\n);\n\nexport default ThemeList;\n","import React from 'react';\n\nimport css from './ThemeSelect.module.css';\n\ntype PropsType = {\n  themeNames: string[];\n  activeTheme: string;\n  setActiveTheme: (string: string) => void;\n};\n\nconst ThemeSelect: React.FC<PropsType> = (props) => (\n  <label className={css.container} htmlFor=\"theme-select\">\n    Change theme:{' '}\n    <select\n      id=\"theme-select\"\n      className={css.select}\n      value={props.activeTheme}\n      onChange={(e) => {\n        e.preventDefault();\n        if (e.target) {\n          props.setActiveTheme(e.target.value);\n        }\n      }}\n    >\n      {props.themeNames.map((themeName) => (\n        <option value={themeName} key={themeName}>\n          {themeName}\n        </option>\n      ))}\n    </select>\n  </label>\n);\n\nexport default ThemeSelect;\n","import React from 'react';\n\nimport css from './Header.module.css';\n\nconst Header: React.FC = () => (\n  <>\n    <h1 className={css.title}>Windows Terminal Themes</h1>\n    <p className={css.paragraph}>\n      Themes for{' '}\n      <a href=\"https://www.microsoft.com/en-us/p/windows-terminal-preview/9n0dx20hk701\">\n        Windows Terminal (Preview)\n      </a>\n      . To add new themes, open up settings (profile.json), copy a theme into\n      schemes and then reference the name in profiles.\n    </p>\n    <p className={css.paragraph}>\n      The themes come from{' '}\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href=\"https://github.com/mbadolato/iTerm2-Color-Schemes\"\n      >\n        iTerm2 Color Schemes\n      </a>\n      , so thanks to them.\n    </p>\n    <p className={css.paragraph}>\n      <a target=\"_blank\" href=\"/colour-schemes.json\">\n        Download all the themes\n      </a>\n      {' | '}\n      <a href=\"https://github.com/atomcorp/themes\">Github page </a>\n    </p>\n  </>\n);\n\nexport default Header;\n","import React, {useState, useEffect} from 'react';\n\nimport Console from 'components/Console/Console';\nimport ThemeList from 'components/ThemeList/ThemeList';\nimport ThemeSelect from 'components/ThemeSelect/ThemeSelect';\n// import Code from 'components/Code/Code';\nimport {themeType} from 'types';\nimport css from './Home.module.css';\nimport Header from 'components/Header/Header';\nimport ResizeObserver from 'resize-observer-polyfill';\n\nconst compare = (a: themeType, b: themeType): number => {\n  if (a.name.toUpperCase() < b.name.toUpperCase()) {\n    return -1;\n  }\n  if (a.name.toUpperCase() > b.name.toUpperCase()) {\n    return 1;\n  }\n  // a must be equal to b\n  return 0;\n};\n\nconst Home: React.FC = () => {\n  const [themes, setThemes] = useState<themeType[]>([]);\n  const [activeTheme, setActiveTheme] = useState('');\n  const [isSmallScreenSize, setIsSmallScreenSize] = useState(false);\n  useEffect(() => {\n    const request = async (): Promise<void> => {\n      try {\n        const response = await fetch(\n          `${process.env.REACT_APP_PUBLIC_PATH}/colour-schemes.json`\n        );\n        const json = await response.json();\n        setThemes(json.sort(compare));\n        setActiveTheme(json[0].name);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    request();\n    const resizer = new ResizeObserver((entries) => {\n      const {width} = entries[0].contentRect;\n      if (width > 768) {\n        setIsSmallScreenSize(false);\n      } else if (width < 768) {\n        setIsSmallScreenSize(true);\n      }\n    });\n    resizer.observe(document.body);\n    return () => {\n      resizer.unobserve(document.body);\n    };\n  }, []);\n  const theme = themes.find((theme) => theme.name === activeTheme);\n  return (\n    <section className={css.container}>\n      <aside className={css.sidebar}>\n        <Header />\n        {!isSmallScreenSize ? (\n          <ThemeList\n            themeNames={themes.map((theme) => theme.name)}\n            activeTheme={activeTheme}\n            setActiveTheme={setActiveTheme}\n          />\n        ) : (\n          <ThemeSelect\n            themeNames={themes.map((theme) => theme.name)}\n            activeTheme={activeTheme}\n            setActiveTheme={setActiveTheme}\n          />\n        )}\n      </aside>\n      <section className={css.content}>\n        <Console theme={theme} />\n      </section>\n    </section>\n  );\n};\n\nexport default Home;\n","import React from 'react';\n\nimport Home from 'components/Home/Home';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Header_title__3SH2Q\",\"paragraph\":\"Header_paragraph__BEjYQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Home_container__1ukFy\",\"sidebar\":\"Home_sidebar__3bw15\",\"content\":\"Home_content__2tXgb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ThemeSelect_container__33IBa\",\"select\":\"ThemeSelect_select__3hKQk\"};"],"sourceRoot":""}