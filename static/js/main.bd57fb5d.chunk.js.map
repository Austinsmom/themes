{"version":3,"sources":["components/ConsoleTest/ConsoleTest.module.css","components/ColourTest/ColourTest.module.css","components/ThemeSelect/ThemeSelect.module.css","components/PreviewChoice/PreviewChoice.module.css","components/ThemePreview/ThemePreview.module.css","components/ShadeChoice/ShadeChoice.module.css","components/Header/Header.module.css","components/ThemePreview/consoleMethods.ts","components/ColourTest/ColourTest.tsx","components/ConsoleTest/codeblocks.ts","components/ConsoleTest/ConsoleTest.tsx","components/ConsoleTest/methods.tsx","components/ThemePreview/ThemePreview.tsx","components/PreviewChoice/PreviewChoice.tsx","components/ThemeList/ThemeList.tsx","components/ThemeSelect/ThemeSelect.tsx","components/Header/Header.tsx","components/Home/homeMethods.ts","components/ShadeChoice/ShadeChoice.tsx","components/Home/Home.tsx","App.tsx","serviceWorker.ts","index.tsx","components/Home/Home.module.css","components/ThemeList/ThemeList.module.css"],"names":["module","exports","backgroundKeys","textKeys","validKeys","initThemeObj","name","black","red","green","yellow","blue","purple","cyan","white","brightBlack","brightRed","brightGreen","brightYellow","brightBlue","brightPurple","brightCyan","brightWhite","background","foreground","selectionBackground","cursorColor","ColourTest","props","className","css","matrix","data-testid","map","textKey","i","backgroundKey","y","key","cell","style","theme","color","codeblocks","id","markup","defaultColour","defaultCodeblock","ConsoleTest","useState","tab","setTab","activeCodeblock","find","codeblock","container","terminal","titlebar","isDark","light","tabs","active","radio","type","value","checked","onChange","htmlFor","code","split","string","matches","matchAll","colours","length","contents","undefined","ThemePreview","copied","setCopied","shared","setShared","backgroundColour","primaryColour","previewType","buttons","data-text","button","onClick","clipboard","JSON","stringify","reduce","acc","setTimeout","share","borderColor","window","location","origin","pathname","encodeURIComponent","loading","PreviewChoice","dispatch","ThemeList","scrollToLabel","useEffect","themeNames","themeName","activeTheme","label","tabbed","ThemeSelect","select","e","preventDefault","target","Header","href","title","paragraph","rel","download","themeBlob","Blob","themes","saveAs","autoBom","titleColours","getRandomColour","accessibleColour","sort","Math","random","titleColour","contrast","ratio","THEME_COLOUR","initialState","filteredThemes","isSmallScreenSize","innerWidth","themeShade","homeReducer","state","action","immer","draftState","initialTheme","foundTheme","filter","ShadeChoice","Home","sidebarRef","useRef","useReducer","search","URLSearchParams","get","returnInitialTheme","useCallback","current","labelEl","querySelector","labelElDimensions","getBoundingClientRect","sidebarViewHeight","offsetHeight","sidebarScrollHeight","scrollHeight","scrollTop","top","resizer","ResizeObserver","entries","width","contentRect","screenSizeObserver","observe","document","body","unobserve","ref","sidebar","dark","content","App","setThemes","a","fetch","res","json","then","backupthemes","default","getThemes","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bd57fb5d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ConsoleTest_container__10tZG\",\"terminal\":\"ConsoleTest_terminal__2OiKZ\",\"titlebar\":\"ConsoleTest_titlebar__1Dfwu\",\"light\":\"ConsoleTest_light__n5_sY\",\"tabs\":\"ConsoleTest_tabs__1dGGo\",\"radio\":\"ConsoleTest_radio__KFNgZ\",\"tab\":\"ConsoleTest_tab__2D6xA\",\"active\":\"ConsoleTest_active__oI03b\",\"code\":\"ConsoleTest_code__3aQid\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"matrix\":\"ColourTest_matrix__3x6Lm\",\"cell\":\"ColourTest_cell__opYFy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ThemeSelect_container__27kX6\",\"select\":\"ThemeSelect_select__fVlm5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PreviewChoice_container__2q45T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ThemePreview_container__2JwIk\",\"name\":\"ThemePreview_name__1s4Gg\",\"button\":\"ThemePreview_button__3TR7c\",\"copied\":\"ThemePreview_copied__1nI60\",\"mymove\":\"ThemePreview_mymove__31ZFe\",\"loading\":\"ThemePreview_loading__1o8br\",\"share\":\"ThemePreview_share__2OTNE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ShadeChoice_container__10lHy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Header_title__3pnEU\",\"paragraph\":\"Header_paragraph__3hwbP\",\"download\":\"Header_download__3dqhv\"};","import {\r\n  backgroundKeyType,\r\n  textKeyType,\r\n  validThemeType,\r\n  themeType,\r\n  validKeysType,\r\n} from 'types';\r\n\r\nexport const backgroundKeys: backgroundKeyType[] = [\r\n  'background',\r\n  'black',\r\n  'red',\r\n  'green',\r\n  'yellow',\r\n  'blue',\r\n  'purple',\r\n  'cyan',\r\n  'white',\r\n  'background',\r\n];\r\n\r\nexport const textKeys: textKeyType[] = [\r\n  'black',\r\n  'brightBlack',\r\n  'red',\r\n  'brightRed',\r\n  'green',\r\n  'brightGreen',\r\n  'yellow',\r\n  'brightYellow',\r\n  'blue',\r\n  'brightBlue',\r\n  'purple',\r\n  'brightPurple',\r\n  'cyan',\r\n  'brightCyan',\r\n  'white',\r\n  'brightWhite',\r\n];\r\n\r\nexport const validKeys: validKeysType = [\r\n  'name',\r\n  'black',\r\n  'red',\r\n  'green',\r\n  'yellow',\r\n  'blue',\r\n  'purple',\r\n  'cyan',\r\n  'white',\r\n  'brightBlack',\r\n  'brightRed',\r\n  'brightGreen',\r\n  'brightYellow',\r\n  'brightBlue',\r\n  'brightPurple',\r\n  'brightCyan',\r\n  'brightWhite',\r\n  'background',\r\n  'foreground',\r\n  'selectionBackground',\r\n  'cursorColor',\r\n];\r\n\r\n// this just keeps Typescript happy\r\nconst initThemeObj = {\r\n  name: '',\r\n  black: '',\r\n  red: '',\r\n  green: '',\r\n  yellow: '',\r\n  blue: '',\r\n  purple: '',\r\n  cyan: '',\r\n  white: '',\r\n  brightBlack: '',\r\n  brightRed: '',\r\n  brightGreen: '',\r\n  brightYellow: '',\r\n  brightBlue: '',\r\n  brightPurple: '',\r\n  brightCyan: '',\r\n  brightWhite: '',\r\n  background: '',\r\n  foreground: '',\r\n  selectionBackground: '',\r\n  cursorColor: '',\r\n};\r\n\r\nexport const parseValidKeys = (theme: themeType): validThemeType => {\r\n  return validKeys.reduce(\r\n    (acc, key) => ({\r\n      ...acc,\r\n      ...{\r\n        [key]: theme[key],\r\n      },\r\n    }),\r\n    initThemeObj\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport {themeType} from 'types';\r\nimport css from './ColourTest.module.css';\r\nimport {backgroundKeys, textKeys} from 'components/ThemePreview/consoleMethods';\r\n\r\ntype PropsType = {\r\n  theme: themeType;\r\n};\r\n\r\nconst ColourTest: React.FC<PropsType> = (props) => {\r\n  return (\r\n    <section className={css.matrix} data-testid=\"colourtest\">\r\n      {textKeys.map((textKey, i) =>\r\n        backgroundKeys.map((backgroundKey, y) => (\r\n          <div\r\n            key={i + ' ' + y}\r\n            className={css.cell}\r\n            style={{\r\n              background: props.theme ? props.theme[backgroundKey] : '',\r\n              color: props.theme ? props.theme[textKey] : '',\r\n            }}\r\n          >\r\n            gYw\r\n          </div>\r\n        ))\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ColourTest;\r\n","import {textKeyType} from 'types';\r\n\r\nexport type codeblocksType = {\r\n  name: string;\r\n  markup: string;\r\n  defaultColour: textKeyType | 'foreground' | 'background';\r\n  id: string;\r\n};\r\n\r\nconst codeblocks: codeblocksType[] = [\r\n  {\r\n    id: 'cra/compiled',\r\n    name: 'CRA - compiled',\r\n    markup: `<green>Compiled successfully!</green>\r\n\r\nYou can now view <brightWhite>terminal</brightWhite> in the browser. \r\n\r\n  <brightWhite>Local:</brightWhite>           http://localhost:<brightWhite>3000</brightWhite>/themes\r\n  <brightWhite>On Your Network:</brightWhite> http://192.168.86.37:<brightWhite>3000</brightWhite>/themes \r\n  \r\nNote that the development build is not\r\noptimized. \r\nTo create a production build, use <cyan>yarn build</cyan>.`,\r\n    defaultColour: 'foreground',\r\n  },\r\n  {\r\n    id: 'cypress/run',\r\n    name: 'Cypress - run',\r\n    markup: `<foreground>Running:</foreground>  <brightBlack>themes.spec.js                            (1 of 1)</brightBlack>\r\n\r\n<foreground>Windows Terminal Themes - big screen</foreground>\r\n<cyan>- should download all themes using download button</cyan>\r\n<green>√</green> should show dark theme by default <red>(705ms)</red>\r\n    \r\n<green>(</green><brightGreen>Results</brightGreen><green>)</green>\r\n\r\n┌──────────────────────────────────────────────────────────┐\r\n│ Tests:        <green>18</green>                                         │\r\n│ Duration:     <green>10 seconds</green>                                 │\r\n│ Spec Ran:     <green>themes.spec.js</green>                             │\r\n└──────────────────────────────────────────────────────────┘\r\n`,\r\n    defaultColour: 'brightBlack',\r\n  },\r\n  {\r\n    id: 'jest/failed',\r\n    name: 'Jest - failed',\r\n    markup: `<foreground:brightRed> FAIL </foreground:brightRed> src/components/Home/Home.test.js (<white:red>17.523s</white:red>)\r\n  <red>● should return theme name from search params</red>\r\n  \r\n  expect(<red>received</red>).toBe(<green>expected</green>) // Object.is equality\r\n  \r\n    Expected: <green>\"synthwave-everything</green><background:brightGreen>error\"</background:brightGreen>\r\n    Received: <red>\"synthwave-everything\"</red>\r\n    \r\n        218 |\r\n        219 | it(<green>'should return theme name from search params'</green>, () <yellow>=></yellow> {\r\n      > 220 |   expect(returnInitialTheme(<brightGreen>'?theme=synthwave-everything'</brightGreen>)).toBe(\r\n            |                                                             ^\r\n        221 |     <green>'synthwave-everythingerror'</green>\r\n        222 |   );\r\n        223 |   expect(returnInitialTheme(<green>'?wrong=synthwave-everything'</green>)).toBe(<cyan>null</cyan>);\r\n        \r\n        at Object.toBe (<cyan>src/components/Home/Home.test.js</cyan>:220:61)\r\n  \r\n<brightWhite>Test Suites:</brightWhite> <brightRed>1 failed</brightRed>, <brightGreen>1 passed</brightGreen>, 2 total\r\n<brightWhite>Tests:</brightWhite>       <brightRed>1 failed</brightRed>, <brightYellow>4 skipped</brightYellow>, <brightGreen>2 passed</brightGreen>, 7 total\r\n<brightWhite>Snapshots:</brightWhite>   0 total\r\n<brightWhite>Time:</brightWhite>        <brightYellow>22.5s</brightYellow>\r\nRan all test suites.\r\n\r\nWatch Usage: Press w to show more.\r\n    `,\r\n    defaultColour: 'white',\r\n  },\r\n  {\r\n    id: 'jest/runnning',\r\n    name: 'Jest - running',\r\n    markup: `<brightBlack:brightYellow>  RUNS  </brightBlack:brightYellow> src/components/Home/<brightWhite>Home.test.js</brightWhite>\r\n<brightBlack:brightYellow>  RUNS  </brightBlack:brightYellow> src/<brightWhite>App.test.tsx</brightWhite>\r\n    \r\n<brightWhite>Test Suites:</brightWhite> 0 of 2 total\r\n<brightWhite>Tests:</brightWhite>       0 total\r\n<brightWhite>Snapshots:</brightWhite>   0 total\r\n<brightWhite>Time:</brightWhite>        4s\r\n\r\n<background:green>         </background:green><background:foreground>                             </background:foreground>\r\n\r\n    `,\r\n    defaultColour: 'foreground',\r\n  },\r\n];\r\n\r\nexport default codeblocks;\r\n","import React, {useState} from 'react';\r\n\r\nimport css from './ConsoleTest.module.css';\r\nimport {themeType} from 'types';\r\nimport codeblocks, {codeblocksType} from './codeblocks';\r\nimport {parseSyntax} from './methods';\r\n\r\ntype PropsType = {\r\n  theme: themeType;\r\n};\r\n\r\nconst defaultCodeblock: codeblocksType = {\r\n  defaultColour: 'foreground',\r\n  markup: '',\r\n  id: 'default',\r\n  name: 'default',\r\n};\r\n\r\nconst ConsoleTest: React.FC<PropsType> = (props) => {\r\n  const [tab, setTab] = useState(codeblocks[0].id);\r\n  const activeCodeblock =\r\n    codeblocks.find((codeblock) => codeblock.id === tab) ?? defaultCodeblock;\r\n  return (\r\n    <section className={css.container} data-testid=\"consoletest\">\r\n      <div className={css.terminal}>\r\n        <div\r\n          className={`${css.titlebar} ${!props.theme.isDark ? css.light : ''}`}\r\n        >\r\n          <div className={css.tabs}>\r\n            {codeblocks.map((codeblock) => (\r\n              <div\r\n                key={codeblock.id}\r\n                className={`${css.tab} ${\r\n                  tab === codeblock.id ? css.active : ''\r\n                }`}\r\n              >\r\n                <input\r\n                  className={css.radio}\r\n                  id={codeblock.id}\r\n                  name=\"tab\"\r\n                  type=\"radio\"\r\n                  value={codeblock.id}\r\n                  checked={codeblock.id === activeCodeblock.id}\r\n                  onChange={() => {\r\n                    setTab(codeblock.id);\r\n                  }}\r\n                />\r\n                <label htmlFor={codeblock.id}>\r\n                  <span>{codeblock.name}</span>\r\n                </label>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <code\r\n          data-testid=\"markup\"\r\n          className={css.code}\r\n          style={{\r\n            color: props.theme[(props.theme, activeCodeblock.defaultColour)],\r\n          }}\r\n        >\r\n          {parseSyntax(props.theme, activeCodeblock.markup)}\r\n        </code>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ConsoleTest;\r\n","import React from 'react';\r\n\r\nimport {validKeys} from 'components/ThemePreview/consoleMethods';\r\nimport {themeType, textKeyType} from 'types';\r\n\r\nexport const parseSyntax = (theme: themeType, markup: string) => {\r\n  const throwErrors =\r\n    process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'test';\r\n  return markup.split(/(<[^/>]+?>[^<]+<[^>]+?>)/g).map((string, i) => {\r\n    const matches = [...string.matchAll(/<(.+?)>(.+)<\\/(.+)>/g)][0];\r\n    if (matches != null) {\r\n      if (throwErrors && matches[1] !== matches[3]) {\r\n        throw new Error(\r\n          `Opening tag <${matches[1]}> does not match closing tag </${matches[3]}>`\r\n        );\r\n      }\r\n      const colours = matches[1].split(':');\r\n      const foreground = colours[0] as textKeyType;\r\n      const background =\r\n        colours.length > 0 ? (colours[1] as textKeyType) : null;\r\n      if (\r\n        throwErrors &&\r\n        (!validKeys.includes(foreground) ||\r\n          (background && !validKeys.includes(background)))\r\n      ) {\r\n        throw new Error(\r\n          `Using invalid tags: <${matches[1]}>${matches[2]}</${matches[3]}>`\r\n        );\r\n      }\r\n      const contents = matches[2];\r\n      return (\r\n        <span\r\n          key={i}\r\n          style={{\r\n            color: theme[foreground],\r\n            background: background ? theme[background] : undefined,\r\n          }}\r\n        >\r\n          {contents}\r\n        </span>\r\n      );\r\n    }\r\n    if (throwErrors && string.match(/<(.+?)>(.+)<(.+)>/g)) {\r\n      throw new Error(\r\n        `Found invalid tags: ${string}. \\n Are they formatted correctly?`\r\n      );\r\n    }\r\n\r\n    return string;\r\n  }, []);\r\n};\r\n","import React, {useState} from 'react';\r\nimport * as clipboard from 'clipboard-polyfill';\r\n\r\nimport ColourTest from 'components/ColourTest/ColourTest';\r\nimport ConsoleTest from 'components/ConsoleTest/ConsoleTest';\r\nimport {themeType, previewType} from 'types';\r\nimport css from './ThemePreview.module.css';\r\nimport {parseValidKeys} from './consoleMethods';\r\n\r\ntype PropsType = {\r\n  theme?: themeType;\r\n  primaryColour: string;\r\n  backgroundColour: string;\r\n  previewType: previewType;\r\n};\r\n\r\nconst ThemePreview: React.FC<PropsType> = (props) => {\r\n  const [copied, setCopied] = useState(false);\r\n  const [shared, setShared] = useState(false);\r\n  if (!props.theme) {\r\n    return (\r\n      <div\r\n        style={{background: props.backgroundColour, color: props.primaryColour}}\r\n        className={css.loading}\r\n      >\r\n        Loading...\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <section\r\n      className={css.container}\r\n      style={{background: props.backgroundColour}}\r\n    >\r\n      <h2\r\n        data-testid=\"selected-title\"\r\n        className={css.name}\r\n        style={{color: props.primaryColour}}\r\n      >\r\n        {props.theme.name}\r\n      </h2>\r\n      {props.previewType === 'colour' ? (\r\n        <ColourTest theme={props.theme} />\r\n      ) : (\r\n        <ConsoleTest theme={props.theme} />\r\n      )}\r\n      <div className={css.buttons}>\r\n        <button\r\n          data-text={copied ? 'Copied!' : 'Copy Theme'}\r\n          className={`${css.button}${copied ? ` ${css.copied}` : ''}`}\r\n          style={{\r\n            color: props.theme.background,\r\n            background: props.primaryColour,\r\n          }}\r\n          onClick={() => {\r\n            if (!copied && props.theme) {\r\n              setCopied(true);\r\n              clipboard.writeText(\r\n                JSON.stringify(parseValidKeys(props.theme), null, 2)\r\n              );\r\n              setTimeout(() => {\r\n                setCopied(false);\r\n              }, 500);\r\n            }\r\n          }}\r\n        >\r\n          Copy Theme\r\n        </button>\r\n        <button\r\n          data-text={shared ? 'Copied!' : 'Share Theme'}\r\n          className={`${css.button} ${css.share} ${\r\n            shared ? ` ${css.copied}` : ''\r\n          }`}\r\n          style={{\r\n            color: props.primaryColour,\r\n            borderColor: props.primaryColour,\r\n            background: props.theme.background,\r\n          }}\r\n          onClick={() => {\r\n            if (!shared) {\r\n              setShared(true);\r\n              setTimeout(() => {\r\n                if (props.theme != null) {\r\n                  clipboard.writeText(\r\n                    `${window.location.origin}${\r\n                      window.location.pathname\r\n                    }?theme=${encodeURIComponent(props.theme.name)}`\r\n                  );\r\n                }\r\n                setShared(false);\r\n              }, 500);\r\n            }\r\n          }}\r\n        >\r\n          Share theme\r\n        </button>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ThemePreview;\r\n","import React from 'react';\r\n\r\nimport {previewType, actionTypes} from 'types';\r\nimport css from './PreviewChoice.module.css';\r\n\r\ntype PropsState = {\r\n  previewType: previewType;\r\n  dispatch: React.Dispatch<actionTypes>;\r\n};\r\n\r\nconst PreviewChoice: React.FC<PropsState> = (props) => (\r\n  <section className={css.container}>\r\n    Choose preview:\r\n    <label htmlFor=\"console\">\r\n      <input\r\n        name=\"preview\"\r\n        type=\"radio\"\r\n        id=\"console\"\r\n        value={'console'}\r\n        checked={'console' === props.previewType}\r\n        onChange={() => {\r\n          props.dispatch({type: 'PREVIEW', previewType: 'console'});\r\n        }}\r\n      />\r\n      Console\r\n    </label>\r\n    <label htmlFor=\"colour\">\r\n      <input\r\n        name=\"preview\"\r\n        type=\"radio\"\r\n        id=\"colour\"\r\n        value={'colour'}\r\n        checked={'colour' === props.previewType}\r\n        onChange={() => {\r\n          props.dispatch({type: 'PREVIEW', previewType: 'colour'});\r\n        }}\r\n      />\r\n      Colours\r\n    </label>\r\n  </section>\r\n);\r\n\r\nexport default PreviewChoice;\r\n","import React, {useEffect} from 'react';\r\n\r\nimport {actionTypes} from 'types';\r\nimport css from './ThemeList.module.css';\r\n\r\ntype PropsType = {\r\n  themeNames: string[];\r\n  activeTheme: string;\r\n  dispatch: React.Dispatch<actionTypes>;\r\n  primaryColour: string;\r\n  backgroundColour: string;\r\n  scrollToLabel: () => void;\r\n};\r\n\r\nconst ThemeList: React.FC<PropsType> = (props) => {\r\n  const {scrollToLabel} = props;\r\n  useEffect(() => {\r\n    scrollToLabel();\r\n  }, [scrollToLabel]);\r\n  return (\r\n    <fieldset className={css.container} name=\"theme\" data-testid=\"theme-list\">\r\n      {props.themeNames.map((themeName) => (\r\n        <div\r\n          key={themeName}\r\n          style={{\r\n            color:\r\n              themeName === props.activeTheme ? props.backgroundColour : '',\r\n            background:\r\n              themeName === props.activeTheme ? props.primaryColour : '',\r\n          }}\r\n          className={`${css.theme}`}\r\n        >\r\n          <input\r\n            type=\"radio\"\r\n            id={themeName}\r\n            name=\"theme\"\r\n            value={themeName}\r\n            checked={themeName === props.activeTheme}\r\n            onChange={() => {\r\n              props.dispatch({type: 'SET', theme: themeName});\r\n            }}\r\n          />\r\n          <label className={css.label} htmlFor={themeName}>\r\n            <span className={css.tabbed}>{themeName}</span>\r\n          </label>\r\n        </div>\r\n      ))}\r\n    </fieldset>\r\n  );\r\n};\r\n\r\nexport default ThemeList;\r\n","import React from 'react';\r\n\r\nimport {actionTypes} from 'types';\r\nimport css from './ThemeSelect.module.css';\r\n\r\ntype PropsType = {\r\n  themeNames: string[];\r\n  activeTheme: string;\r\n  dispatch: React.Dispatch<actionTypes>;\r\n};\r\n\r\nconst ThemeSelect: React.FC<PropsType> = (props) => (\r\n  <label className={css.container} htmlFor=\"theme-select\">\r\n    Change theme:{' '}\r\n    <select\r\n      id=\"theme-select\"\r\n      className={css.select}\r\n      value={props.activeTheme}\r\n      onChange={(e) => {\r\n        e.preventDefault();\r\n        if (e.target) {\r\n          props.dispatch({type: 'SET', theme: e.target.value});\r\n        }\r\n      }}\r\n    >\r\n      {props.themeNames.map((themeName) => (\r\n        <option value={themeName} key={themeName}>\r\n          {themeName}\r\n        </option>\r\n      ))}\r\n    </select>\r\n  </label>\r\n);\r\n\r\nexport default ThemeSelect;\r\n","import React from 'react';\r\nimport {saveAs} from 'file-saver';\r\n\r\nimport css from './Header.module.css';\r\nimport {themeType} from 'types';\r\n\r\ntype PropTypes = {\r\n  primaryColour: string;\r\n  themes: themeType[];\r\n};\r\n\r\nconst Header: React.FC<PropTypes> = (props) => (\r\n  <>\r\n    <a\r\n      href=\"https://support.eji.org/give/153413/#!/donation/checkout\"\r\n      className={css.title}\r\n    >\r\n      <h1 style={{color: props.primaryColour}}>Black Lives Matter</h1>\r\n    </a>\r\n    <p className={css.paragraph}>\r\n      <a href=\"https://support.eji.org/give/153413/#!/donation/checkout\">\r\n        Support the Equal Justice Initiative\r\n      </a>\r\n    </p>\r\n    <p className={css.paragraph}>\r\n      Themes for{' '}\r\n      <a\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n        href=\"https://www.microsoft.com/en-us/p/windows-terminal-preview/9n0dx20hk701\"\r\n      >\r\n        Windows Terminal (Preview)\r\n      </a>\r\n    </p>\r\n    <p className={css.paragraph}>\r\n      For how to use the themes see the{' '}\r\n      <a\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n        href=\"https://github.com/atomcorp/themes#how-to-use-the-themes\"\r\n      >\r\n        help section on GitHub\r\n      </a>\r\n    </p>\r\n    <p className={css.paragraph}>\r\n      The themes come from{' '}\r\n      <a\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n        href=\"https://github.com/mbadolato/iTerm2-Color-Schemes\"\r\n      >\r\n        iTerm2 Color Schemes\r\n      </a>\r\n      , so thanks to them.\r\n    </p>\r\n    <p className={css.paragraph}>\r\n      <button\r\n        className={css.download}\r\n        onClick={() => {\r\n          const themeBlob = new Blob(\r\n            [\r\n              JSON.stringify(\r\n                props.themes.map((theme) => {\r\n                  const {isDark, ...rest} = theme;\r\n                  return rest;\r\n                }),\r\n                null,\r\n                2\r\n              ),\r\n            ],\r\n            {\r\n              type: 'application/json',\r\n            }\r\n          );\r\n          saveAs(themeBlob, 'windows-terminal-themes.json', {autoBom: true});\r\n        }}\r\n      >\r\n        Download all the themes\r\n      </button>\r\n      {' | '}\r\n      <a\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n        href=\"https://github.com/atomcorp/themes\"\r\n      >\r\n        Github page\r\n      </a>\r\n    </p>\r\n  </>\r\n);\r\n\r\nexport default Header;\r\n","import contrast from 'get-contrast';\r\nimport ResizeObserver from 'resize-observer-polyfill';\r\nimport immer from 'immer';\r\n\r\nimport {\r\n  themeType,\r\n  themeShadeType,\r\n  themeShadeObjectType,\r\n  actionTypes,\r\n  previewType,\r\n} from 'types';\r\n\r\ntype titleColoursType =\r\n  | 'black'\r\n  | 'red'\r\n  | 'green'\r\n  | 'yellow'\r\n  | 'blue'\r\n  | 'purple'\r\n  | 'cyan'\r\n  | 'white';\r\n\r\nconst titleColours: titleColoursType[] = [\r\n  'black',\r\n  'red',\r\n  'green',\r\n  'yellow',\r\n  'blue',\r\n  'purple',\r\n  'cyan',\r\n  'white',\r\n];\r\n\r\nexport const getRandomColour = (theme: themeType | undefined): string => {\r\n  if (theme == null) {\r\n    return '';\r\n  }\r\n  const randomisedColours = titleColours.sort(() => Math.random() - 0.5);\r\n  const accessibleColour = randomisedColours.find(\r\n    (titleColour: titleColoursType) =>\r\n      contrast.ratio(theme[titleColour], theme.background) > 4.5\r\n  );\r\n  if (accessibleColour != null) {\r\n    return theme[accessibleColour];\r\n  }\r\n  return theme[titleColours[0]];\r\n};\r\n\r\nexport const returnInitialTheme = (search: string): string | null => {\r\n  if (search.length > 0) {\r\n    const params = new URLSearchParams(search);\r\n    const themeName = params.get('theme');\r\n    if (themeName != null) {\r\n      return themeName;\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\nexport const screenSizeObserver = (\r\n  dispatch: React.Dispatch<actionTypes>\r\n): ResizeObserver => {\r\n  return new ResizeObserver((entries: ResizeObserverEntry[]) => {\r\n    const {width} = entries[0].contentRect;\r\n    if (width > 768) {\r\n      dispatch({type: 'SIZE', isSmallScreenSize: false});\r\n    } else if (width < 768) {\r\n      dispatch({type: 'SIZE', isSmallScreenSize: true});\r\n    }\r\n  });\r\n};\r\n\r\nexport const THEME_COLOUR: themeShadeObjectType = {\r\n  LIGHT: 'LIGHT',\r\n  DARK: 'DARK',\r\n  ANY: 'ANY',\r\n};\r\n\r\nexport type stateType = {\r\n  themes: themeType[];\r\n  filteredThemes: themeType[];\r\n  activeTheme: string;\r\n  isSmallScreenSize: boolean;\r\n  themeShade: themeShadeType;\r\n  primaryColour: string;\r\n  backgroundColour: string;\r\n  previewType: previewType;\r\n};\r\n\r\nexport const initialState: stateType = {\r\n  themes: [],\r\n  filteredThemes: [],\r\n  activeTheme: '',\r\n  isSmallScreenSize: window.innerWidth < 768,\r\n  themeShade: THEME_COLOUR.DARK,\r\n  primaryColour: '#fded02',\r\n  backgroundColour: '#090300',\r\n  previewType: 'console',\r\n};\r\n\r\nexport const homeReducer = (\r\n  state: stateType,\r\n  action: actionTypes\r\n): stateType => {\r\n  return immer(state, (draftState: stateType) => {\r\n    let theme;\r\n    switch (action.type) {\r\n      case 'LOAD':\r\n        draftState.themes = action.themes;\r\n        if (action.initialTheme != null) {\r\n          const foundTheme = action.themes.find(\r\n            (theme: themeType) => theme.name === action.initialTheme\r\n          );\r\n          if (foundTheme != null) {\r\n            draftState.filteredThemes = action.themes.filter(\r\n              (theme: themeType) => theme.isDark === foundTheme.isDark\r\n            );\r\n            draftState.activeTheme = foundTheme.name;\r\n            draftState.themeShade = foundTheme.isDark ? 'DARK' : 'LIGHT';\r\n            draftState.primaryColour = getRandomColour(foundTheme);\r\n            draftState.backgroundColour = foundTheme.background;\r\n            break;\r\n          }\r\n        }\r\n        draftState.filteredThemes = action.themes.filter(\r\n          (theme: themeType) => theme.isDark\r\n        );\r\n        draftState.activeTheme = draftState.filteredThemes[0].name;\r\n        break;\r\n      case 'SET':\r\n        draftState.activeTheme = action.theme;\r\n        // eslint-disable-next-line no-case-declarations\r\n        theme = state.themes.find((theme) => theme.name === action.theme);\r\n        if (theme) {\r\n          draftState.primaryColour = getRandomColour(theme);\r\n          draftState.backgroundColour = theme.background;\r\n        }\r\n        break;\r\n      case 'SIZE':\r\n        draftState.isSmallScreenSize = action.isSmallScreenSize;\r\n        break;\r\n      case 'SHADE':\r\n        draftState.themeShade = action.themeShade;\r\n        if (draftState.themeShade === THEME_COLOUR.DARK) {\r\n          draftState.filteredThemes = state.themes.filter(\r\n            (theme) => theme.isDark\r\n          );\r\n        }\r\n        if (draftState.themeShade === THEME_COLOUR.LIGHT) {\r\n          draftState.filteredThemes = state.themes.filter(\r\n            (theme) => !theme.isDark\r\n          );\r\n        }\r\n        draftState.activeTheme = draftState.filteredThemes[0].name;\r\n        // eslint-disable-next-line no-case-declarations\r\n        theme = state.themes.find(\r\n          (theme) => theme.name === draftState.filteredThemes[0].name\r\n        );\r\n        if (theme) {\r\n          draftState.primaryColour = getRandomColour(theme);\r\n          draftState.backgroundColour = theme.background;\r\n        }\r\n        break;\r\n      case 'PREVIEW':\r\n        draftState.previewType = action.previewType;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n};\r\n","import React from 'react';\r\n\r\nimport {THEME_COLOUR} from 'components/Home/homeMethods';\r\nimport {themeShadeType, actionTypes} from 'types';\r\nimport css from './ShadeChoice.module.css';\r\n\r\ntype PropsState = {\r\n  themeShade: themeShadeType;\r\n  dispatch: React.Dispatch<actionTypes>;\r\n};\r\n\r\nconst ShadeChoice: React.FC<PropsState> = (props) => (\r\n  <section className={css.container}>\r\n    Choose type:\r\n    <label htmlFor=\"dark\">\r\n      <input\r\n        name=\"shade\"\r\n        type=\"radio\"\r\n        id=\"dark\"\r\n        value={THEME_COLOUR.DARK}\r\n        checked={THEME_COLOUR.DARK === props.themeShade}\r\n        onChange={() => {\r\n          props.dispatch({type: 'SHADE', themeShade: THEME_COLOUR.DARK});\r\n        }}\r\n      />\r\n      Dark\r\n    </label>\r\n    <label htmlFor=\"light\">\r\n      <input\r\n        name=\"shade\"\r\n        type=\"radio\"\r\n        id=\"light\"\r\n        value={THEME_COLOUR.LIGHT}\r\n        checked={THEME_COLOUR.LIGHT === props.themeShade}\r\n        onChange={() => {\r\n          props.dispatch({type: 'SHADE', themeShade: THEME_COLOUR.LIGHT});\r\n        }}\r\n      />\r\n      Light\r\n    </label>\r\n  </section>\r\n);\r\n\r\nexport default ShadeChoice;\r\n","import React, {useEffect, useReducer, useRef, useCallback} from 'react';\r\n\r\nimport ThemePreview from 'components/ThemePreview/ThemePreview';\r\nimport PreviewChoice from 'components/PreviewChoice/PreviewChoice';\r\nimport ThemeList from 'components/ThemeList/ThemeList';\r\nimport ThemeSelect from 'components/ThemeSelect/ThemeSelect';\r\nimport Header from 'components/Header/Header';\r\nimport ShadeChoice from 'components/ShadeChoice/ShadeChoice';\r\nimport css from './Home.module.css';\r\nimport {\r\n  homeReducer,\r\n  initialState,\r\n  screenSizeObserver,\r\n  THEME_COLOUR,\r\n  returnInitialTheme,\r\n} from './homeMethods';\r\nimport {themeType} from 'types';\r\n\r\ntype themeprops = {\r\n  themes: themeType[];\r\n};\r\n\r\nconst Home: React.FC<themeprops> = (props) => {\r\n  const sidebarRef = useRef<HTMLElement>(null);\r\n  const [state, dispatch] = useReducer(homeReducer, {\r\n    ...initialState,\r\n    ...{isSmallScreenSize: window.innerWidth < 768},\r\n  });\r\n  const initialTheme = returnInitialTheme(window.location.search);\r\n  const scrollToLabel = useCallback((): void => {\r\n    // scroll to the initialTheme, if used\r\n    if (\r\n      initialTheme != null &&\r\n      window.innerWidth >= 768 &&\r\n      sidebarRef.current != null\r\n    ) {\r\n      const labelEl = sidebarRef.current.querySelector(\r\n        `[for=\"${initialTheme}\"]`\r\n      );\r\n      if (labelEl != null) {\r\n        const labelElDimensions = labelEl.getBoundingClientRect();\r\n        const sidebarViewHeight = sidebarRef.current.offsetHeight;\r\n        const sidebarScrollHeight = sidebarRef.current.scrollHeight;\r\n        sidebarRef.current.scrollTop =\r\n          labelElDimensions.top > sidebarScrollHeight - sidebarViewHeight\r\n            ? labelElDimensions.top\r\n            : labelElDimensions.top - sidebarViewHeight / 2;\r\n      }\r\n    }\r\n  }, [initialTheme]);\r\n  useEffect(() => {\r\n    dispatch({\r\n      type: 'LOAD',\r\n      themes: props.themes,\r\n      initialTheme: initialTheme,\r\n    });\r\n    const resizer = screenSizeObserver(dispatch);\r\n    resizer.observe(document.body);\r\n    return () => {\r\n      resizer.unobserve(document.body);\r\n    };\r\n  }, [props.themes, initialTheme]);\r\n  const theme = state.themes.find((theme) => theme.name === state.activeTheme);\r\n  const themeNames = state.filteredThemes.map((theme) => theme.name);\r\n  return (\r\n    <section className={css.container}>\r\n      <aside\r\n        ref={sidebarRef}\r\n        style={{\r\n          background: state.backgroundColour,\r\n        }}\r\n        className={`${css.sidebar} ${\r\n          state.themeShade === THEME_COLOUR.DARK ? css.dark : css.light\r\n        }`}\r\n      >\r\n        <Header primaryColour={state.primaryColour} themes={state.themes} />\r\n        <PreviewChoice dispatch={dispatch} previewType={state.previewType} />\r\n        <ShadeChoice dispatch={dispatch} themeShade={state.themeShade} />\r\n        {!state.isSmallScreenSize ? (\r\n          /**\r\n           * this length check is just to make sure when the ThemeList loads it will have themes\r\n           * it needs to do this to make the scrollToLabel function work when the component loads\r\n           */\r\n          themeNames.length > 0 && (\r\n            <ThemeList\r\n              themeNames={themeNames}\r\n              activeTheme={state.activeTheme}\r\n              dispatch={dispatch}\r\n              primaryColour={state.primaryColour}\r\n              backgroundColour={state.backgroundColour}\r\n              scrollToLabel={scrollToLabel}\r\n            />\r\n          )\r\n        ) : (\r\n          <ThemeSelect\r\n            themeNames={themeNames}\r\n            activeTheme={state.activeTheme}\r\n            dispatch={dispatch}\r\n          />\r\n        )}\r\n      </aside>\r\n      <section className={css.content}>\r\n        <ThemePreview\r\n          previewType={state.previewType}\r\n          theme={theme}\r\n          primaryColour={state.primaryColour}\r\n          backgroundColour={state.backgroundColour}\r\n        />\r\n      </section>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, {useEffect, useState} from 'react';\r\n\r\nimport Home from 'components/Home/Home';\r\nimport {themeType} from 'types';\r\n\r\n// in development https://github.com/atomcorp/terminal-api needs to be installed and running\r\n// package.json has a proxy which points stuff like this in dev to http://localhost:3001\r\nconst apiBase =\r\n  process.env.NODE_ENV === 'development' ? '' : 'https://www.atomcorp.dev';\r\n\r\nconst App: React.FC = () => {\r\n  const [themes, setThemes] = useState<themeType[]>([]);\r\n  useEffect(() => {\r\n    const getThemes = async () => {\r\n      try {\r\n        const res = await fetch(`${apiBase}/api/v1/themes`);\r\n        const themes = await res.json();\r\n        setThemes(themes);\r\n      } catch (error) {\r\n        // use dynamic importing / code splitting\r\n        import('backupthemes.json').then((backupthemes) => {\r\n          setThemes(backupthemes.default);\r\n        });\r\n      }\r\n    };\r\n    getThemes();\r\n  }, []);\r\n  if (themes.length < 1) {\r\n    return <div>Loading</div>;\r\n  }\r\n  return <Home themes={themes} />;\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Home_container__nWlbU\",\"sidebar\":\"Home_sidebar__2ovA5\",\"content\":\"Home_content__1T6Qf\",\"light\":\"Home_light__2G6mS\",\"dark\":\"Home_dark__3UboT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ThemeList_container__uUIR5\",\"theme\":\"ThemeList_theme__32ST6\",\"label\":\"ThemeList_label__UKr3W\",\"active\":\"ThemeList_active__1cVNb\"};"],"sourceRoot":""}