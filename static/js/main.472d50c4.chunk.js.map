{"version":3,"sources":["components/Console/Console.module.css","components/ThemeSelect/ThemeSelect.module.css","components/ShadeChoice/ShadeChoice.module.css","components/Header/Header.module.css","components/Console/consoleMethods.ts","components/Console/Console.tsx","components/ThemeList/ThemeList.tsx","components/ThemeSelect/ThemeSelect.tsx","components/Header/Header.tsx","components/Home/homeMethods.ts","components/ShadeChoice/ShadeChoice.tsx","components/Home/Home.tsx","App.tsx","serviceWorker.ts","index.tsx","components/Home/Home.module.css","components/ThemeList/ThemeList.module.css"],"names":["module","exports","backgroundKeys","textKeys","validKeys","initThemeObj","name","black","red","green","yellow","blue","purple","cyan","white","brightBlack","brightRed","brightGreen","brightYellow","brightBlue","brightPurple","brightCyan","brightWhite","background","foreground","Console","props","useState","copied","setCopied","shared","setShared","theme","className","css","container","style","backgroundColour","data-testid","color","primaryColour","matrix","map","textKey","i","backgroundKey","y","key","cell","buttons","data-text","button","onClick","clipboard","JSON","stringify","reduce","acc","setTimeout","share","borderColor","window","location","origin","pathname","loading","ThemeList","scrollToLabel","useEffect","themeNames","themeName","activeTheme","type","id","value","checked","onChange","dispatch","label","htmlFor","tabbed","ThemeSelect","select","e","preventDefault","target","themeBlob","Blob","themeJson","Header","title","paragraph","rel","href","download","saveAs","autoBom","titleColours","getRandomColour","accessibleColour","sort","Math","random","find","titleColour","contrast","ratio","assignColourType","themes","isDark","THEME_COLOUR","initialState","filteredThemes","isSmallScreenSize","innerWidth","themeShade","homeReducer","state","action","immer","draftState","initialTheme","foundTheme","filter","ShadeChoice","Home","sidebarRef","useRef","useReducer","search","length","URLSearchParams","get","returnInitialTheme","useCallback","current","labelEl","querySelector","labelElDimensions","getBoundingClientRect","sidebarViewHeight","offsetHeight","sidebarScrollHeight","scrollHeight","scrollTop","top","resizer","ResizeObserver","entries","width","contentRect","screenSizeObserver","observe","document","body","unobserve","ref","sidebar","dark","light","content","App","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.472d50c4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Console_container__3E4SB\",\"name\":\"Console_name__25rXG\",\"matrix\":\"Console_matrix__3sGSe\",\"cell\":\"Console_cell__20QQz\",\"button\":\"Console_button__3FEID\",\"copied\":\"Console_copied__1om0X\",\"mymove\":\"Console_mymove__34hJP\",\"loading\":\"Console_loading__ZBrD5\",\"share\":\"Console_share__3cpXQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ThemeSelect_container__27kX6\",\"select\":\"ThemeSelect_select__fVlm5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ShadeChoice_container__10lHy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Header_title__3pnEU\",\"paragraph\":\"Header_paragraph__3hwbP\",\"download\":\"Header_download__3dqhv\"};","import {\n  backgroundKeyType,\n  textKeyType,\n  validThemeType,\n  themeType,\n  validKeysType,\n} from 'types';\n\nexport const backgroundKeys: backgroundKeyType[] = [\n  'background',\n  'black',\n  'red',\n  'green',\n  'yellow',\n  'blue',\n  'purple',\n  'cyan',\n  'white',\n  'background',\n];\n\nexport const textKeys: textKeyType[] = [\n  'black',\n  'brightBlack',\n  'red',\n  'brightRed',\n  'green',\n  'brightGreen',\n  'yellow',\n  'brightYellow',\n  'blue',\n  'brightBlue',\n  'purple',\n  'brightPurple',\n  'cyan',\n  'brightCyan',\n  'white',\n  'brightWhite',\n];\n\nconst validKeys: validKeysType = [\n  'name',\n  'black',\n  'red',\n  'green',\n  'yellow',\n  'blue',\n  'purple',\n  'cyan',\n  'white',\n  'brightBlack',\n  'brightRed',\n  'brightGreen',\n  'brightYellow',\n  'brightBlue',\n  'brightPurple',\n  'brightCyan',\n  'brightWhite',\n  'background',\n  'foreground',\n];\n\n// this just keeps Typescript happy\nconst initThemeObj = {\n  name: '',\n  black: '',\n  red: '',\n  green: '',\n  yellow: '',\n  blue: '',\n  purple: '',\n  cyan: '',\n  white: '',\n  brightBlack: '',\n  brightRed: '',\n  brightGreen: '',\n  brightYellow: '',\n  brightBlue: '',\n  brightPurple: '',\n  brightCyan: '',\n  brightWhite: '',\n  background: '',\n  foreground: '',\n};\n\nexport const parseValidKeys = (theme: themeType): validThemeType => {\n  return validKeys.reduce(\n    (acc, key) => ({\n      ...acc,\n      ...{\n        [key]: theme[key],\n      },\n    }),\n    initThemeObj\n  );\n};\n","import React, {useState} from 'react';\r\nimport * as clipboard from 'clipboard-polyfill';\r\n\r\nimport {themeType} from 'types';\r\nimport css from './Console.module.css';\r\nimport {backgroundKeys, textKeys, parseValidKeys} from './consoleMethods';\r\n\r\ntype PropsType = {\r\n  theme?: themeType;\r\n  primaryColour: string;\r\n  backgroundColour: string;\r\n};\r\n\r\nconst Console: React.FC<PropsType> = (props) => {\r\n  const [copied, setCopied] = useState(false);\r\n  const [shared, setShared] = useState(false);\r\n  if (!props.theme) {\r\n    return (\r\n      <div\r\n        style={{background: props.backgroundColour, color: props.primaryColour}}\r\n        className={css.loading}\r\n      >\r\n        Loading...\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <section\r\n      className={css.container}\r\n      style={{background: props.backgroundColour}}\r\n    >\r\n      <h2\r\n        data-testid=\"selected-title\"\r\n        className={css.name}\r\n        style={{color: props.primaryColour}}\r\n      >\r\n        {props.theme.name}\r\n      </h2>\r\n      <div className={css.matrix}>\r\n        {textKeys.map((textKey, i) =>\r\n          backgroundKeys.map((backgroundKey, y) => (\r\n            <div\r\n              key={i + ' ' + y}\r\n              className={css.cell}\r\n              style={{\r\n                background: props.theme ? props.theme[backgroundKey] : '',\r\n                color: props.theme ? props.theme[textKey] : '',\r\n              }}\r\n            >\r\n              gYw\r\n            </div>\r\n          ))\r\n        )}\r\n      </div>\r\n      <div className={css.buttons}>\r\n        <button\r\n          data-text={copied ? 'Copied!' : 'Copy Theme'}\r\n          className={`${css.button}${copied ? ` ${css.copied}` : ''}`}\r\n          style={{\r\n            color: props.theme.background,\r\n            background: props.primaryColour,\r\n          }}\r\n          onClick={() => {\r\n            if (!copied && props.theme) {\r\n              setCopied(true);\r\n              clipboard.writeText(\r\n                JSON.stringify(parseValidKeys(props.theme), null, 2)\r\n              );\r\n              setTimeout(() => {\r\n                setCopied(false);\r\n              }, 500);\r\n            }\r\n          }}\r\n        >\r\n          Copy Theme\r\n        </button>\r\n        <button\r\n          data-text={shared ? 'Copied!' : 'Share Theme'}\r\n          className={`${css.button} ${css.share} ${\r\n            shared ? ` ${css.copied}` : ''\r\n          }`}\r\n          style={{\r\n            color: props.primaryColour,\r\n            borderColor: props.primaryColour,\r\n            background: props.theme.background,\r\n          }}\r\n          onClick={() => {\r\n            if (!shared) {\r\n              setShared(true);\r\n              setTimeout(() => {\r\n                if (props.theme != null) {\r\n                  clipboard.writeText(\r\n                    `${window.location.origin}${window.location.pathname}?theme=${props.theme.name}`\r\n                  );\r\n                }\r\n                setShared(false);\r\n              }, 500);\r\n            }\r\n          }}\r\n        >\r\n          Share theme\r\n        </button>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Console;\r\n","import React, {useEffect} from 'react';\r\n\r\nimport {actionTypes} from 'types';\r\nimport css from './ThemeList.module.css';\r\n\r\ntype PropsType = {\r\n  themeNames: string[];\r\n  activeTheme: string;\r\n  dispatch: React.Dispatch<actionTypes>;\r\n  primaryColour: string;\r\n  backgroundColour: string;\r\n  scrollToLabel: () => void;\r\n};\r\n\r\nconst ThemeList: React.FC<PropsType> = (props) => {\r\n  const {scrollToLabel} = props;\r\n  useEffect(() => {\r\n    scrollToLabel();\r\n  }, [scrollToLabel]);\r\n  return (\r\n    <fieldset className={css.container} name=\"theme\" data-testid=\"theme-list\">\r\n      {props.themeNames.map((themeName) => (\r\n        <div\r\n          key={themeName}\r\n          style={{\r\n            color:\r\n              themeName === props.activeTheme ? props.backgroundColour : '',\r\n            background:\r\n              themeName === props.activeTheme ? props.primaryColour : '',\r\n          }}\r\n          className={`${css.theme}`}\r\n        >\r\n          <input\r\n            type=\"radio\"\r\n            id={themeName}\r\n            name=\"theme\"\r\n            value={themeName}\r\n            checked={themeName === props.activeTheme}\r\n            onChange={() => {\r\n              props.dispatch({type: 'SET', theme: themeName});\r\n            }}\r\n          />\r\n          <label className={css.label} htmlFor={themeName}>\r\n            <span className={css.tabbed}>{themeName}</span>\r\n          </label>\r\n        </div>\r\n      ))}\r\n    </fieldset>\r\n  );\r\n};\r\n\r\nexport default ThemeList;\r\n","import React from 'react';\n\nimport {actionTypes} from 'types';\nimport css from './ThemeSelect.module.css';\n\ntype PropsType = {\n  themeNames: string[];\n  activeTheme: string;\n  dispatch: React.Dispatch<actionTypes>;\n};\n\nconst ThemeSelect: React.FC<PropsType> = (props) => (\n  <label className={css.container} htmlFor=\"theme-select\">\n    Change theme:{' '}\n    <select\n      id=\"theme-select\"\n      className={css.select}\n      value={props.activeTheme}\n      onChange={(e) => {\n        e.preventDefault();\n        if (e.target) {\n          props.dispatch({type: 'SET', theme: e.target.value});\n        }\n      }}\n    >\n      {props.themeNames.map((themeName) => (\n        <option value={themeName} key={themeName}>\n          {themeName}\n        </option>\n      ))}\n    </select>\n  </label>\n);\n\nexport default ThemeSelect;\n","import React from 'react';\r\nimport {saveAs} from 'file-saver';\r\n\r\nimport themeJson from 'colour-schemes.json';\r\nimport css from './Header.module.css';\r\n\r\ntype PropTypes = {\r\n  primaryColour: string;\r\n};\r\n\r\nconst themeBlob = new Blob([JSON.stringify(themeJson, null, 2)], {\r\n  type: 'application/json',\r\n});\r\n\r\nconst Header: React.FC<PropTypes> = (props) => (\r\n  <>\r\n    <h1 style={{color: props.primaryColour}} className={css.title}>\r\n      Windows Terminal Themes\r\n    </h1>\r\n    <p className={css.paragraph}>\r\n      Themes for{' '}\r\n      <a\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n        href=\"https://www.microsoft.com/en-us/p/windows-terminal-preview/9n0dx20hk701\"\r\n      >\r\n        Windows Terminal (Preview)\r\n      </a>\r\n    </p>\r\n    <p className={css.paragraph}>\r\n      For how to use the themes see the{' '}\r\n      <a\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n        href=\"https://github.com/atomcorp/themes#how-to-use-the-themes\"\r\n      >\r\n        help section on GitHub\r\n      </a>\r\n    </p>\r\n    <p className={css.paragraph}>\r\n      The themes come from{' '}\r\n      <a\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n        href=\"https://github.com/mbadolato/iTerm2-Color-Schemes\"\r\n      >\r\n        iTerm2 Color Schemes\r\n      </a>\r\n      , so thanks to them.\r\n    </p>\r\n    <p className={css.paragraph}>\r\n      <button\r\n        className={css.download}\r\n        onClick={() => {\r\n          saveAs(themeBlob, 'windows-terminal-themes.json', {autoBom: true});\r\n        }}\r\n      >\r\n        Download all the themes\r\n      </button>\r\n      {' | '}\r\n      <a\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n        href=\"https://github.com/atomcorp/themes\"\r\n      >\r\n        Github page\r\n      </a>\r\n    </p>\r\n  </>\r\n);\r\n\r\nexport default Header;\r\n","import contrast from 'get-contrast';\r\nimport ResizeObserver from 'resize-observer-polyfill';\r\nimport immer from 'immer';\r\n\r\nimport {\r\n  themeType,\r\n  themeShadeType,\r\n  themeShadeObjectType,\r\n  actionTypes,\r\n} from 'types';\r\n\r\ntype titleColoursType =\r\n  | 'black'\r\n  | 'red'\r\n  | 'green'\r\n  | 'yellow'\r\n  | 'blue'\r\n  | 'purple'\r\n  | 'cyan'\r\n  | 'white';\r\n\r\nconst titleColours: titleColoursType[] = [\r\n  'black',\r\n  'red',\r\n  'green',\r\n  'yellow',\r\n  'blue',\r\n  'purple',\r\n  'cyan',\r\n  'white',\r\n];\r\n\r\nexport const getRandomColour = (theme: themeType | undefined): string => {\r\n  if (theme == null) {\r\n    return '';\r\n  }\r\n  const randomisedColours = titleColours.sort(() => Math.random() - 0.5);\r\n  const accessibleColour = randomisedColours.find(\r\n    (titleColour: titleColoursType) =>\r\n      contrast.ratio(theme[titleColour], theme.background) > 4.5\r\n  );\r\n  if (accessibleColour != null) {\r\n    return theme[accessibleColour];\r\n  }\r\n  return theme[titleColours[0]];\r\n};\r\n\r\nexport const assignColourType = (themes: themeType[]): themeType[] => {\r\n  return themes.map((theme) => {\r\n    return {\r\n      ...theme,\r\n      isDark: contrast.ratio(theme.background, '#000') < 8,\r\n    };\r\n  });\r\n};\r\n\r\nexport const returnInitialTheme = (): string | null => {\r\n  if (window.location.search.length > 0) {\r\n    const params = new URLSearchParams(window.location.search);\r\n    const themeName = params.get('theme');\r\n    if (themeName != null) {\r\n      return themeName;\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\nexport const screenSizeObserver = (\r\n  dispatch: React.Dispatch<actionTypes>\r\n): ResizeObserver => {\r\n  return new ResizeObserver((entries: ResizeObserverEntry[]) => {\r\n    const {width} = entries[0].contentRect;\r\n    if (width > 768) {\r\n      dispatch({type: 'SIZE', isSmallScreenSize: false});\r\n    } else if (width < 768) {\r\n      dispatch({type: 'SIZE', isSmallScreenSize: true});\r\n    }\r\n  });\r\n};\r\n\r\nexport const THEME_COLOUR: themeShadeObjectType = {\r\n  LIGHT: 'LIGHT',\r\n  DARK: 'DARK',\r\n  ANY: 'ANY',\r\n};\r\n\r\nexport type stateType = {\r\n  themes: themeType[];\r\n  filteredThemes: themeType[];\r\n  activeTheme: string;\r\n  isSmallScreenSize: boolean;\r\n  themeShade: themeShadeType;\r\n  primaryColour: string;\r\n  backgroundColour: string;\r\n};\r\n\r\nexport const initialState: stateType = {\r\n  themes: [],\r\n  filteredThemes: [],\r\n  activeTheme: '',\r\n  isSmallScreenSize: window.innerWidth < 768,\r\n  themeShade: THEME_COLOUR.DARK,\r\n  primaryColour: '#fded02',\r\n  backgroundColour: '#090300',\r\n};\r\n\r\nexport const homeReducer = (\r\n  state: stateType,\r\n  action: actionTypes\r\n): stateType => {\r\n  return immer(state, (draftState: stateType) => {\r\n    let theme;\r\n    switch (action.type) {\r\n      case 'LOAD':\r\n        draftState.themes = action.themes;\r\n        if (action.initialTheme != null) {\r\n          const foundTheme = action.themes.find(\r\n            (theme: themeType) => theme.name === action.initialTheme\r\n          );\r\n          if (foundTheme != null) {\r\n            draftState.filteredThemes = action.themes.filter(\r\n              (theme: themeType) => theme.isDark === foundTheme.isDark\r\n            );\r\n            draftState.activeTheme = foundTheme.name;\r\n            draftState.themeShade = foundTheme.isDark ? 'DARK' : 'LIGHT';\r\n            draftState.primaryColour = getRandomColour(foundTheme);\r\n            draftState.backgroundColour = foundTheme.background;\r\n            break;\r\n          }\r\n        }\r\n        draftState.filteredThemes = action.themes.filter(\r\n          (theme: themeType) => theme.isDark\r\n        );\r\n        draftState.activeTheme = draftState.filteredThemes[0].name;\r\n        break;\r\n      case 'SET':\r\n        draftState.activeTheme = action.theme;\r\n        // eslint-disable-next-line no-case-declarations\r\n        theme = state.themes.find((theme) => theme.name === action.theme);\r\n        if (theme) {\r\n          draftState.primaryColour = getRandomColour(theme);\r\n          draftState.backgroundColour = theme.background;\r\n        }\r\n        break;\r\n      case 'SIZE':\r\n        draftState.isSmallScreenSize = action.isSmallScreenSize;\r\n        break;\r\n      case 'SHADE':\r\n        draftState.themeShade = action.themeShade;\r\n        if (draftState.themeShade === THEME_COLOUR.DARK) {\r\n          draftState.filteredThemes = state.themes.filter(\r\n            (theme) => theme.isDark\r\n          );\r\n        }\r\n        if (draftState.themeShade === THEME_COLOUR.LIGHT) {\r\n          draftState.filteredThemes = state.themes.filter(\r\n            (theme) => !theme.isDark\r\n          );\r\n        }\r\n        draftState.activeTheme = draftState.filteredThemes[0].name;\r\n        // eslint-disable-next-line no-case-declarations\r\n        theme = state.themes.find(\r\n          (theme) => theme.name === draftState.filteredThemes[0].name\r\n        );\r\n        if (theme) {\r\n          draftState.primaryColour = getRandomColour(theme);\r\n          draftState.backgroundColour = theme.background;\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n};\r\n","import React from 'react';\n\nimport {THEME_COLOUR} from 'components/Home/homeMethods';\nimport {themeShadeType, actionTypes} from 'types';\nimport css from './ShadeChoice.module.css';\n\ntype PropsState = {\n  themeShade: themeShadeType;\n  dispatch: React.Dispatch<actionTypes>;\n};\n\nconst ShadeChoice: React.FC<PropsState> = (props) => (\n  <section className={css.container}>\n    Choose type:\n    <label htmlFor=\"dark\">\n      <input\n        name=\"shade\"\n        type=\"radio\"\n        id=\"dark\"\n        value={THEME_COLOUR.DARK}\n        checked={THEME_COLOUR.DARK === props.themeShade}\n        onChange={() => {\n          props.dispatch({type: 'SHADE', themeShade: THEME_COLOUR.DARK});\n        }}\n      />\n      Dark\n    </label>\n    <label htmlFor=\"light\">\n      <input\n        name=\"shade\"\n        type=\"radio\"\n        id=\"light\"\n        value={THEME_COLOUR.LIGHT}\n        checked={THEME_COLOUR.LIGHT === props.themeShade}\n        onChange={() => {\n          props.dispatch({type: 'SHADE', themeShade: THEME_COLOUR.LIGHT});\n        }}\n      />\n      Light\n    </label>\n  </section>\n);\n\nexport default ShadeChoice;\n","import React, {useEffect, useReducer, useRef, useCallback} from 'react';\r\n\r\nimport Console from 'components/Console/Console';\r\nimport ThemeList from 'components/ThemeList/ThemeList';\r\nimport ThemeSelect from 'components/ThemeSelect/ThemeSelect';\r\nimport Header from 'components/Header/Header';\r\nimport ShadeChoice from 'components/ShadeChoice/ShadeChoice';\r\nimport themeJson from 'colour-schemes.json';\r\nimport css from './Home.module.css';\r\nimport {\r\n  homeReducer,\r\n  initialState,\r\n  screenSizeObserver,\r\n  THEME_COLOUR,\r\n  assignColourType,\r\n  returnInitialTheme,\r\n} from './homeMethods';\r\nimport {themeType} from 'types';\r\n\r\nconst Home: React.FC = () => {\r\n  const sidebarRef = useRef<HTMLElement>(null);\r\n  const [state, dispatch] = useReducer(homeReducer, {\r\n    ...initialState,\r\n    ...{isSmallScreenSize: window.innerWidth < 768},\r\n  });\r\n  const initialTheme = returnInitialTheme();\r\n  const scrollToLabel = useCallback((): void => {\r\n    // scroll to the initialTheme, if used\r\n\r\n    if (\r\n      initialTheme != null &&\r\n      window.innerWidth >= 768 &&\r\n      sidebarRef.current != null\r\n    ) {\r\n      const labelEl = sidebarRef.current.querySelector(\r\n        `[for=\"${initialTheme}\"]`\r\n      );\r\n      if (labelEl != null) {\r\n        const labelElDimensions = labelEl.getBoundingClientRect();\r\n        const sidebarViewHeight = sidebarRef.current.offsetHeight;\r\n        const sidebarScrollHeight = sidebarRef.current.scrollHeight;\r\n        sidebarRef.current.scrollTop =\r\n          labelElDimensions.top > sidebarScrollHeight - sidebarViewHeight\r\n            ? labelElDimensions.top\r\n            : labelElDimensions.top - sidebarViewHeight / 2;\r\n      }\r\n    }\r\n  }, []);\r\n  useEffect(() => {\r\n    const themes = themeJson as themeType[];\r\n    dispatch({\r\n      type: 'LOAD',\r\n      themes: assignColourType(themes),\r\n      initialTheme: initialTheme,\r\n    });\r\n    const resizer = screenSizeObserver(dispatch);\r\n    resizer.observe(document.body);\r\n    return () => {\r\n      resizer.unobserve(document.body);\r\n    };\r\n  }, []);\r\n  const theme = state.themes.find((theme) => theme.name === state.activeTheme);\r\n  const themeNames = state.filteredThemes.map((theme) => theme.name);\r\n  return (\r\n    <section className={css.container}>\r\n      <aside\r\n        ref={sidebarRef}\r\n        style={{\r\n          background: state.backgroundColour,\r\n        }}\r\n        className={`${css.sidebar} ${\r\n          state.themeShade === THEME_COLOUR.DARK ? css.dark : css.light\r\n        }`}\r\n      >\r\n        <Header primaryColour={state.primaryColour} />\r\n        <ShadeChoice dispatch={dispatch} themeShade={state.themeShade} />\r\n        {!state.isSmallScreenSize ? (\r\n          /**\r\n           * this length check is just to make sure when the ThemeList loads it will have themes\r\n           * it needs to do this to make the scrollToLabel function work when the component loads\r\n           */\r\n          themeNames.length > 0 && (\r\n            <ThemeList\r\n              themeNames={themeNames}\r\n              activeTheme={state.activeTheme}\r\n              dispatch={dispatch}\r\n              primaryColour={state.primaryColour}\r\n              backgroundColour={state.backgroundColour}\r\n              scrollToLabel={scrollToLabel}\r\n            />\r\n          )\r\n        ) : (\r\n          <ThemeSelect\r\n            themeNames={themeNames}\r\n            activeTheme={state.activeTheme}\r\n            dispatch={dispatch}\r\n          />\r\n        )}\r\n      </aside>\r\n      <section className={css.content}>\r\n        <Console\r\n          theme={theme}\r\n          primaryColour={state.primaryColour}\r\n          backgroundColour={state.backgroundColour}\r\n        />\r\n      </section>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\n\nimport Home from 'components/Home/Home';\n\nconst App: React.FC = () => {\n  return <Home />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Home_container__nWlbU\",\"sidebar\":\"Home_sidebar__2ovA5\",\"content\":\"Home_content__1T6Qf\",\"light\":\"Home_light__2G6mS\",\"dark\":\"Home_dark__3UboT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ThemeList_container__uUIR5\",\"theme\":\"ThemeList_theme__32ST6\",\"label\":\"ThemeList_label__UKr3W\",\"active\":\"ThemeList_active__1cVNb\"};"],"sourceRoot":""}