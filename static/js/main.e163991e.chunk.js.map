{"version":3,"sources":["components/Toast/Toast.module.css","components/ColourTest/ColourTest.module.css","components/Home/Home.module.css","components/Skeleton/Skeleton.module.css","components/ThemePreview/ThemePreview.module.css","components/ConsoleTest/ConsoleTest.module.css","components/ThemeSelect/ThemeSelect.module.css","components/ThemePreview/consoleMethods.ts","components/ColourTest/ColourTest.tsx","components/ConsoleTest/codeblocks.ts","components/ConsoleTest/ConsoleTest.tsx","components/ConsoleTest/methods.tsx","components/Toast/Toast.tsx","Icons.tsx","components/ThemePreview/ThemePreviewButtons.tsx","components/Toggle/Toggle.tsx","components/Toggle/Toggles.tsx","components/ThemeSelect/ThemeSelect.tsx","components/ThemePreview/ThemePreview.tsx","components/Toolbar/Toolbar.tsx","components/Home/homeMethods.ts","utils/setcolours.ts","components/Home/homeState.ts","components/Home/Home.tsx","components/Skeleton/Skeleton.tsx","components/More/MoreContent.tsx","App.tsx","serviceWorker.ts","index.tsx","components/More/More.module.css","components/Toggle/Toggle.module.css","components/Toolbar/Toolbar.module.css"],"names":["module","exports","backgroundKeys","textKeys","validKeys","initThemeObj","name","black","red","green","yellow","blue","purple","cyan","white","brightBlack","brightRed","brightGreen","brightYellow","brightBlue","brightPurple","brightCyan","brightWhite","background","foreground","selectionBackground","cursorColor","ColourTest","props","className","css","matrix","data-testid","map","textKey","i","backgroundKey","y","key","cell","style","theme","color","codeblocks","id","markup","defaultColour","defaultCodeblock","ConsoleTest","useState","tab","setTab","activeCodeblock","find","codeblock","container","terminal","isDark","light","titlebar","tabs","active","radio","type","value","checked","onChange","htmlFor","code","split","string","matches","matchAll","colours","length","contents","undefined","Toast","isActive","title","message","Share","xmlns","height","size","width","viewBox","aria-labelledby","onClick","stroke","colour","backgroundColor","backgroundColour","transform","d","fill","Copy","Light","outlineColor","Dark","Colours","Console","Arrow","direction","Logo","x2","y2","originalArr","offset","Math","floor","stopColor","attributeName","values","arr","index","join","slice","dur","repeatCount","ThemePreviewButton","testid","button","primary","children","ThemePreviewButtons","buttons","handleCopy","icon","handleShare","getComputedStyle","document","documentElement","getPropertyValue","Toggle","option","isSelected","currentValue","label","dispatch","payload","outline","shadeValues","previewValues","Toggles","themeShade","previewType","ThemeSelect","tabIndex","arrow","ref","themeselectRef","select","activeTheme","e","preventDefault","target","themeNames","themeName","toastmessages","themename","initialState","reducer","state","action","immer","draftState","ThemePreview","useReducer","isSmallScreenSize","toggles","clipboard","JSON","stringify","reduce","acc","setTimeout","window","location","origin","pathname","encodeURIComponent","Toolbar","href","logo","returnInitialTheme","search","URLSearchParams","get","stopSelectDetection","current","activeElement","blur","root","cssvarDark","cssvarLight","setcolours","Object","entries","forEach","val","setProperty","THEME_COLOUR","themes","filteredThemes","innerWidth","homeReducer","initialTheme","foundTheme","filter","currentIndex","findIndex","isMoreOpen","Home","useRef","useEffect","resizer","ResizeObserver","contentRect","screenSizeObserver","observe","body","unobserve","shortcutFns","shortcuts","addEventListener","removeEventListener","stringyTheme","useMemo","sort","random","sampleColours","parse","content","Skeleton","MoreSection","section","heading","hr","MoreContent","role","aria-label","downloadAllThemes","App","setThemes","a","fetch","res","json","then","backupthemes","default","getThemes","themeBlob","Blob","saveAs","autoBom","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e163991e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Toast_container__1J5KY\",\"active\":\"Toast_active__2tk5g\",\"title\":\"Toast_title__3tgaR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"matrix\":\"ColourTest_matrix__F0HjV\",\"cell\":\"ColourTest_cell__20yhV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Home_container__1GjCc\",\"sidebar\":\"Home_sidebar__nbUf_\",\"content\":\"Home_content__1Mx1c\",\"title\":\"Home_title__3pCQy\",\"light\":\"Home_light__34rtq\",\"dark\":\"Home_dark__1Clm1\",\"actions\":\"Home_actions__2ne28\",\"buttons\":\"Home_buttons__2UQms\",\"help\":\"Home_help__1KY-J\",\"git\":\"Home_git__25kkv\",\"download\":\"Home_download__3z9fY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Skeleton_container__rG00n\",\"logo\":\"Skeleton_logo__18o8T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ThemePreview_container__1-U8v\",\"loading\":\"ThemePreview_loading__pKpCG\",\"buttons\":\"ThemePreview_buttons__3oSxA\",\"button\":\"ThemePreview_button__226iX\",\"primary\":\"ThemePreview_primary__t_L18\",\"toggles\":\"ThemePreview_toggles__2K-qU\",\"select\":\"ThemePreview_select__E3kJP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ConsoleTest_container__xPJd9\",\"terminal\":\"ConsoleTest_terminal__WHzsX\",\"light\":\"ConsoleTest_light__7fhT-\",\"titlebar\":\"ConsoleTest_titlebar__3rT1E\",\"tabs\":\"ConsoleTest_tabs__2pKB7\",\"tab\":\"ConsoleTest_tab__AkTaj\",\"radio\":\"ConsoleTest_radio__2WhHB\",\"active\":\"ConsoleTest_active__XtGdk\",\"code\":\"ConsoleTest_code__39eEx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ThemeSelect_container__3XHSu\",\"label\":\"ThemeSelect_label__2vW_I\",\"select\":\"ThemeSelect_select__1-VpH\",\"arrow\":\"ThemeSelect_arrow__2C4NM\",\"direction\":\"ThemeSelect_direction__3Q9ud\"};","import {\n  backgroundKeyType,\n  textKeyType,\n  validThemeType,\n  themeType,\n  validKeysType,\n} from 'types';\n\nexport const backgroundKeys: backgroundKeyType[] = [\n  'background',\n  'black',\n  'red',\n  'green',\n  'yellow',\n  'blue',\n  'purple',\n  'cyan',\n  'white',\n  'background',\n];\n\nexport const textKeys: textKeyType[] = [\n  'black',\n  'brightBlack',\n  'red',\n  'brightRed',\n  'green',\n  'brightGreen',\n  'yellow',\n  'brightYellow',\n  'blue',\n  'brightBlue',\n  'purple',\n  'brightPurple',\n  'cyan',\n  'brightCyan',\n  'white',\n  'brightWhite',\n];\n\nexport const validKeys: validKeysType = [\n  'name',\n  'black',\n  'red',\n  'green',\n  'yellow',\n  'blue',\n  'purple',\n  'cyan',\n  'white',\n  'brightBlack',\n  'brightRed',\n  'brightGreen',\n  'brightYellow',\n  'brightBlue',\n  'brightPurple',\n  'brightCyan',\n  'brightWhite',\n  'background',\n  'foreground',\n  'selectionBackground',\n  'cursorColor',\n];\n\n// this just keeps Typescript happy\nconst initThemeObj = {\n  name: '',\n  black: '',\n  red: '',\n  green: '',\n  yellow: '',\n  blue: '',\n  purple: '',\n  cyan: '',\n  white: '',\n  brightBlack: '',\n  brightRed: '',\n  brightGreen: '',\n  brightYellow: '',\n  brightBlue: '',\n  brightPurple: '',\n  brightCyan: '',\n  brightWhite: '',\n  background: '',\n  foreground: '',\n  selectionBackground: '',\n  cursorColor: '',\n};\n\nexport const parseValidKeys = (theme: themeType): validThemeType => {\n  return validKeys.reduce(\n    (acc, key) => ({\n      ...acc,\n      ...{\n        [key]: theme[key],\n      },\n    }),\n    initThemeObj\n  );\n};\n","import React from 'react';\n\nimport {themeType} from 'types';\nimport css from './ColourTest.module.css';\nimport {backgroundKeys, textKeys} from 'components/ThemePreview/consoleMethods';\n\ntype PropsType = {\n  theme: themeType;\n};\n\nconst ColourTest: React.FC<PropsType> = (props) => {\n  return (\n    <section className={css.matrix} data-testid=\"colourtest\">\n      {textKeys.map((textKey, i) =>\n        backgroundKeys.map((backgroundKey, y) => (\n          <div\n            key={i + ' ' + y}\n            className={css.cell}\n            style={{\n              background: props.theme ? props.theme[backgroundKey] : '',\n              color: props.theme ? props.theme[textKey] : '',\n            }}\n          >\n            gYw\n          </div>\n        ))\n      )}\n    </section>\n  );\n};\n\nexport default ColourTest;\n","import {textKeyType} from 'types';\n\nexport type codeblocksType = {\n  name: string;\n  markup: string;\n  defaultColour: textKeyType | 'foreground' | 'background';\n  id: string;\n};\n\nconst codeblocks: codeblocksType[] = [\n  {\n    id: 'cra/compiled',\n    name: 'CRA - compiled',\n    markup: `<green>Compiled successfully!</green>\n\nYou can now view <bold>terminal</bold> in the browser. \n\n  <bold>Local:</bold>           http://localhost:<bold>3000</bold>/themes\n  <bold>On Your Network:</bold> http://192.168.86.37:<bold>3000</bold>/themes \n  \nNote that the development build is not\noptimized. \nTo create a production build, use <cyan>yarn build</cyan>.`,\n    defaultColour: 'foreground',\n  },\n  {\n    id: 'cypress/run',\n    name: 'Cypress - run',\n    markup: `<foreground>Running:</foreground>  <brightBlack>themes.spec.js                            (1 of 1)</brightBlack>\n\n<foreground>Windows Terminal Themes - big screen</foreground>\n<cyan>- should download all themes using download button</cyan>\n<green>√</green> should show dark theme by default <red>(705ms)</red>\n    \n<green>(</green><brightGreen>Results</brightGreen><green>)</green>\n\n┌──────────────────────────────────────────────────────────┐\n│ Tests:        <green>18</green>                                         │\n│ Duration:     <green>10 seconds</green>                                 │\n│ Spec Ran:     <green>themes.spec.js</green>                             │\n└──────────────────────────────────────────────────────────┘\n`,\n    defaultColour: 'brightBlack',\n  },\n  {\n    id: 'jest/failed',\n    name: 'Jest - failed',\n    markup: `<foreground:brightRed> FAIL </foreground:brightRed> src/components/Home/Home.test.js (<white:red>17.523s</white:red>)\n  <red>● should return theme name from search params</red>\n  \n  expect(<red>received</red>).toBe(<green>expected</green>) // Object.is equality\n  \n    Expected: <green>\"synthwave-everything</green><background:brightGreen>error\"</background:brightGreen>\n    Received: <red>\"synthwave-everything\"</red>\n    \n        218 |\n        219 | it(<green>'should return theme name from search params'</green>, () <yellow>=></yellow> {\n      > 220 |   expect(returnInitialTheme(<brightGreen>'?theme=synthwave-everything'</brightGreen>)).toBe(\n            |                                                             ^\n        221 |     <green>'synthwave-everythingerror'</green>\n        222 |   );\n        223 |   expect(returnInitialTheme(<green>'?wrong=synthwave-everything'</green>)).toBe(<cyan>null</cyan>);\n        \n        at Object.toBe (<cyan>src/components/Home/Home.test.js</cyan>:220:61)\n  \n<bold>Test Suites:</bold> <brightRed>1 failed</brightRed>, <brightGreen>1 passed</brightGreen>, 2 total\n<bold>Tests:</bold>       <brightRed>1 failed</brightRed>, <brightYellow>4 skipped</brightYellow>, <brightGreen>2 passed</brightGreen>, 7 total\n<bold>Snapshots:</bold>   0 total\n<bold>Time:</bold>        <brightYellow>22.5s</brightYellow>\nRan all test suites.\n\nWatch Usage: Press w to show more.\n    `,\n    defaultColour: 'white',\n  },\n  {\n    id: 'jest/runnning',\n    name: 'Jest - running',\n    markup: `<brightBlack:brightYellow>  RUNS  </brightBlack:brightYellow> src/components/Home/<bold>Home.test.js</bold>\n<brightBlack:brightYellow>  RUNS  </brightBlack:brightYellow> src/<bold>App.test.tsx</bold>\n    \n<bold>Test Suites:</bold> 0 of 2 total\n<bold>Tests:</bold>       0 total\n<bold>Snapshots:</bold>   0 total\n<bold>Time:</bold>        4s\n\n<background:green>         </background:green><background:foreground>                             </background:foreground>\n\n    `,\n    defaultColour: 'foreground',\n  },\n];\n\nexport default codeblocks;\n","import React, {useState} from 'react';\r\n\r\nimport css from './ConsoleTest.module.css';\r\nimport {themeType} from 'types';\r\nimport codeblocks, {codeblocksType} from './codeblocks';\r\nimport {parseSyntax} from './methods';\r\n\r\ntype PropsType = {\r\n  theme: themeType;\r\n};\r\n\r\nconst defaultCodeblock: codeblocksType = {\r\n  defaultColour: 'foreground',\r\n  markup: '',\r\n  id: 'default',\r\n  name: 'default',\r\n};\r\n\r\nconst ConsoleTest: React.FC<PropsType> = (props) => {\r\n  const [tab, setTab] = useState(codeblocks[0].id);\r\n  const activeCodeblock =\r\n    codeblocks.find((codeblock) => codeblock.id === tab) ?? defaultCodeblock;\r\n  return (\r\n    <section className={css.container} data-testid=\"consoletest\">\r\n      <div\r\n        className={`${css.terminal}  ${!props.theme.isDark ? css.light : ''}`}\r\n      >\r\n        <div className={css.titlebar}>\r\n          <div className={css.tabs}>\r\n            {codeblocks.map((codeblock) => (\r\n              <div\r\n                key={codeblock.id}\r\n                className={`${css.tab} ${\r\n                  tab === codeblock.id ? css.active : ''\r\n                }`}\r\n              >\r\n                <input\r\n                  className={css.radio}\r\n                  id={codeblock.id}\r\n                  name=\"tab\"\r\n                  type=\"radio\"\r\n                  value={codeblock.id}\r\n                  checked={codeblock.id === activeCodeblock.id}\r\n                  onChange={() => {\r\n                    setTab(codeblock.id);\r\n                  }}\r\n                />\r\n                <label htmlFor={codeblock.id}>\r\n                  <span>{codeblock.name}</span>\r\n                </label>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <code\r\n          data-testid=\"markup\"\r\n          className={css.code}\r\n          style={{\r\n            color: props.theme[(props.theme, activeCodeblock.defaultColour)],\r\n          }}\r\n        >\r\n          {parseSyntax(props.theme, activeCodeblock.markup)}\r\n        </code>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ConsoleTest;\r\n","import React from 'react';\n\nimport {validKeys} from 'components/ThemePreview/consoleMethods';\nimport {themeType, textKeyType} from 'types';\n\nexport const parseSyntax = (\n  theme: themeType,\n  markup: string\n): (string | JSX.Element)[] => {\n  const throwErrors =\n    process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'test';\n  return markup.split(/(<[^/>]+?>[^<]+<[^>]+?>)/g).map((string, i) => {\n    const matches = [...string.matchAll(/<(.+?)>(.+)<\\/(.+)>/g)][0];\n    if (matches != null) {\n      if (throwErrors && matches[1] !== matches[3]) {\n        throw new Error(\n          `Opening tag <${matches[1]}> does not match closing tag </${matches[3]}>`\n        );\n      }\n      const colours = matches[1].split(':');\n      // check bold in case Windows Terminal ever properly adds bold\n      // in the meantime, default to just foreground\n      const foreground =\n        colours[0] === 'bold' ? 'foreground' : (colours[0] as textKeyType);\n      const background =\n        colours.length > 0 ? (colours[1] as textKeyType) : null;\n      if (\n        throwErrors &&\n        (!validKeys.includes(foreground) ||\n          (background && !validKeys.includes(background)))\n      ) {\n        throw new Error(\n          `Using invalid tags: <${matches[1]}>${matches[2]}</${matches[3]}>`\n        );\n      }\n      const contents = matches[2];\n      return (\n        <span\n          key={i}\n          style={{\n            color: theme[foreground],\n            background: background ? theme[background] : undefined,\n          }}\n        >\n          {contents}\n        </span>\n      );\n    }\n    if (throwErrors && string.match(/<(.+?)>(.+)<(.+)>/g)) {\n      throw new Error(\n        `Found invalid tags: ${string}. \\n Are they formatted correctly?`\n      );\n    }\n\n    return string;\n  }, []);\n};\n","import React from 'react';\nimport css from './Toast.module.css';\n\ntype ToastType = {\n  title: string;\n  isActive: boolean;\n  message: string;\n  background: string;\n};\n\nconst Toast = (props: ToastType): JSX.Element => (\n  <section className={`${css.container} ${props.isActive ? css.active : ''}`}>\n    <div className={css.title}>{props.message}</div>\n  </section>\n);\n\nexport default Toast;\n","import React from 'react';\n\ntype IconProps = {\n  colour?: string;\n  backgroundColour?: string;\n  size?: string;\n  onClick?: () => void;\n  className?: string;\n  direction?: 'up' | 'down' | 'left' | 'right';\n};\n\nexport const Share = (props: IconProps): JSX.Element => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    height={props.size || '18px'}\n    width={props.size || '18px'}\n    viewBox=\"0 0 24 24\"\n    aria-labelledby=\"share\"\n    onClick={props.onClick}\n    className={props.className}\n    style={{\n      stroke: props.colour,\n      backgroundColor: props.backgroundColour,\n      transform: 'scaleX(-1)',\n    }}\n  >\n    <title id=\"share\">Share theme</title>\n    <path\n      d=\"M10 9V5l-7 7 7 7v-4.1c5 0 8.5 1.6 11 5.1-1-5-4-10-11-11z\"\n      fill={props.colour}\n    />\n  </svg>\n);\n\nexport const Copy = (props: IconProps): JSX.Element => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    height={props.size || '18px'}\n    width={props.size || '18px'}\n    viewBox=\"0 0 24 24\"\n    aria-labelledby=\"copy\"\n    onClick={props.onClick}\n    className={props.className}\n    style={{\n      stroke: props.colour,\n      backgroundColor: props.backgroundColour,\n    }}\n  >\n    <title id=\"copy\">Copy theme</title>\n    <path\n      fill={props.colour}\n      d=\"M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm-1 4l6 6v10c0 1.1-.9 2-2 2H7.99C6.89 23 6 22.1 6 21l.01-14c0-1.1.89-2 1.99-2h7zm-1 7h5.5L14 6.5V12z\"\n    />\n  </svg>\n);\n\nexport const Download = (props: IconProps): JSX.Element => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    height={props.size || '24px'}\n    width={props.size || '24px'}\n    viewBox=\"0 0 24 24\"\n    aria-labelledby=\"download\"\n    onClick={props.onClick}\n    className={props.className}\n    style={{\n      stroke: props.colour,\n    }}\n  >\n    <title id=\"download\">Download all the themes</title>\n    <path d=\"M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z\" fill={props.colour} />\n  </svg>\n);\n\nexport const Light = (props: IconProps): JSX.Element => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    height={props.size || '24px'}\n    width={props.size || '24px'}\n    viewBox=\"0 0 24 24\"\n    aria-labelledby=\"light-themes\"\n    onClick={props.onClick}\n    className={props.className}\n    style={{\n      stroke: props.colour,\n      outlineColor: props.colour,\n    }}\n  >\n    <title id=\"light-themes\">Select light themes</title>\n    <path\n      d=\"M20 15.31L23.31 12 20 8.69V4h-4.69L12 .69 8.69 4H4v4.69L.69 12 4 15.31V20h4.69L12 23.31 15.31 20H20v-4.69zM12 18c-3.31 0-6-2.69-6-6s2.69-6 6-6 6 2.69 6 6-2.69 6-6 6z\"\n      fill={props.colour}\n    />\n  </svg>\n);\n\nexport const Dark = (props: IconProps): JSX.Element => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    height={props.size || '24px'}\n    width={props.size || '24px'}\n    viewBox=\"0 0 24 24\"\n    aria-labelledby=\"dark-themes\"\n    onClick={props.onClick}\n    className={props.className}\n    style={{\n      stroke: props.colour,\n      outlineColor: props.colour,\n    }}\n  >\n    <title id=\"dark-themes\">Select dark themes</title>\n    <path\n      d=\"M10 2c-1.82 0-3.53.5-5 1.35C7.99 5.08 10 8.3 10 12s-2.01 6.92-5 8.65C6.47 21.5 8.18 22 10 22c5.52 0 10-4.48 10-10S15.52 2 10 2z\"\n      fill={props.colour}\n    />\n  </svg>\n);\n\nexport const Colours = (props: IconProps): JSX.Element => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    height={props.size || '24px'}\n    width={props.size || '24px'}\n    viewBox=\"0 0 24 24\"\n    aria-labelledby=\"colours-preview\"\n    onClick={props.onClick}\n    className={props.className}\n    style={{\n      stroke: props.colour,\n      outlineColor: props.colour,\n    }}\n  >\n    <title id=\"colours-preview\">Select colours test preview</title>\n    <path\n      d=\"M12 3c-4.97 0-9 4.03-9 9s4.03 9 9 9c.83 0 1.5-.67 1.5-1.5 0-.39-.15-.74-.39-1.01-.23-.26-.38-.61-.38-.99 0-.83.67-1.5 1.5-1.5H16c2.76 0 5-2.24 5-5 0-4.42-4.03-8-9-8zm-5.5 9c-.83 0-1.5-.67-1.5-1.5S5.67 9 6.5 9 8 9.67 8 10.5 7.33 12 6.5 12zm3-4C8.67 8 8 7.33 8 6.5S8.67 5 9.5 5s1.5.67 1.5 1.5S10.33 8 9.5 8zm5 0c-.83 0-1.5-.67-1.5-1.5S13.67 5 14.5 5s1.5.67 1.5 1.5S15.33 8 14.5 8zm3 4c-.83 0-1.5-.67-1.5-1.5S16.67 9 17.5 9s1.5.67 1.5 1.5-.67 1.5-1.5 1.5z\"\n      fill={props.colour}\n    />\n  </svg>\n);\n\nexport const Console = (props: IconProps): JSX.Element => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    height={props.size || '24px'}\n    width={props.size || '24px'}\n    viewBox=\"0 0 24 24\"\n    aria-labelledby=\"codeblock-preview\"\n    onClick={props.onClick}\n    className={props.className}\n    style={{\n      stroke: props.colour,\n      outlineColor: props.colour,\n    }}\n  >\n    <title id=\"codeblock-preview\">Select codeblock preview</title>\n    <path\n      d=\"M9.4 16.6L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4zm5.2 0l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4z\"\n      fill={props.colour}\n    />\n  </svg>\n);\n\nexport const Github = (props: IconProps): JSX.Element => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    height={props.size || '24px'}\n    width={props.size || '24px'}\n    viewBox=\"0 0 16 16\"\n    aria-labelledby=\"github-icon\"\n    onClick={props.onClick}\n    className={props.className}\n    style={{\n      outlineColor: props.colour,\n    }}\n  >\n    <title id=\"github-icon\">Github repo link</title>\n    <path\n      d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z\"\n      fill={props.colour}\n    />\n  </svg>\n);\n\nexport const Help = (props: IconProps): JSX.Element => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    height={props.size || '24px'}\n    width={props.size || '24px'}\n    viewBox=\"0 0 24 24\"\n    aria-labelledby=\"help-icon\"\n    onClick={props.onClick}\n    className={props.className}\n    style={{\n      outlineColor: props.colour,\n    }}\n  >\n    <title id=\"help-icon\">Show the help section</title>\n    <path\n      d=\"M11 18h2v-2h-2v2zm1-16C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm0-14c-2.21 0-4 1.79-4 4h2c0-1.1.9-2 2-2s2 .9 2 2c0 2-3 1.75-3 5h2c0-2.25 3-2.5 3-5 0-2.21-1.79-4-4-4z\"\n      fill={props.colour}\n    />\n  </svg>\n);\n\nexport const Arrow = (props: IconProps): JSX.Element => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    height={props.size || '24px'}\n    width={props.size || '24px'}\n    viewBox=\"0 0 24 24\"\n    aria-labelledby={props.direction === 'right' ? 'arrow-right' : 'arrow-left'}\n    onClick={props.onClick}\n    className={props.className}\n    style={{\n      outlineColor: props.colour,\n      transform: props.direction === 'right' ? 'scaleX(-1)' : '',\n    }}\n  >\n    {props.direction === 'right' ? (\n      <title id=\"arrow-right\">{'Show next theme'}</title>\n    ) : (\n      <title id=\"arrow-left\">{'Show previous theme'}</title>\n    )}\n    <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n    <path\n      d=\"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z\"\n      fill={props.colour}\n    />\n  </svg>\n);\n\nconst iterateColours = (arr: string[], index: number): string => {\n  if (index === 0) {\n    return [...arr, arr[0]].join(';');\n  }\n  return [...arr.slice(index), ...arr.slice(0, index - 1), arr[index]].join(\n    ';'\n  );\n};\n\ntype LogoType = {\n  colours: string[];\n};\n\nexport const Logo = (props: IconProps & LogoType): JSX.Element => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    height={props.size || '24px'}\n    width={props.size || '24px'}\n    viewBox=\"0 0 512 512\"\n    aria-labelledby=\"logo\"\n    onClick={props.onClick}\n    className={props.className}\n    style={{\n      outlineColor: props.colour,\n    }}\n  >\n    <defs>\n      <linearGradient id=\"logo-gradient\" x2=\"0.35\" y2=\"1\">\n        {props.colours.map(\n          (colour: string, i, originalArr): JSX.Element => (\n            <stop\n              key={i}\n              offset={`${Math.floor((i / (originalArr.length - 1)) * 100)}%`}\n              stopColor={colour}\n            >\n              <animate\n                attributeName=\"stop-color\"\n                values={iterateColours(originalArr, i)}\n                dur=\"4s\"\n                repeatCount=\"indefinite\"\n              ></animate>\n            </stop>\n          )\n        )}\n      </linearGradient>\n    </defs>\n    <title id=\"logo\">Logo for Windows Terminal Themes</title>\n    <path\n      fill=\"url(#logo-gradient)\"\n      d=\"M495.304 61.217H16.696C7.475 61.217 0 68.693 0 77.913v356.174c0 9.22 7.475 16.696 16.696 16.696h478.609c9.22 0 16.696-7.475 16.696-16.696V77.913c-.001-9.22-7.476-16.696-16.697-16.696zm-16.695 356.174H33.391V194.424h445.217v222.967zm0-256.358H33.391V94.609h445.217v66.424z\"\n    />\n    <path\n      fill=\"url(#logo-gradient)\"\n      d=\"M443.568 103.247c-12.275 0-22.261 9.986-22.261 22.261 0 12.275 9.985 22.261 22.261 22.261 12.275 0 22.261-9.986 22.261-22.261 0-12.275-9.986-22.261-22.261-22.261zM382.926 103.247c-12.275 0-22.261 9.986-22.261 22.261 0 12.275 9.986 22.261 22.261 22.261s22.261-9.986 22.261-22.261c0-12.275-9.986-22.261-22.261-22.261zM322.285 103.247c-12.275 0-22.261 9.986-22.261 22.261 0 12.275 9.985 22.261 22.261 22.261 12.275 0 22.261-9.986 22.261-22.261 0-12.275-9.986-22.261-22.261-22.261zM235.45 293.193l-54.653-46.504c-7.022-5.976-17.559-5.128-23.535 1.896-5.976 7.022-5.127 17.559 1.896 23.535l39.709 33.789-39.709 33.789c-7.023 5.976-7.871 16.512-1.896 23.535 5.975 7.022 16.512 7.871 23.535 1.896l54.653-46.504c7.83-6.663 7.83-18.771 0-25.432zM342.022 335.716h-65.954c-9.22 0-16.696 7.475-16.696 16.696s7.475 16.696 16.696 16.696h65.954c9.22 0 16.696-7.475 16.696-16.696s-7.476-16.696-16.696-16.696z\"\n    />\n  </svg>\n);\n","import React from 'react';\n\nimport css from './ThemePreview.module.css';\nimport {Share, Copy} from 'Icons';\n\ntype ThemePreviewButtonType = {\n  onClick: () => void;\n  type?: string;\n  testid: string;\n};\n\nconst ThemePreviewButton: React.FC<ThemePreviewButtonType> = (props) => {\n  return (\n    <button\n      data-testid={props.testid}\n      className={`${css.button} ${props.type === 'primary' ? css.primary : ''}`}\n      onClick={() => {\n        props.onClick();\n      }}\n    >\n      {props.children}\n    </button>\n  );\n};\n\ntype ThemePreviewButtonsType = {\n  handleCopy: () => void;\n  handleShare: () => void;\n  themename: string;\n};\n\nconst ThemePreviewButtons = (props: ThemePreviewButtonsType): JSX.Element => (\n  <div className={css.buttons}>\n    <ThemePreviewButton\n      testid=\"copyButton\"\n      type=\"primary\"\n      onClick={props.handleCopy}\n    >\n      <Copy className={css.icon} colour=\"#ededed\" />\n      Get theme\n    </ThemePreviewButton>\n    <ThemePreviewButton testid=\"shareButton\" onClick={props.handleShare}>\n      <Share\n        className={css.icon}\n        colour={getComputedStyle(document.documentElement).getPropertyValue(\n          '--btn__colour'\n        )}\n      />\n      Share theme\n    </ThemePreviewButton>\n  </div>\n);\n\nexport default ThemePreviewButtons;\n","import React, {ReactElement} from 'react';\n\nimport {actionTypes} from 'types';\nimport css from './Toggle.module.css';\n\ntype PropsState = {\n  values: {\n    value: string;\n    label: string;\n    icon: (isChecked: boolean) => ReactElement;\n  }[];\n  currentValue: string;\n  type: string;\n  dispatch: React.Dispatch<actionTypes>;\n};\n\nconst Toggle: React.FC<PropsState> = (props) => (\n  <section className={css.container}>\n    {props.values.map((option) => {\n      const isSelected = option.value === props.currentValue;\n      return (\n        <label\n          key={option.value}\n          className={`${css.label} ${isSelected ? css.active : ''}`}\n          htmlFor={option.value}\n        >\n          <input\n            name={props.type}\n            type=\"radio\"\n            id={option.value}\n            value={option.value}\n            checked={isSelected}\n            onChange={() => {\n              props.dispatch({\n                type: props.type,\n                payload: option.value,\n              });\n            }}\n            className={css.radio}\n          />\n          <div className={css.outline}>\n            {option.icon(isSelected)}\n            {option.label}\n          </div>\n        </label>\n      );\n    })}\n  </section>\n);\n\nexport default Toggle;\n","import React from 'react';\r\n\r\nimport Toggle from 'components/Toggle/Toggle';\r\nimport {Console, Colours, Dark, Light} from 'Icons';\r\nimport {previewType, actionTypes, themeShadeType} from 'types';\r\n\r\n// TODO: shadeValues & previewValues is really ugly\r\nconst shadeValues = [\r\n  {\r\n    value: 'DARK',\r\n    label: 'Dark',\r\n    // eslint-disable-next-line react/display-name\r\n    icon: () => (\r\n      <Dark\r\n        size=\"18px\"\r\n        colour={document.documentElement.style.getPropertyValue(\r\n          '--toolbar__color'\r\n        )}\r\n      />\r\n    ),\r\n  },\r\n  {\r\n    value: 'LIGHT',\r\n    label: 'Light',\r\n    // eslint-disable-next-line react/display-name\r\n    icon: () => (\r\n      <Light\r\n        size=\"18px\"\r\n        colour={document.documentElement.style.getPropertyValue(\r\n          '--toolbar__color'\r\n        )}\r\n      />\r\n    ),\r\n  },\r\n];\r\n\r\nconst previewValues = [\r\n  {\r\n    value: 'console',\r\n    label: 'Terminal',\r\n    // eslint-disable-next-line react/display-name\r\n    icon: () => (\r\n      <Console\r\n        size=\"18px\"\r\n        colour={document.documentElement.style.getPropertyValue(\r\n          '--toolbar__color'\r\n        )}\r\n      />\r\n    ),\r\n  },\r\n  {\r\n    value: 'colour',\r\n    label: 'Colours',\r\n    // eslint-disable-next-line react/display-name\r\n    icon: () => (\r\n      <Colours\r\n        size=\"18px\"\r\n        colour={document.documentElement.style.getPropertyValue(\r\n          '--toolbar__color'\r\n        )}\r\n      />\r\n    ),\r\n  },\r\n];\r\n\r\ntype PropsType = {\r\n  themeShade: themeShadeType;\r\n  previewType: previewType;\r\n  dispatch: React.Dispatch<actionTypes>;\r\n};\r\n\r\nconst Toggles = (props: PropsType): JSX.Element => (\r\n  <>\r\n    <Toggle\r\n      currentValue={props.themeShade}\r\n      dispatch={props.dispatch}\r\n      type=\"SHADE\"\r\n      values={shadeValues}\r\n    />\r\n    <Toggle\r\n      currentValue={props.previewType}\r\n      dispatch={props.dispatch}\r\n      type=\"PREVIEW\"\r\n      values={previewValues}\r\n    />\r\n  </>\r\n);\r\n\r\nexport default Toggles;\r\n","/**\n * I made the direction buttons here <div> not <buttons>\n * so they don't get focused, but it's annoying on phones when repeatably clicking\n * the text gets selected\n * so can use tabindex=\"-1\"\n *\n */\nimport React from 'react';\n\nimport {actionTypes} from 'types';\nimport css from './ThemeSelect.module.css';\nimport {Arrow} from 'Icons';\n\ntype PropsType = {\n  themeNames: string[];\n  activeTheme: string;\n  dispatch: React.Dispatch<actionTypes>;\n  themeselectRef: React.MutableRefObject<null | HTMLSelectElement>;\n};\n\nconst ThemeSelect: React.FC<PropsType> = (props) => {\n  return (\n    <div className={css.container}>\n      <button\n        tabIndex={-1}\n        className={css.direction}\n        onClick={() => {\n          props.dispatch({type: 'PREV'});\n        }}\n      >\n        <Arrow\n          className={css.arrow}\n          colour={getComputedStyle(document.documentElement).getPropertyValue(\n            '--btn__colour'\n          )}\n          size=\"18px\"\n        />\n        Prev\n      </button>\n      <label className={css.label} htmlFor=\"theme-select\">\n        <span className=\"visually-hidden \">Select theme</span>\n        <select\n          data-testid=\"theme-list\"\n          ref={props.themeselectRef}\n          id=\"theme-select\"\n          className={css.select}\n          value={props.activeTheme}\n          onChange={(e) => {\n            e.preventDefault();\n            if (e.target) {\n              props.dispatch({type: 'SET', theme: e.target.value});\n            }\n          }}\n        >\n          {props.themeNames.map((themeName) => (\n            <option\n              data-testid=\"theme-option\"\n              value={themeName}\n              key={themeName}\n            >\n              {themeName}\n            </option>\n          ))}\n        </select>\n      </label>\n      <button\n        tabIndex={-1}\n        className={css.direction}\n        onClick={() => {\n          props.dispatch({type: 'NEXT'});\n        }}\n      >\n        Next\n        <Arrow\n          className={css.arrow}\n          direction=\"right\"\n          size=\"18px\"\n          colour={getComputedStyle(document.documentElement).getPropertyValue(\n            '--btn__colour'\n          )}\n        />\n      </button>\n    </div>\n  );\n};\n\nexport default ThemeSelect;\n","import React, {useReducer} from 'react';\nimport * as clipboard from 'clipboard-polyfill';\nimport immer from 'immer';\n\nimport ColourTest from 'components/ColourTest/ColourTest';\nimport ConsoleTest from 'components/ConsoleTest/ConsoleTest';\nimport {themeType, previewType} from 'types';\nimport css from './ThemePreview.module.css';\nimport {parseValidKeys} from './consoleMethods';\nimport Toast from 'components/Toast/Toast';\nimport ThemePreviewButtons from './ThemePreviewButtons';\nimport Toggles from 'components/Toggle/Toggles';\nimport ThemeSelect from 'components/ThemeSelect/ThemeSelect';\n\nimport {actionTypes, themeShadeType} from 'types';\n\ntype PropsType = {\n  theme?: themeType;\n  backgroundColour: string;\n  previewType: previewType;\n  isSmallScreenSize: boolean;\n  themeShade: themeShadeType;\n  dispatch: React.Dispatch<actionTypes>;\n  themeNames: string[];\n  activeTheme: string;\n  themeselectRef: React.MutableRefObject<null | HTMLSelectElement>;\n};\n\ntype reducerType = {\n  title: string;\n  isActive: boolean;\n  message: string;\n};\n\ntype actionType =\n  | {\n      type: 'show';\n      title: string;\n      message: string;\n    }\n  | {\n      type: 'hide';\n    };\n\nconst toastmessages = {\n  share: (themename: string) => `${themename} link added your clipboard`,\n  copy: (themename: string) => `${themename} theme added to your clipboard`,\n};\n\nconst initialState = {\n  isActive: false,\n  title: 'Title',\n  message: 'A message to be written here for me',\n};\n\nconst reducer = (state: reducerType, action: actionType): reducerType => {\n  return immer(state, (draftState: reducerType) => {\n    switch (action.type) {\n      case 'show':\n        draftState.title = action.title;\n        draftState.message = action.message;\n        draftState.isActive = true;\n        break;\n      case 'hide':\n        draftState.isActive = false;\n    }\n  });\n};\n\nconst ThemePreview: React.FC<PropsType> = (props) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  if (!props.theme) {\n    return null;\n  }\n  const handleCopy = (): void => {\n    if (!state.isActive && props.theme) {\n      dispatch({\n        type: 'show',\n        title: 'Copied!',\n        message: toastmessages.copy(props.theme.name),\n      });\n      clipboard.writeText(JSON.stringify(parseValidKeys(props.theme), null, 2));\n      setTimeout(() => {\n        dispatch({type: 'hide'});\n      }, 1000);\n    }\n  };\n  const handleShare = (): void => {\n    if (!state.isActive && props.theme) {\n      dispatch({\n        type: 'show',\n        title: 'Shared!',\n        message: toastmessages.share(props.theme.name),\n      });\n      clipboard.writeText(\n        `${window.location.origin}${\n          window.location.pathname\n        }?theme=${encodeURIComponent(props.theme.name)}`\n      );\n      setTimeout(() => {\n        dispatch({type: 'hide'});\n      }, 1000);\n    }\n  };\n  return (\n    <section className={css.container}>\n      {props.isSmallScreenSize && (\n        <div className={css.toggles}>\n          <Toggles\n            themeShade={props.themeShade}\n            previewType={props.previewType}\n            dispatch={props.dispatch}\n          />\n        </div>\n      )}\n      {props.previewType === 'colour' ? (\n        <ColourTest theme={props.theme} />\n      ) : (\n        <ConsoleTest theme={props.theme} />\n      )}\n      {props.isSmallScreenSize && (\n        <div className={css.select}>\n          <ThemeSelect\n            themeNames={props.themeNames}\n            dispatch={props.dispatch}\n            activeTheme={props.activeTheme}\n            themeselectRef={props.themeselectRef}\n          />\n        </div>\n      )}\n      <ThemePreviewButtons\n        themename={props.theme.name}\n        handleCopy={handleCopy}\n        handleShare={handleShare}\n      />\n      <Toast\n        background={props.backgroundColour}\n        title={state.title}\n        isActive={state.isActive}\n        message={state.message}\n      />\n    </section>\n  );\n};\n\nexport default ThemePreview;\n","// modules\nimport React from 'react';\n\n// components\nimport Toggles from 'components/Toggle/Toggles';\nimport ThemeSelect from 'components/ThemeSelect/ThemeSelect';\n\n// utils\nimport {Logo} from 'Icons';\nimport css from './Toolbar.module.css';\nimport {actionTypes, themeShadeType, previewType} from 'types';\n\ntype PropType = {\n  themeShade: themeShadeType;\n  previewType: previewType;\n  dispatch: React.Dispatch<actionTypes>;\n  themeNames: string[];\n  activeTheme: string;\n  themeselectRef: React.MutableRefObject<null | HTMLSelectElement>;\n  colours: string[];\n  isSmallScreenSize: boolean;\n};\n\nconst Toolbar = (props: PropType): JSX.Element => {\n  return (\n    <section className={css.container}>\n      <a href=\"/\" className={css.title}>\n        <Logo size=\"48px\" colours={props.colours} className={css.logo} />\n        <h1>Windows Terminal Themes</h1>\n      </a>\n      {!props.isSmallScreenSize && (\n        <div className={css.select}>\n          <ThemeSelect\n            themeNames={props.themeNames}\n            dispatch={props.dispatch}\n            activeTheme={props.activeTheme}\n            themeselectRef={props.themeselectRef}\n          />\n        </div>\n      )}\n      {!props.isSmallScreenSize && (\n        <div className={css.toggles}>\n          <Toggles\n            themeShade={props.themeShade}\n            previewType={props.previewType}\n            dispatch={props.dispatch}\n          />\n        </div>\n      )}\n    </section>\n  );\n};\n\nexport default Toolbar;\n","import ResizeObserver from 'resize-observer-polyfill';\nimport {actionTypes} from 'types';\n\ntype titleColoursType =\n  | 'black'\n  | 'red'\n  | 'green'\n  | 'yellow'\n  | 'blue'\n  | 'purple'\n  | 'cyan'\n  | 'white';\n\nexport const returnInitialTheme = (search: string): string | null => {\n  if (search.length > 0) {\n    const params = new URLSearchParams(search);\n    const themeName = params.get('theme');\n    if (themeName != null) {\n      return themeName;\n    }\n  }\n  return null;\n};\n\nexport const screenSizeObserver = (\n  dispatch: React.Dispatch<actionTypes>\n): ResizeObserver => {\n  return new ResizeObserver((entries: ResizeObserverEntry[]) => {\n    const {width} = entries[0].contentRect;\n    if (width >= 1024) {\n      dispatch({type: 'SIZE', isSmallScreenSize: false});\n    } else if (width < 1024) {\n      dispatch({type: 'SIZE', isSmallScreenSize: true});\n    }\n  });\n};\n\nconst stopSelectDetection = (\n  e: KeyboardEvent,\n  themeselectRef: React.MutableRefObject<null | HTMLSelectElement>\n): void => {\n  if (\n    themeselectRef.current != null &&\n    document.activeElement === themeselectRef.current\n  ) {\n    // if the DOM element is being focused, hitting D will\n    // select the first <option> starting with D\n    e.preventDefault();\n    themeselectRef.current.blur();\n  }\n};\n\nexport const shortcuts = (\n  dispatch: React.Dispatch<actionTypes>,\n  themeselectRef: React.MutableRefObject<null | HTMLSelectElement>\n) => (e: KeyboardEvent) => {\n  if (e.code === 'KeyA') {\n    stopSelectDetection(e, themeselectRef);\n    dispatch({\n      type: 'PREV',\n    });\n  }\n  if (e.code === 'KeyD') {\n    stopSelectDetection(e, themeselectRef);\n    dispatch({\n      type: 'NEXT',\n    });\n  }\n};\n\nexport const sampleColours = (theme: themeType | undefined): string[] => {\n  if (theme) {\n    return [\n      theme.red,\n      theme.green,\n      theme.yellow,\n      theme.blue,\n      theme.purple,\n      theme.cyan,\n    ]\n      .sort(() => Math.random() - 0.5)\n      .slice(3);\n  }\n  return [];\n};\n","import {shadeType} from 'types';\n\nconst root = document.documentElement;\n\ntype cssvarType = {\n  '--btn__bg-img': string;\n  '--btn__bg-border': string;\n  '--btn__colour': string;\n  '--btn__bg-img--hover': string;\n  '--btn__bg-color': string;\n  '--btn__border-colour__active': string;\n  '--btn__insert': string;\n  '--toolbar__color': string;\n  '--toolbar__background': string;\n  '--btn-primary__bg-img': string;\n  '--btn-primary__bg-img---hover': string;\n  '--btn-primary__colour': string;\n  '--link-colour': string;\n  '--link-colour--visited': string;\n  '--overlay-background': string;\n};\n\nconst cssvarDark: cssvarType = {\n  '--btn__bg-img': 'linear-gradient(-180deg, #535659 0%, #424549 90%)',\n  '--btn__bg-border': '1px solid rgba(200, 200, 200, 0.15)',\n  '--btn__colour': '#d6d8da',\n  '--btn__bg-img--hover': 'linear-gradient(-180deg, #535659, #535659 90%)',\n  '--btn__bg-color': '#404040',\n  '--btn__border-colour__active': 'rgba(200, 200, 200, 0.3)',\n  '--btn__insert': 'inset 0 0.15em 0.3em rgba(20, 22, 23, 0.15)',\n  '--btn-primary__bg-img': 'linear-gradient(-180deg,#2fcb53,#269f42 90%)',\n  '--btn-primary__colour': '#d6d8da',\n  '--btn-primary__bg-img---hover': 'linear-gradient(180deg, #484 5%, #171 90%)',\n  '--toolbar__color': '#ededed',\n  '--toolbar__background': '#202020',\n  '--link-colour': '#5bb3f4',\n  '--link-colour--visited': '#a292ef',\n  '--overlay-background': 'rgba(7, 7, 7, 0.54)',\n};\n\nconst cssvarLight: cssvarType = {\n  '--btn__bg-img': 'linear-gradient(-180deg, #fafbfc, #eff3f6 90%)',\n  '--btn__bg-border': '1px solid rgba(27, 31, 35, .35)',\n  '--btn__colour': '#24292e',\n  '--btn__bg-img--hover': 'linear-gradient(-180deg, #f0f3f6, #e6ebf1 90%)',\n  '--btn__bg-color': '#e9ecef',\n  '--btn__border-colour__active': 'rgba(27, 31, 35, .3)',\n  '--btn__insert': 'inset 0 .15em .3em rgba(27, 31, 35, .15)',\n  '--btn-primary__bg-img': 'linear-gradient(-180deg,#2fcb53,#269f42 90%)',\n  '--btn-primary__bg-img---hover': 'linear-gradient(180deg, #373 0%, #060 90%)',\n  '--btn-primary__colour': '#d6d8da',\n  '--toolbar__color': '#282c34',\n  '--toolbar__background': '#e1e4e8',\n  '--link-colour': '#224fd4',\n  '--link-colour--visited': '#9e04bf',\n  '--overlay-background': 'rgba(230, 230, 230, 0.48)',\n};\n\nconst setcolours = (type: shadeType): void => {\n  Object.entries(type === 'LIGHT' ? cssvarLight : cssvarDark).forEach(\n    ([key, val]) => {\n      root.style.setProperty(key, val);\n    }\n  );\n};\n\nexport default setcolours;\n","import immer from 'immer';\r\nimport contrast from 'get-contrast';\r\n\r\nimport setcolours from 'utils/setcolours';\r\n\r\nimport {\r\n  themeType,\r\n  shadeType,\r\n  themeShadeObjectType,\r\n  actionTypes,\r\n  previewType,\r\n} from 'types';\r\n\r\nexport type stateType = {\r\n  themes: themeType[];\r\n  filteredThemes: themeType[];\r\n  activeTheme: string;\r\n  isSmallScreenSize: boolean;\r\n  themeShade: shadeType;\r\n  backgroundColour: string;\r\n  previewType: previewType;\r\n};\r\n\r\nconst titleColours: titleColoursType[] = [\r\n  'black',\r\n  'red',\r\n  'green',\r\n  'yellow',\r\n  'blue',\r\n  'purple',\r\n  'cyan',\r\n  'white',\r\n];\r\n\r\nexport const getRandomColour = (theme: themeType | undefined): string => {\r\n  if (theme == null) {\r\n    return '';\r\n  }\r\n  const randomisedColours = titleColours.sort(() => Math.random() - 0.5);\r\n  const accessibleColour = randomisedColours.find(\r\n    (titleColour: titleColoursType) =>\r\n      contrast.ratio(theme[titleColour], theme.background) > 4.5\r\n  );\r\n  if (accessibleColour != null) {\r\n    return theme[accessibleColour];\r\n  }\r\n  return theme[titleColours[0]];\r\n};\r\n\r\nexport const THEME_COLOUR: themeShadeObjectType = {\r\n  LIGHT: 'LIGHT',\r\n  DARK: 'DARK',\r\n  ANY: 'ANY',\r\n};\r\n\r\nexport const initialState: stateType = {\r\n  themes: [],\r\n  filteredThemes: [],\r\n  activeTheme: '',\r\n  isSmallScreenSize: window.innerWidth < 768,\r\n  themeShade: THEME_COLOUR.DARK,\r\n  backgroundColour: '#090300',\r\n  previewType: 'console',\r\n};\r\n\r\nexport const homeReducer = (\r\n  state: stateType,\r\n  action: actionTypes\r\n): stateType => {\r\n  return immer(state, (draftState: stateType) => {\r\n    switch (action.type) {\r\n      case 'LOAD':\r\n        draftState.themes = action.themes;\r\n        if (action.initialTheme != null) {\r\n          const foundTheme = action.themes.find(\r\n            (theme: themeType) => theme.name === action.initialTheme\r\n          );\r\n          if (foundTheme != null) {\r\n            draftState.filteredThemes = action.themes.filter(\r\n              (theme: themeType) => theme.isDark === foundTheme.isDark\r\n            );\r\n            draftState.activeTheme = foundTheme.name;\r\n            draftState.themeShade = foundTheme.isDark ? 'DARK' : 'LIGHT';\r\n            draftState.backgroundColour = foundTheme.background;\r\n          }\r\n        } else {\r\n          // default to DARK, themeShade is already set\r\n          draftState.filteredThemes = action.themes.filter(\r\n            (theme: themeType) => theme.isDark\r\n          );\r\n          draftState.activeTheme = draftState.filteredThemes[0].name;\r\n        }\r\n        setcolours(draftState.themeShade);\r\n        break;\r\n      case 'SET':\r\n        {\r\n          draftState.activeTheme = action.theme;\r\n          // eslint-disable-next-line no-case-declarations\r\n          const theme = state.themes.find(\r\n            (theme) => theme.name === action.theme\r\n          );\r\n          if (theme) {\r\n            draftState.backgroundColour = theme.background;\r\n          }\r\n        }\r\n        break;\r\n      case 'PREV': {\r\n        const currentIndex = state.filteredThemes.findIndex(\r\n          (theme) => theme.name === state.activeTheme\r\n        );\r\n        let theme;\r\n        if (currentIndex === 0) {\r\n          // get last item\r\n          theme = state.filteredThemes[state.filteredThemes.length - 1];\r\n        } else {\r\n          theme = state.filteredThemes[currentIndex - 1];\r\n        }\r\n        draftState.activeTheme = theme.name;\r\n        draftState.backgroundColour = theme.background;\r\n        break;\r\n      }\r\n      case 'NEXT':\r\n        {\r\n          let theme;\r\n          const currentIndex = state.filteredThemes.findIndex(\r\n            (theme) => theme.name === state.activeTheme\r\n          );\r\n          if (currentIndex === state.filteredThemes.length - 1) {\r\n            // get last item\r\n            theme = state.filteredThemes[0];\r\n          } else {\r\n            theme = state.filteredThemes[currentIndex + 1];\r\n          }\r\n          draftState.activeTheme = theme.name;\r\n          draftState.backgroundColour = theme.background;\r\n        }\r\n        break;\r\n      case 'SIZE':\r\n        draftState.isSmallScreenSize = action.isSmallScreenSize;\r\n        break;\r\n      case 'SHADE':\r\n        draftState.themeShade = action.payload;\r\n        if (draftState.themeShade === THEME_COLOUR.DARK) {\r\n          draftState.filteredThemes = state.themes.filter(\r\n            (theme) => theme.isDark\r\n          );\r\n        }\r\n        if (draftState.themeShade === THEME_COLOUR.LIGHT) {\r\n          draftState.filteredThemes = state.themes.filter(\r\n            (theme) => !theme.isDark\r\n          );\r\n        }\r\n        setcolours(draftState.themeShade);\r\n        draftState.activeTheme = draftState.filteredThemes[0].name;\r\n        // eslint-disable-next-line no-case-declarations\r\n        const theme = state.themes.find(\r\n          (theme) => theme.name === draftState.filteredThemes[0].name\r\n        );\r\n        if (theme) {\r\n          draftState.backgroundColour = theme.background;\r\n        }\r\n        break;\r\n      case 'PREVIEW':\r\n        draftState.previewType = action.payload;\r\n        break;\r\n      case 'MORE':\r\n        draftState.isMoreOpen = !state.isMoreOpen;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n};\r\n","import React, {useEffect, useReducer, useRef, useMemo} from 'react';\n\nimport ThemePreview from 'components/ThemePreview/ThemePreview';\nimport Toolbar from 'components/Toolbar/Toolbar';\n\nimport css from './Home.module.css';\nimport {\n  screenSizeObserver,\n  returnInitialTheme,\n  shortcuts,\n  sampleColours,\n} from './homeMethods';\nimport {homeReducer, initialState} from 'components/Home/homeState';\nimport {themeType} from 'types';\n\ntype themeprops = {\n  themes: themeType[];\n};\n\nconst Home: React.FC<themeprops> = (props) => {\n  const themeselectRef = useRef(null);\n  const [state, dispatch] = useReducer(homeReducer, {\n    ...initialState,\n    ...{isSmallScreenSize: window.innerWidth < 1024},\n  });\n  useEffect(() => {\n    dispatch({\n      type: 'LOAD',\n      themes: props.themes,\n      initialTheme: returnInitialTheme(window.location.search),\n    });\n    const resizer = screenSizeObserver(dispatch);\n    resizer.observe(document.body);\n    return () => {\n      resizer.unobserve(document.body);\n    };\n  }, [props.themes]);\n  useEffect(() => {\n    const shortcutFns = shortcuts(dispatch, themeselectRef);\n    document.addEventListener('keypress', shortcutFns);\n    return () => {\n      document.removeEventListener('keypress', shortcutFns);\n    };\n  }, []);\n  const theme = state.themes.find((theme) => theme.name === state.activeTheme);\n  const themeNames = state.filteredThemes.map((theme) => theme.name);\n\n  const stringyTheme = theme != null ? JSON.stringify(theme) : null;\n  const colours = useMemo(() => {\n    // idk, this seems dumb but Dan says it's fine\n    // https://twitter.com/dan_abramov/status/1104414469629898754?lang=en\n    return sampleColours(\n      stringyTheme != null ? JSON.parse(stringyTheme) : null\n    );\n  }, [stringyTheme]);\n  return (\n    <section\n      className={css.container}\n      style={{background: state.backgroundColour}}\n    >\n      <Toolbar\n        themeShade={state.themeShade}\n        previewType={state.previewType}\n        dispatch={dispatch}\n        activeTheme={state.activeTheme}\n        themeNames={themeNames}\n        themeselectRef={themeselectRef}\n        colours={colours}\n        isSmallScreenSize={state.isSmallScreenSize}\n      />\n      <section className={css.content}>\n        <ThemePreview\n          dispatch={dispatch}\n          themeShade={state.themeShade}\n          previewType={state.previewType}\n          theme={theme}\n          backgroundColour={state.backgroundColour}\n          isSmallScreenSize={state.isSmallScreenSize}\n          activeTheme={state.activeTheme}\n          themeNames={themeNames}\n          themeselectRef={themeselectRef}\n        />\n      </section>\n    </section>\n  );\n};\n\nexport default Home;\n","import React from 'react';\n\nimport {Logo} from 'Icons';\n\nimport css from './Skeleton.module.css';\n\nconst Skeleton = (): JSX.Element => (\n  <section className={css.container}>\n    <h1>\n      <Logo\n        size=\"48px\"\n        colours={['#8adbb4', '#d7af87', '#c79ec4']}\n        className={css.logo}\n      />\n      Windows Terminal Themes\n    </h1>\n    <h4>Loading...</h4>\n  </section>\n);\n\nexport default Skeleton;\n","import React from 'react';\n\nimport css from './More.module.css';\n\ntype MoreSectionProps = {\n  heading: string;\n};\n\nconst MoreSection: React.FC<MoreSectionProps> = (props) => {\n  return (\n    <div className={css.section}>\n      <div className={css.heading}>{props.heading}</div>\n      <hr className={css.hr} />\n      {props.children}\n    </div>\n  );\n};\n\ntype MoreContentProps = {\n  downloadAllThemes: () => void;\n};\n\nconst MoreContent = (props: MoreContentProps): JSX.Element => (\n  <section data-testid=\"morecontent\" className={css.container} id=\"more\">\n    <MoreSection heading=\"Download\">\n      <p>\n        Get all the themes as one big json file, warning: not as useful as it\n        sounds{' '}\n        <span role=\"img\" aria-label=\"person shrugging\">\n          🤷‍♀️\n        </span>\n      </p>\n      <button onClick={props.downloadAllThemes}>\n        Download .json of themes\n      </button>\n    </MoreSection>\n    <MoreSection heading=\"Help\">\n      <p>\n        For how to use the themes see the{' '}\n        <a href=\"https://github.com/atomcorp/themes#how-to-use-the-themes\">\n          help section of this repo\n        </a>\n        .\n      </p>\n      <p>\n        See also the{' '}\n        <a href=\"https://github.com/microsoft/terminal/blob/master/doc/user-docs/UsingJsonSettings.md\">\n          Windows Terminal settings official docs\n        </a>\n        .\n      </p>\n    </MoreSection>\n    <MoreSection heading=\"Credit\">\n      <p>\n        Most themes come from{' '}\n        <a href=\"https://github.com/mbadolato/iTerm2-Color-Schemes\">\n          iTerm2 Color Schemes\n        </a>\n        , so huge thanks to them!\n      </p>\n      <p>\n        Also big thanks to those that have contributed themes directly,{' '}\n        <a href=\"https://github.com/atomcorp/themes#credits\">\n          credits on GitHub\n        </a>\n        .\n      </p>\n    </MoreSection>\n    <MoreSection heading=\"Contribute\">\n      <p>\n        New themes are very welcome! To add a new theme to this site either:{' '}\n      </p>\n      <ul>\n        <li>\n          add it through{' '}\n          <a href=\"https://github.com/mbadolato/iTerm2-Color-Schemes#contribute\">\n            iTerm2 Color Schemes\n          </a>{' '}\n          (preferable, it will automatically be used here)\n        </li>\n        <li>\n          or through a pull request to this site&apos;s repo{' '}\n          <a href=\"https://github.com/atomcorp/themes#contribute-a-theme\">\n            Windows Terminal Themes\n          </a>\n        </li>\n      </ul>\n    </MoreSection>\n    <MoreSection heading=\"GitHub\">\n      <p>\n        Star, Fork or file an issue at the{' '}\n        <a href=\"https://github.com/atomcorp/themes\">Windows Terminal Themes</a>{' '}\n        repository on GitHub.\n      </p>\n    </MoreSection>\n    <MoreSection heading=\"Tips\">\n      <p>\n        You can use keyboard shorcuts, <span className={css.key}>A</span> for\n        previous theme, <span className={css.key}>D</span> for next theme.\n      </p>\n      <p>\n        The site should be fully accessible too,{' '}\n        <a href=\"https://github.com/atomcorp/themes/issues\">\n          please open an issue if you notice a problem\n        </a>\n        .\n      </p>\n    </MoreSection>\n  </section>\n);\n\nexport default MoreContent;\n","import React, {useEffect, useState} from 'react';\r\nimport {saveAs} from 'file-saver';\r\n\r\nimport Home from 'components/Home/Home';\r\nimport {themeType} from 'types';\r\nimport Skeleton from 'components/Skeleton/Skeleton';\r\nimport MoreContent from 'components/More/MoreContent';\r\n\r\n/**\r\n * in development https://github.com/atomcorp/terminal-api needs to be installed and running\r\n * for this to work\r\n * package.json has a proxy which redirects stuff it can't find to http://localhost:3001\r\n * then, apiBase can either be '' or http://localhost:3000 (ie the react apps domain)\r\n */\r\nconst apiBase =\r\n  process.env.NODE_ENV === 'development' ? '' : 'https://www.atomcorp.dev';\r\n\r\nconst App: React.FC = () => {\r\n  const [themes, setThemes] = useState<themeType[]>([]);\r\n  useEffect(() => {\r\n    const getThemes = async (): Promise<void> => {\r\n      try {\r\n        const res = await fetch(`${apiBase}/api/v1/themes`);\r\n        const themes = await res.json();\r\n        setThemes(themes);\r\n      } catch (error) {\r\n        // use dynamic importing / code splitting\r\n        import('backupthemes.json').then((backupthemes) => {\r\n          setThemes(backupthemes.default);\r\n        });\r\n      }\r\n    };\r\n    getThemes();\r\n  }, []);\r\n  const downloadAllThemes = (): void => {\r\n    const themeBlob = new Blob(\r\n      [\r\n        JSON.stringify(\r\n          themes.map((theme) => {\r\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n            const {isDark, ...rest} = theme;\r\n            return rest;\r\n          }),\r\n          null,\r\n          2\r\n        ),\r\n      ],\r\n      {\r\n        type: 'application/json',\r\n      }\r\n    );\r\n    saveAs(themeBlob, 'windows-terminal-themes.json', {autoBom: true});\r\n  };\r\n  if (themes.length < 1) {\r\n    return <Skeleton />;\r\n  }\r\n  return (\r\n    <>\r\n      <Home themes={themes} />\r\n      <MoreContent downloadAllThemes={downloadAllThemes} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"More_container__3WQQo\",\"hr\":\"More_hr__12bOj\",\"section\":\"More_section__2p6je\",\"heading\":\"More_heading__3eVBM\",\"key\":\"More_key__gXvA6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Toggle_container__352LE\",\"label\":\"Toggle_label__3W81D\",\"active\":\"Toggle_active__3kMzo\",\"radio\":\"Toggle_radio__RWHXG\",\"outline\":\"Toggle_outline__3zO8j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Toolbar_container__XbNS2\",\"title\":\"Toolbar_title__QJwvt\",\"select\":\"Toolbar_select__2Nqio\",\"toggles\":\"Toolbar_toggles__2PDlS\",\"more\":\"Toolbar_more__3w801\",\"logo\":\"Toolbar_logo__1RvRf\"};"],"sourceRoot":""}