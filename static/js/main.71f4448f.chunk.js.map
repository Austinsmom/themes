{"version":3,"sources":["components/Console/Console.module.css","components/ThemeSelect/ThemeSelect.module.css","components/ShadeChoice/ShadeChoice.module.css","components/Header/Header.module.css","components/Home/Home.module.css","components/Console/consoleMethods.ts","components/Console/Console.tsx","components/ThemeList/ThemeList.tsx","components/ThemeSelect/ThemeSelect.tsx","components/Header/Header.tsx","components/Home/homeMethods.ts","components/ShadeChoice/ShadeChoice.tsx","components/Home/Home.tsx","App.tsx","serviceWorker.ts","index.tsx","components/ThemeList/ThemeList.module.css"],"names":["module","exports","backgroundKeys","textKeys","validKeys","initThemeObj","name","black","red","green","yellow","blue","purple","cyan","white","brightBlack","brightRed","brightGreen","brightYellow","brightBlue","brightPurple","brightCyan","brightWhite","background","foreground","Console","props","useState","copied","setCopied","shared","setShared","theme","className","css","container","style","backgroundColour","data-testid","color","primaryColour","matrix","map","textKey","i","backgroundKey","y","key","cell","buttons","data-text","button","onClick","clipboard","JSON","stringify","reduce","acc","setTimeout","share","borderColor","window","location","origin","pathname","encodeURIComponent","loading","ThemeList","scrollToLabel","useEffect","themeNames","themeName","activeTheme","type","id","value","checked","onChange","dispatch","label","htmlFor","tabbed","ThemeSelect","select","e","preventDefault","target","themeBlob","Blob","themeJson","Header","href","title","paragraph","rel","download","saveAs","autoBom","titleColours","getRandomColour","accessibleColour","sort","Math","random","find","titleColour","contrast","ratio","THEME_COLOUR","initialState","themes","filteredThemes","isSmallScreenSize","innerWidth","themeShade","homeReducer","state","action","immer","draftState","initialTheme","foundTheme","filter","isDark","ShadeChoice","Home","sidebarRef","useRef","useReducer","search","length","URLSearchParams","get","returnInitialTheme","useCallback","current","labelEl","querySelector","labelElDimensions","getBoundingClientRect","sidebarViewHeight","offsetHeight","sidebarScrollHeight","scrollHeight","scrollTop","top","resizer","ResizeObserver","entries","width","contentRect","screenSizeObserver","observe","document","body","unobserve","ref","sidebar","dark","light","content","App","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.71f4448f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Console_container__3E4SB\",\"name\":\"Console_name__25rXG\",\"matrix\":\"Console_matrix__3sGSe\",\"cell\":\"Console_cell__20QQz\",\"button\":\"Console_button__3FEID\",\"copied\":\"Console_copied__1om0X\",\"mymove\":\"Console_mymove__34hJP\",\"loading\":\"Console_loading__ZBrD5\",\"share\":\"Console_share__3cpXQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ThemeSelect_container__27kX6\",\"select\":\"ThemeSelect_select__fVlm5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ShadeChoice_container__10lHy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Header_title__3pnEU\",\"paragraph\":\"Header_paragraph__3hwbP\",\"download\":\"Header_download__3dqhv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Home_container__nWlbU\",\"sidebar\":\"Home_sidebar__2ovA5\",\"content\":\"Home_content__1T6Qf\",\"light\":\"Home_light__2G6mS\",\"dark\":\"Home_dark__3UboT\"};","import {\n  backgroundKeyType,\n  textKeyType,\n  validThemeType,\n  themeType,\n  validKeysType,\n} from 'types';\n\nexport const backgroundKeys: backgroundKeyType[] = [\n  'background',\n  'black',\n  'red',\n  'green',\n  'yellow',\n  'blue',\n  'purple',\n  'cyan',\n  'white',\n  'background',\n];\n\nexport const textKeys: textKeyType[] = [\n  'black',\n  'brightBlack',\n  'red',\n  'brightRed',\n  'green',\n  'brightGreen',\n  'yellow',\n  'brightYellow',\n  'blue',\n  'brightBlue',\n  'purple',\n  'brightPurple',\n  'cyan',\n  'brightCyan',\n  'white',\n  'brightWhite',\n];\n\nconst validKeys: validKeysType = [\n  'name',\n  'black',\n  'red',\n  'green',\n  'yellow',\n  'blue',\n  'purple',\n  'cyan',\n  'white',\n  'brightBlack',\n  'brightRed',\n  'brightGreen',\n  'brightYellow',\n  'brightBlue',\n  'brightPurple',\n  'brightCyan',\n  'brightWhite',\n  'background',\n  'foreground',\n];\n\n// this just keeps Typescript happy\nconst initThemeObj = {\n  name: '',\n  black: '',\n  red: '',\n  green: '',\n  yellow: '',\n  blue: '',\n  purple: '',\n  cyan: '',\n  white: '',\n  brightBlack: '',\n  brightRed: '',\n  brightGreen: '',\n  brightYellow: '',\n  brightBlue: '',\n  brightPurple: '',\n  brightCyan: '',\n  brightWhite: '',\n  background: '',\n  foreground: '',\n};\n\nexport const parseValidKeys = (theme: themeType): validThemeType => {\n  return validKeys.reduce(\n    (acc, key) => ({\n      ...acc,\n      ...{\n        [key]: theme[key],\n      },\n    }),\n    initThemeObj\n  );\n};\n","import React, {useState} from 'react';\nimport * as clipboard from 'clipboard-polyfill';\n\nimport {themeType} from 'types';\nimport css from './Console.module.css';\nimport {backgroundKeys, textKeys, parseValidKeys} from './consoleMethods';\n\ntype PropsType = {\n  theme?: themeType;\n  primaryColour: string;\n  backgroundColour: string;\n};\n\nconst Console: React.FC<PropsType> = (props) => {\n  const [copied, setCopied] = useState(false);\n  const [shared, setShared] = useState(false);\n  if (!props.theme) {\n    return (\n      <div\n        style={{background: props.backgroundColour, color: props.primaryColour}}\n        className={css.loading}\n      >\n        Loading...\n      </div>\n    );\n  }\n  return (\n    <section\n      className={css.container}\n      style={{background: props.backgroundColour}}\n    >\n      <h2\n        data-testid=\"selected-title\"\n        className={css.name}\n        style={{color: props.primaryColour}}\n      >\n        {props.theme.name}\n      </h2>\n      <div className={css.matrix}>\n        {textKeys.map((textKey, i) =>\n          backgroundKeys.map((backgroundKey, y) => (\n            <div\n              key={i + ' ' + y}\n              className={css.cell}\n              style={{\n                background: props.theme ? props.theme[backgroundKey] : '',\n                color: props.theme ? props.theme[textKey] : '',\n              }}\n            >\n              gYw\n            </div>\n          ))\n        )}\n      </div>\n      <div className={css.buttons}>\n        <button\n          data-text={copied ? 'Copied!' : 'Copy Theme'}\n          className={`${css.button}${copied ? ` ${css.copied}` : ''}`}\n          style={{\n            color: props.theme.background,\n            background: props.primaryColour,\n          }}\n          onClick={() => {\n            if (!copied && props.theme) {\n              setCopied(true);\n              clipboard.writeText(\n                JSON.stringify(parseValidKeys(props.theme), null, 2)\n              );\n              setTimeout(() => {\n                setCopied(false);\n              }, 500);\n            }\n          }}\n        >\n          Copy Theme\n        </button>\n        <button\n          data-text={shared ? 'Copied!' : 'Share Theme'}\n          className={`${css.button} ${css.share} ${\n            shared ? ` ${css.copied}` : ''\n          }`}\n          style={{\n            color: props.primaryColour,\n            borderColor: props.primaryColour,\n            background: props.theme.background,\n          }}\n          onClick={() => {\n            if (!shared) {\n              setShared(true);\n              setTimeout(() => {\n                if (props.theme != null) {\n                  clipboard.writeText(\n                    `${window.location.origin}${\n                      window.location.pathname\n                    }?theme=${encodeURIComponent(props.theme.name)}`\n                  );\n                }\n                setShared(false);\n              }, 500);\n            }\n          }}\n        >\n          Share theme\n        </button>\n      </div>\n    </section>\n  );\n};\n\nexport default Console;\n","import React, {useEffect} from 'react';\r\n\r\nimport {actionTypes} from 'types';\r\nimport css from './ThemeList.module.css';\r\n\r\ntype PropsType = {\r\n  themeNames: string[];\r\n  activeTheme: string;\r\n  dispatch: React.Dispatch<actionTypes>;\r\n  primaryColour: string;\r\n  backgroundColour: string;\r\n  scrollToLabel: () => void;\r\n};\r\n\r\nconst ThemeList: React.FC<PropsType> = (props) => {\r\n  const {scrollToLabel} = props;\r\n  useEffect(() => {\r\n    scrollToLabel();\r\n  }, [scrollToLabel]);\r\n  return (\r\n    <fieldset className={css.container} name=\"theme\" data-testid=\"theme-list\">\r\n      {props.themeNames.map((themeName) => (\r\n        <div\r\n          key={themeName}\r\n          style={{\r\n            color:\r\n              themeName === props.activeTheme ? props.backgroundColour : '',\r\n            background:\r\n              themeName === props.activeTheme ? props.primaryColour : '',\r\n          }}\r\n          className={`${css.theme}`}\r\n        >\r\n          <input\r\n            type=\"radio\"\r\n            id={themeName}\r\n            name=\"theme\"\r\n            value={themeName}\r\n            checked={themeName === props.activeTheme}\r\n            onChange={() => {\r\n              props.dispatch({type: 'SET', theme: themeName});\r\n            }}\r\n          />\r\n          <label className={css.label} htmlFor={themeName}>\r\n            <span className={css.tabbed}>{themeName}</span>\r\n          </label>\r\n        </div>\r\n      ))}\r\n    </fieldset>\r\n  );\r\n};\r\n\r\nexport default ThemeList;\r\n","import React from 'react';\n\nimport {actionTypes} from 'types';\nimport css from './ThemeSelect.module.css';\n\ntype PropsType = {\n  themeNames: string[];\n  activeTheme: string;\n  dispatch: React.Dispatch<actionTypes>;\n};\n\nconst ThemeSelect: React.FC<PropsType> = (props) => (\n  <label className={css.container} htmlFor=\"theme-select\">\n    Change theme:{' '}\n    <select\n      id=\"theme-select\"\n      className={css.select}\n      value={props.activeTheme}\n      onChange={(e) => {\n        e.preventDefault();\n        if (e.target) {\n          props.dispatch({type: 'SET', theme: e.target.value});\n        }\n      }}\n    >\n      {props.themeNames.map((themeName) => (\n        <option value={themeName} key={themeName}>\n          {themeName}\n        </option>\n      ))}\n    </select>\n  </label>\n);\n\nexport default ThemeSelect;\n","import React from 'react';\nimport {saveAs} from 'file-saver';\n\nimport themeJson from 'colour-schemes.json';\nimport css from './Header.module.css';\n\ntype PropTypes = {\n  primaryColour: string;\n};\n\nconst themeBlob = new Blob([JSON.stringify(themeJson, null, 2)], {\n  type: 'application/json',\n});\n\nconst Header: React.FC<PropTypes> = (props) => (\n  <>\n    <a href=\"/themes\" className={css.title}>\n      <h1 style={{color: props.primaryColour}}>Windows Terminal Themes</h1>\n    </a>\n    <p className={css.paragraph}>\n      Themes for{' '}\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href=\"https://www.microsoft.com/en-us/p/windows-terminal-preview/9n0dx20hk701\"\n      >\n        Windows Terminal (Preview)\n      </a>\n    </p>\n    <p className={css.paragraph}>\n      For how to use the themes see the{' '}\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href=\"https://github.com/atomcorp/themes#how-to-use-the-themes\"\n      >\n        help section on GitHub\n      </a>\n    </p>\n    <p className={css.paragraph}>\n      The themes come from{' '}\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href=\"https://github.com/mbadolato/iTerm2-Color-Schemes\"\n      >\n        iTerm2 Color Schemes\n      </a>\n      , so thanks to them.\n    </p>\n    <p className={css.paragraph}>\n      <button\n        className={css.download}\n        onClick={() => {\n          saveAs(themeBlob, 'windows-terminal-themes.json', {autoBom: true});\n        }}\n      >\n        Download all the themes\n      </button>\n      {' | '}\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href=\"https://github.com/atomcorp/themes\"\n      >\n        Github page\n      </a>\n    </p>\n  </>\n);\n\nexport default Header;\n","import contrast from 'get-contrast';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport immer from 'immer';\n\nimport {\n  themeType,\n  themeShadeType,\n  themeShadeObjectType,\n  actionTypes,\n} from 'types';\n\ntype titleColoursType =\n  | 'black'\n  | 'red'\n  | 'green'\n  | 'yellow'\n  | 'blue'\n  | 'purple'\n  | 'cyan'\n  | 'white';\n\nconst titleColours: titleColoursType[] = [\n  'black',\n  'red',\n  'green',\n  'yellow',\n  'blue',\n  'purple',\n  'cyan',\n  'white',\n];\n\nexport const getRandomColour = (theme: themeType | undefined): string => {\n  if (theme == null) {\n    return '';\n  }\n  const randomisedColours = titleColours.sort(() => Math.random() - 0.5);\n  const accessibleColour = randomisedColours.find(\n    (titleColour: titleColoursType) =>\n      contrast.ratio(theme[titleColour], theme.background) > 4.5\n  );\n  if (accessibleColour != null) {\n    return theme[accessibleColour];\n  }\n  return theme[titleColours[0]];\n};\n\nexport const returnInitialTheme = (search: string): string | null => {\n  if (search.length > 0) {\n    const params = new URLSearchParams(search);\n    const themeName = params.get('theme');\n    if (themeName != null) {\n      return themeName;\n    }\n  }\n  return null;\n};\n\nexport const screenSizeObserver = (\n  dispatch: React.Dispatch<actionTypes>\n): ResizeObserver => {\n  return new ResizeObserver((entries: ResizeObserverEntry[]) => {\n    const {width} = entries[0].contentRect;\n    if (width > 768) {\n      dispatch({type: 'SIZE', isSmallScreenSize: false});\n    } else if (width < 768) {\n      dispatch({type: 'SIZE', isSmallScreenSize: true});\n    }\n  });\n};\n\nexport const THEME_COLOUR: themeShadeObjectType = {\n  LIGHT: 'LIGHT',\n  DARK: 'DARK',\n  ANY: 'ANY',\n};\n\nexport type stateType = {\n  themes: themeType[];\n  filteredThemes: themeType[];\n  activeTheme: string;\n  isSmallScreenSize: boolean;\n  themeShade: themeShadeType;\n  primaryColour: string;\n  backgroundColour: string;\n};\n\nexport const initialState: stateType = {\n  themes: [],\n  filteredThemes: [],\n  activeTheme: '',\n  isSmallScreenSize: window.innerWidth < 768,\n  themeShade: THEME_COLOUR.DARK,\n  primaryColour: '#fded02',\n  backgroundColour: '#090300',\n};\n\nexport const homeReducer = (\n  state: stateType,\n  action: actionTypes\n): stateType => {\n  return immer(state, (draftState: stateType) => {\n    let theme;\n    switch (action.type) {\n      case 'LOAD':\n        draftState.themes = action.themes;\n        if (action.initialTheme != null) {\n          const foundTheme = action.themes.find(\n            (theme: themeType) => theme.name === action.initialTheme\n          );\n          if (foundTheme != null) {\n            draftState.filteredThemes = action.themes.filter(\n              (theme: themeType) => theme.isDark === foundTheme.isDark\n            );\n            draftState.activeTheme = foundTheme.name;\n            draftState.themeShade = foundTheme.isDark ? 'DARK' : 'LIGHT';\n            draftState.primaryColour = getRandomColour(foundTheme);\n            draftState.backgroundColour = foundTheme.background;\n            break;\n          }\n        }\n        draftState.filteredThemes = action.themes.filter(\n          (theme: themeType) => theme.isDark\n        );\n        draftState.activeTheme = draftState.filteredThemes[0].name;\n        break;\n      case 'SET':\n        draftState.activeTheme = action.theme;\n        // eslint-disable-next-line no-case-declarations\n        theme = state.themes.find((theme) => theme.name === action.theme);\n        if (theme) {\n          draftState.primaryColour = getRandomColour(theme);\n          draftState.backgroundColour = theme.background;\n        }\n        break;\n      case 'SIZE':\n        draftState.isSmallScreenSize = action.isSmallScreenSize;\n        break;\n      case 'SHADE':\n        draftState.themeShade = action.themeShade;\n        if (draftState.themeShade === THEME_COLOUR.DARK) {\n          draftState.filteredThemes = state.themes.filter(\n            (theme) => theme.isDark\n          );\n        }\n        if (draftState.themeShade === THEME_COLOUR.LIGHT) {\n          draftState.filteredThemes = state.themes.filter(\n            (theme) => !theme.isDark\n          );\n        }\n        draftState.activeTheme = draftState.filteredThemes[0].name;\n        // eslint-disable-next-line no-case-declarations\n        theme = state.themes.find(\n          (theme) => theme.name === draftState.filteredThemes[0].name\n        );\n        if (theme) {\n          draftState.primaryColour = getRandomColour(theme);\n          draftState.backgroundColour = theme.background;\n        }\n        break;\n      default:\n        break;\n    }\n  });\n};\n","import React from 'react';\n\nimport {THEME_COLOUR} from 'components/Home/homeMethods';\nimport {themeShadeType, actionTypes} from 'types';\nimport css from './ShadeChoice.module.css';\n\ntype PropsState = {\n  themeShade: themeShadeType;\n  dispatch: React.Dispatch<actionTypes>;\n};\n\nconst ShadeChoice: React.FC<PropsState> = (props) => (\n  <section className={css.container}>\n    Choose type:\n    <label htmlFor=\"dark\">\n      <input\n        name=\"shade\"\n        type=\"radio\"\n        id=\"dark\"\n        value={THEME_COLOUR.DARK}\n        checked={THEME_COLOUR.DARK === props.themeShade}\n        onChange={() => {\n          props.dispatch({type: 'SHADE', themeShade: THEME_COLOUR.DARK});\n        }}\n      />\n      Dark\n    </label>\n    <label htmlFor=\"light\">\n      <input\n        name=\"shade\"\n        type=\"radio\"\n        id=\"light\"\n        value={THEME_COLOUR.LIGHT}\n        checked={THEME_COLOUR.LIGHT === props.themeShade}\n        onChange={() => {\n          props.dispatch({type: 'SHADE', themeShade: THEME_COLOUR.LIGHT});\n        }}\n      />\n      Light\n    </label>\n  </section>\n);\n\nexport default ShadeChoice;\n","import React, {useEffect, useReducer, useRef, useCallback} from 'react';\n\nimport Console from 'components/Console/Console';\nimport ThemeList from 'components/ThemeList/ThemeList';\nimport ThemeSelect from 'components/ThemeSelect/ThemeSelect';\nimport Header from 'components/Header/Header';\nimport ShadeChoice from 'components/ShadeChoice/ShadeChoice';\nimport css from './Home.module.css';\nimport {\n  homeReducer,\n  initialState,\n  screenSizeObserver,\n  THEME_COLOUR,\n  returnInitialTheme,\n} from './homeMethods';\nimport {themeType} from 'types';\n\ntype themeprops = {\n  themes: themeType[];\n};\n\nconst Home: React.FC<themeprops> = (props) => {\n  const sidebarRef = useRef<HTMLElement>(null);\n  const [state, dispatch] = useReducer(homeReducer, {\n    ...initialState,\n    ...{isSmallScreenSize: window.innerWidth < 768},\n  });\n  const initialTheme = returnInitialTheme(window.location.search);\n  const scrollToLabel = useCallback((): void => {\n    // scroll to the initialTheme, if used\n\n    if (\n      initialTheme != null &&\n      window.innerWidth >= 768 &&\n      sidebarRef.current != null\n    ) {\n      const labelEl = sidebarRef.current.querySelector(\n        `[for=\"${initialTheme}\"]`\n      );\n      if (labelEl != null) {\n        const labelElDimensions = labelEl.getBoundingClientRect();\n        const sidebarViewHeight = sidebarRef.current.offsetHeight;\n        const sidebarScrollHeight = sidebarRef.current.scrollHeight;\n        sidebarRef.current.scrollTop =\n          labelElDimensions.top > sidebarScrollHeight - sidebarViewHeight\n            ? labelElDimensions.top\n            : labelElDimensions.top - sidebarViewHeight / 2;\n      }\n    }\n  }, []);\n  useEffect(() => {\n    dispatch({\n      type: 'LOAD',\n      themes: props.themes,\n      initialTheme: initialTheme,\n    });\n    const resizer = screenSizeObserver(dispatch);\n    resizer.observe(document.body);\n    return () => {\n      resizer.unobserve(document.body);\n    };\n  }, []);\n  const theme = state.themes.find((theme) => theme.name === state.activeTheme);\n  const themeNames = state.filteredThemes.map((theme) => theme.name);\n  return (\n    <section className={css.container}>\n      <aside\n        ref={sidebarRef}\n        style={{\n          background: state.backgroundColour,\n        }}\n        className={`${css.sidebar} ${\n          state.themeShade === THEME_COLOUR.DARK ? css.dark : css.light\n        }`}\n      >\n        <Header primaryColour={state.primaryColour} />\n        <ShadeChoice dispatch={dispatch} themeShade={state.themeShade} />\n        {!state.isSmallScreenSize ? (\n          /**\n           * this length check is just to make sure when the ThemeList loads it will have themes\n           * it needs to do this to make the scrollToLabel function work when the component loads\n           */\n          themeNames.length > 0 && (\n            <ThemeList\n              themeNames={themeNames}\n              activeTheme={state.activeTheme}\n              dispatch={dispatch}\n              primaryColour={state.primaryColour}\n              backgroundColour={state.backgroundColour}\n              scrollToLabel={scrollToLabel}\n            />\n          )\n        ) : (\n          <ThemeSelect\n            themeNames={themeNames}\n            activeTheme={state.activeTheme}\n            dispatch={dispatch}\n          />\n        )}\n      </aside>\n      <section className={css.content}>\n        <Console\n          theme={theme}\n          primaryColour={state.primaryColour}\n          backgroundColour={state.backgroundColour}\n        />\n      </section>\n    </section>\n  );\n};\n\nexport default Home;\n","import React from 'react';\n\nimport Home from 'components/Home/Home';\nimport themeJson from 'colour-schemes.json';\nimport {themeType} from 'types';\n\nconst themes = themeJson as themeType[];\n\nconst App: React.FC = () => {\n  return <Home themes={themes} />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ThemeList_container__uUIR5\",\"theme\":\"ThemeList_theme__32ST6\",\"label\":\"ThemeList_label__UKr3W\",\"active\":\"ThemeList_active__1cVNb\"};"],"sourceRoot":""}