{"version":3,"sources":["components/Console/Console.module.css","components/ShadeChoice/ShadeChoice.module.css","components/Header/Header.module.css","components/Console/consoleMethods.ts","components/Console/Console.tsx","components/ThemeList/ThemeList.tsx","components/ThemeSelect/ThemeSelect.tsx","components/Header/Header.tsx","components/Home/homeMethods.ts","components/ShadeChoice/ShadeChoice.tsx","components/Home/Home.tsx","App.tsx","serviceWorker.ts","index.tsx","components/Home/Home.module.css","components/ThemeList/ThemeList.module.css","components/ThemeSelect/ThemeSelect.module.css"],"names":["module","exports","backgroundKeys","textKeys","validKeys","initThemeObj","name","black","red","green","yellow","blue","purple","cyan","white","brightBlack","brightRed","brightGreen","brightYellow","brightBlue","brightPurple","brightCyan","brightWhite","background","foreground","Console","props","useState","textCopied","setTextCopied","theme","className","css","container","style","backgroundColour","data-testid","color","primaryColour","matrix","map","textKey","i","backgroundKey","y","key","cell","button","onClick","clipboard","JSON","stringify","reduce","acc","setTimeout","loading","ThemeList","themeNames","themeName","activeTheme","type","id","value","checked","onChange","dispatch","label","htmlFor","tabbed","ThemeSelect","select","e","preventDefault","target","themeBlob","Blob","themeJson","Header","title","paragraph","rel","href","download","saveAs","autoBom","titleColours","getRandomColour","accessibleColour","sort","Math","random","find","titleColour","contrast","ratio","assignColourType","themes","isDark","THEME_COLOUR","initialState","filteredThemes","isSmallScreenSize","window","innerWidth","themeShade","homeReducer","state","action","immer","draftState","filter","ShadeChoice","Home","useReducer","useEffect","resizer","ResizeObserver","entries","width","contentRect","screenSizeObserver","observe","document","body","unobserve","sidebar","dark","light","content","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8bdfc051.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Console_container__3E4SB\",\"name\":\"Console_name__25rXG\",\"matrix\":\"Console_matrix__3sGSe\",\"cell\":\"Console_cell__20QQz\",\"button\":\"Console_button__3FEID\",\"loading\":\"Console_loading__ZBrD5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ShadeChoice_container__10lHy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Header_title__3pnEU\",\"paragraph\":\"Header_paragraph__3hwbP\",\"download\":\"Header_download__3dqhv\"};","import {\n  backgroundKeyType,\n  textKeyType,\n  validThemeType,\n  themeType,\n  validKeysType,\n} from 'types';\n\nexport const backgroundKeys: backgroundKeyType[] = [\n  'background',\n  'black',\n  'red',\n  'green',\n  'yellow',\n  'blue',\n  'purple',\n  'cyan',\n  'white',\n  'background',\n];\n\nexport const textKeys: textKeyType[] = [\n  'black',\n  'brightBlack',\n  'red',\n  'brightRed',\n  'green',\n  'brightGreen',\n  'yellow',\n  'brightYellow',\n  'blue',\n  'brightBlue',\n  'purple',\n  'brightPurple',\n  'cyan',\n  'brightCyan',\n  'white',\n  'brightWhite',\n];\n\nconst validKeys: validKeysType = [\n  'name',\n  'black',\n  'red',\n  'green',\n  'yellow',\n  'blue',\n  'purple',\n  'cyan',\n  'white',\n  'brightBlack',\n  'brightRed',\n  'brightGreen',\n  'brightYellow',\n  'brightBlue',\n  'brightPurple',\n  'brightCyan',\n  'brightWhite',\n  'background',\n  'foreground',\n];\n\n// this just keeps Typescript happy\nconst initThemeObj = {\n  name: '',\n  black: '',\n  red: '',\n  green: '',\n  yellow: '',\n  blue: '',\n  purple: '',\n  cyan: '',\n  white: '',\n  brightBlack: '',\n  brightRed: '',\n  brightGreen: '',\n  brightYellow: '',\n  brightBlue: '',\n  brightPurple: '',\n  brightCyan: '',\n  brightWhite: '',\n  background: '',\n  foreground: '',\n};\n\nexport const parseValidKeys = (theme: themeType): validThemeType => {\n  return validKeys.reduce(\n    (acc, key) => ({\n      ...acc,\n      ...{\n        [key]: theme[key],\n      },\n    }),\n    initThemeObj\n  );\n};\n","import React, {useState} from 'react';\nimport * as clipboard from 'clipboard-polyfill';\n\nimport {themeType} from 'types';\nimport css from './Console.module.css';\nimport {backgroundKeys, textKeys, parseValidKeys} from './consoleMethods';\n\ntype PropsType = {\n  theme?: themeType;\n  primaryColour: string;\n  backgroundColour: string;\n};\n\nconst Console: React.FC<PropsType> = (props) => {\n  const [textCopied, setTextCopied] = useState(false);\n  if (!props.theme) {\n    return (\n      <div\n        style={{background: props.backgroundColour, color: props.primaryColour}}\n        className={css.loading}\n      >\n        Loading...\n      </div>\n    );\n  }\n  return (\n    <section\n      className={css.container}\n      style={{background: props.backgroundColour}}\n    >\n      <h2\n        data-testid=\"selected-title\"\n        className={css.name}\n        style={{color: props.primaryColour}}\n      >\n        {props.theme.name}\n      </h2>\n      <div className={css.matrix}>\n        {textKeys.map((textKey, i) =>\n          backgroundKeys.map((backgroundKey, y) => (\n            <div\n              key={i + ' ' + y}\n              className={css.cell}\n              style={{\n                background: props.theme ? props.theme[backgroundKey] : '',\n                color: props.theme ? props.theme[textKey] : '',\n              }}\n            >\n              gYw\n            </div>\n          ))\n        )}\n      </div>\n      <button\n        className={css.button}\n        style={{color: props.theme.background, background: props.primaryColour}}\n        onClick={() => {\n          if (!textCopied && props.theme) {\n            setTextCopied(true);\n            clipboard.writeText(\n              JSON.stringify(parseValidKeys(props.theme), null, 2)\n            );\n            setTimeout(() => {\n              setTextCopied(false);\n            }, 500);\n          }\n        }}\n      >\n        {!textCopied ? 'Copy Theme' : 'Copied!'}\n      </button>\n    </section>\n  );\n};\n\nexport default Console;\n","import React from 'react';\n\nimport {actionTypes} from 'types';\nimport css from './ThemeList.module.css';\n\ntype PropsType = {\n  themeNames: string[];\n  activeTheme: string;\n  dispatch: React.Dispatch<actionTypes>;\n  primaryColour: string;\n  backgroundColour: string;\n};\n\nconst ThemeList: React.FC<PropsType> = (props) => (\n  <fieldset className={css.container} name=\"theme\" data-testid=\"theme-list\">\n    {props.themeNames.map((themeName) => (\n      <div\n        key={themeName}\n        style={{\n          color: themeName === props.activeTheme ? props.backgroundColour : '',\n          background:\n            themeName === props.activeTheme ? props.primaryColour : '',\n        }}\n        className={`${css.theme}`}\n      >\n        <input\n          type=\"radio\"\n          id={themeName}\n          name=\"theme\"\n          value={themeName}\n          checked={themeName === props.activeTheme}\n          onChange={() => {\n            props.dispatch({type: 'SET', theme: themeName});\n          }}\n        />\n        <label className={css.label} htmlFor={themeName}>\n          <span className={css.tabbed}>{themeName}</span>\n        </label>\n      </div>\n    ))}\n  </fieldset>\n);\n\nexport default ThemeList;\n","import React from 'react';\n\nimport {actionTypes} from 'types';\nimport css from './ThemeSelect.module.css';\n\ntype PropsType = {\n  themeNames: string[];\n  activeTheme: string;\n  dispatch: React.Dispatch<actionTypes>;\n};\n\nconst ThemeSelect: React.FC<PropsType> = (props) => (\n  <label className={css.container} htmlFor=\"theme-select\">\n    Change theme:{' '}\n    <select\n      id=\"theme-select\"\n      className={css.select}\n      value={props.activeTheme}\n      onChange={(e) => {\n        e.preventDefault();\n        if (e.target) {\n          props.dispatch({type: 'SET', theme: e.target.value});\n        }\n      }}\n    >\n      {props.themeNames.map((themeName) => (\n        <option value={themeName} key={themeName}>\n          {themeName}\n        </option>\n      ))}\n    </select>\n  </label>\n);\n\nexport default ThemeSelect;\n","import React from 'react';\nimport {saveAs} from 'file-saver';\n\nimport themeJson from 'colour-schemes.json';\nimport css from './Header.module.css';\n\ntype PropTypes = {\n  primaryColour: string;\n};\n\nconst themeBlob = new Blob([JSON.stringify(themeJson, null, 2)], {\n  type: 'application/json',\n});\n\nconst Header: React.FC<PropTypes> = (props) => (\n  <>\n    <h1 style={{color: props.primaryColour}} className={css.title}>\n      Windows Terminal Themes\n    </h1>\n    <p className={css.paragraph}>\n      Themes for{' '}\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href=\"https://www.microsoft.com/en-us/p/windows-terminal-preview/9n0dx20hk701\"\n      >\n        Windows Terminal (Preview)\n      </a>\n      . To add new themes, open up settings (profile.json), copy a theme into\n      schemes and then reference the name in profiles.\n    </p>\n    <p className={css.paragraph}>\n      The themes come from{' '}\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href=\"https://github.com/mbadolato/iTerm2-Color-Schemes\"\n      >\n        iTerm2 Color Schemes\n      </a>\n      , so thanks to them.\n    </p>\n    <p className={css.paragraph}>\n      <button\n        className={css.download}\n        onClick={() => {\n          saveAs(themeBlob, 'windows-terminal-themes.json', {autoBom: true});\n        }}\n      >\n        Download all the themes\n      </button>\n      {' | '}\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href=\"https://github.com/atomcorp/themes\"\n      >\n        Github page\n      </a>\n    </p>\n  </>\n);\n\nexport default Header;\n","import contrast from 'get-contrast';\r\nimport ResizeObserver from 'resize-observer-polyfill';\r\nimport immer from 'immer';\r\n\r\nimport {\r\n  themeType,\r\n  themeShadeType,\r\n  themeShadeObjectType,\r\n  actionTypes,\r\n} from 'types';\r\n\r\ntype titleColoursType =\r\n  | 'black'\r\n  | 'red'\r\n  | 'green'\r\n  | 'yellow'\r\n  | 'blue'\r\n  | 'purple'\r\n  | 'cyan'\r\n  | 'white';\r\n\r\nconst titleColours: titleColoursType[] = [\r\n  'black',\r\n  'red',\r\n  'green',\r\n  'yellow',\r\n  'blue',\r\n  'purple',\r\n  'cyan',\r\n  'white',\r\n];\r\n\r\nexport const getRandomColour = (theme: themeType | undefined): string => {\r\n  if (theme == null) {\r\n    return '';\r\n  }\r\n  const randomisedColours = titleColours.sort(() => Math.random() - 0.5);\r\n  const accessibleColour = randomisedColours.find(\r\n    (titleColour: titleColoursType) =>\r\n      contrast.ratio(theme[titleColour], theme.background) > 4.5\r\n  );\r\n  if (accessibleColour != null) {\r\n    return theme[accessibleColour];\r\n  }\r\n  return theme[titleColours[0]];\r\n};\r\n\r\nexport const assignColourType = (themes: themeType[]): themeType[] => {\r\n  return themes.map((theme) => {\r\n    return {\r\n      ...theme,\r\n      isDark: contrast.ratio(theme.background, '#000') < 8,\r\n    };\r\n  });\r\n};\r\n\r\nexport const screenSizeObserver = (\r\n  dispatch: React.Dispatch<actionTypes>\r\n): ResizeObserver => {\r\n  return new ResizeObserver((entries: ResizeObserverEntry[]) => {\r\n    const {width} = entries[0].contentRect;\r\n    if (width > 768) {\r\n      dispatch({type: 'SIZE', isSmallScreenSize: false});\r\n    } else if (width < 768) {\r\n      dispatch({type: 'SIZE', isSmallScreenSize: true});\r\n    }\r\n  });\r\n};\r\n\r\nexport const THEME_COLOUR: themeShadeObjectType = {\r\n  LIGHT: 'LIGHT',\r\n  DARK: 'DARK',\r\n  ANY: 'ANY',\r\n};\r\n\r\nexport type stateType = {\r\n  themes: themeType[];\r\n  filteredThemes: themeType[];\r\n  activeTheme: string;\r\n  isSmallScreenSize: boolean;\r\n  themeShade: themeShadeType;\r\n  primaryColour: string;\r\n  backgroundColour: string;\r\n};\r\n\r\nexport const initialState: stateType = {\r\n  themes: [],\r\n  filteredThemes: [],\r\n  activeTheme: '',\r\n  isSmallScreenSize: window.innerWidth < 768,\r\n  themeShade: THEME_COLOUR.DARK,\r\n  primaryColour: '#fded02',\r\n  backgroundColour: '#090300',\r\n};\r\n\r\nexport const homeReducer = (\r\n  state: stateType,\r\n  action: actionTypes\r\n): stateType => {\r\n  return immer(state, (draftState: stateType) => {\r\n    let theme;\r\n    switch (action.type) {\r\n      case 'LOAD':\r\n        draftState.themes = action.themes;\r\n        draftState.filteredThemes = action.themes.filter(\r\n          (theme: themeType) => theme.isDark\r\n        );\r\n        draftState.activeTheme = draftState.filteredThemes[0].name;\r\n        break;\r\n      case 'SET':\r\n        draftState.activeTheme = action.theme;\r\n        // eslint-disable-next-line no-case-declarations\r\n        theme = state.themes.find((theme) => theme.name === action.theme);\r\n        if (theme) {\r\n          draftState.primaryColour = getRandomColour(theme);\r\n          draftState.backgroundColour = theme.background;\r\n        }\r\n        break;\r\n      case 'SIZE':\r\n        draftState.isSmallScreenSize = action.isSmallScreenSize;\r\n        break;\r\n      case 'SHADE':\r\n        draftState.themeShade = action.themeShade;\r\n        if (draftState.themeShade === THEME_COLOUR.DARK) {\r\n          draftState.filteredThemes = state.themes.filter(\r\n            (theme) => theme.isDark\r\n          );\r\n        }\r\n        if (draftState.themeShade === THEME_COLOUR.LIGHT) {\r\n          draftState.filteredThemes = state.themes.filter(\r\n            (theme) => !theme.isDark\r\n          );\r\n        }\r\n        draftState.activeTheme = draftState.filteredThemes[0].name;\r\n        // eslint-disable-next-line no-case-declarations\r\n        theme = state.themes.find(\r\n          (theme) => theme.name === draftState.filteredThemes[0].name\r\n        );\r\n        if (theme) {\r\n          draftState.primaryColour = getRandomColour(theme);\r\n          draftState.backgroundColour = theme.background;\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n};\r\n","import React from 'react';\n\nimport {THEME_COLOUR} from 'components/Home/homeMethods';\nimport {themeShadeType, actionTypes} from 'types';\nimport css from './ShadeChoice.module.css';\n\ntype PropsState = {\n  themeShade: themeShadeType;\n  dispatch: React.Dispatch<actionTypes>;\n};\n\nconst ShadeChoice: React.FC<PropsState> = (props) => (\n  <section className={css.container}>\n    Choose type:\n    <label htmlFor=\"dark\">\n      <input\n        name=\"shade\"\n        type=\"radio\"\n        id=\"dark\"\n        value={THEME_COLOUR.DARK}\n        checked={THEME_COLOUR.DARK === props.themeShade}\n        onChange={() => {\n          props.dispatch({type: 'SHADE', themeShade: THEME_COLOUR.DARK});\n        }}\n      />\n      Dark\n    </label>\n    <label htmlFor=\"light\">\n      <input\n        name=\"shade\"\n        type=\"radio\"\n        id=\"light\"\n        value={THEME_COLOUR.LIGHT}\n        checked={THEME_COLOUR.LIGHT === props.themeShade}\n        onChange={() => {\n          props.dispatch({type: 'SHADE', themeShade: THEME_COLOUR.LIGHT});\n        }}\n      />\n      Light\n    </label>\n  </section>\n);\n\nexport default ShadeChoice;\n","import React, {useEffect, useReducer} from 'react';\r\n\r\nimport Console from 'components/Console/Console';\r\nimport ThemeList from 'components/ThemeList/ThemeList';\r\nimport ThemeSelect from 'components/ThemeSelect/ThemeSelect';\r\nimport Header from 'components/Header/Header';\r\nimport ShadeChoice from 'components/ShadeChoice/ShadeChoice';\r\nimport themeJson from 'colour-schemes.json';\r\nimport css from './Home.module.css';\r\nimport {\r\n  homeReducer,\r\n  initialState,\r\n  screenSizeObserver,\r\n  THEME_COLOUR,\r\n  assignColourType,\r\n} from './homeMethods';\r\nimport {themeType} from 'types';\r\n\r\nconst Home: React.FC = () => {\r\n  const [state, dispatch] = useReducer(homeReducer, {\r\n    ...initialState,\r\n    ...{isSmallScreenSize: window.innerWidth < 768},\r\n  });\r\n  useEffect(() => {\r\n    const themes = themeJson as themeType[];\r\n    dispatch({\r\n      type: 'LOAD',\r\n      themes: assignColourType(themes),\r\n    });\r\n    const resizer = screenSizeObserver(dispatch);\r\n    resizer.observe(document.body);\r\n    return () => {\r\n      resizer.unobserve(document.body);\r\n    };\r\n  }, []);\r\n  const theme = state.themes.find((theme) => theme.name === state.activeTheme);\r\n  const themeNames = state.filteredThemes.map((theme) => theme.name);\r\n  return (\r\n    <section className={css.container}>\r\n      <aside\r\n        style={{\r\n          background: state.backgroundColour,\r\n        }}\r\n        className={`${css.sidebar} ${\r\n          state.themeShade === THEME_COLOUR.DARK ? css.dark : css.light\r\n        }`}\r\n      >\r\n        <Header primaryColour={state.primaryColour} />\r\n        <ShadeChoice dispatch={dispatch} themeShade={state.themeShade} />\r\n        {!state.isSmallScreenSize ? (\r\n          <ThemeList\r\n            themeNames={themeNames}\r\n            activeTheme={state.activeTheme}\r\n            dispatch={dispatch}\r\n            primaryColour={state.primaryColour}\r\n            backgroundColour={state.backgroundColour}\r\n          />\r\n        ) : (\r\n          <ThemeSelect\r\n            themeNames={themeNames}\r\n            activeTheme={state.activeTheme}\r\n            dispatch={dispatch}\r\n          />\r\n        )}\r\n      </aside>\r\n      <section className={css.content}>\r\n        <Console\r\n          theme={theme}\r\n          primaryColour={state.primaryColour}\r\n          backgroundColour={state.backgroundColour}\r\n        />\r\n      </section>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\n\nimport Home from 'components/Home/Home';\n\nconst App: React.FC = () => {\n  return <Home />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Home_container__nWlbU\",\"sidebar\":\"Home_sidebar__2ovA5\",\"content\":\"Home_content__1T6Qf\",\"light\":\"Home_light__2G6mS\",\"dark\":\"Home_dark__3UboT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ThemeList_container__uUIR5\",\"theme\":\"ThemeList_theme__32ST6\",\"label\":\"ThemeList_label__UKr3W\",\"active\":\"ThemeList_active__1cVNb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ThemeSelect_container__27kX6\",\"select\":\"ThemeSelect_select__fVlm5\"};"],"sourceRoot":""}